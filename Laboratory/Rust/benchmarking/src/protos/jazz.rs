// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `jazz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Performer {
    // message fields
    pub name: ::std::string::String,
    pub plays: Instrument,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Performer {
    fn default() -> &'a Performer {
        <Performer as ::protobuf::Message>::default_instance()
    }
}

impl Performer {
    pub fn new() -> Performer {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .Instrument plays = 2;


    pub fn get_plays(&self) -> Instrument {
        self.plays
    }
    pub fn clear_plays(&mut self) {
        self.plays = Instrument::Sax;
    }

    // Param is passed by value, moved
    pub fn set_plays(&mut self, v: Instrument) {
        self.plays = v;
    }
}

impl ::protobuf::Message for Performer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.plays, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.plays != Instrument::Sax {
            my_size += ::protobuf::rt::enum_size(2, self.plays);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.plays != Instrument::Sax {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.plays))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Performer {
        Performer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Performer| { &m.name },
                |m: &mut Performer| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Instrument>>(
                "plays",
                |m: &Performer| { &m.plays },
                |m: &mut Performer| { &mut m.plays },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Performer>(
                "Performer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Performer {
        static instance: ::protobuf::rt::LazyV2<Performer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Performer::new)
    }
}

impl ::protobuf::Clear for Performer {
    fn clear(&mut self) {
        self.name.clear();
        self.plays = Instrument::Sax;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Performer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Performer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Song {
    // message fields
    pub title: ::std::string::String,
    pub year: u32,
    pub performers: ::protobuf::RepeatedField<Performer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Song {
    fn default() -> &'a Song {
        <Song as ::protobuf::Message>::default_instance()
    }
}

impl Song {
    pub fn new() -> Song {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // uint32 year = 2;


    pub fn get_year(&self) -> u32 {
        self.year
    }
    pub fn clear_year(&mut self) {
        self.year = 0;
    }

    // Param is passed by value, moved
    pub fn set_year(&mut self, v: u32) {
        self.year = v;
    }

    // repeated .Performer performers = 3;


    pub fn get_performers(&self) -> &[Performer] {
        &self.performers
    }
    pub fn clear_performers(&mut self) {
        self.performers.clear();
    }

    // Param is passed by value, moved
    pub fn set_performers(&mut self, v: ::protobuf::RepeatedField<Performer>) {
        self.performers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_performers(&mut self) -> &mut ::protobuf::RepeatedField<Performer> {
        &mut self.performers
    }

    // Take field
    pub fn take_performers(&mut self) -> ::protobuf::RepeatedField<Performer> {
        ::std::mem::replace(&mut self.performers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Song {
    fn is_initialized(&self) -> bool {
        for v in &self.performers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.year = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.performers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if self.year != 0 {
            my_size += ::protobuf::rt::value_size(2, self.year, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.performers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if self.year != 0 {
            os.write_uint32(2, self.year)?;
        }
        for v in &self.performers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Song {
        Song::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Song| { &m.title },
                |m: &mut Song| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "year",
                |m: &Song| { &m.year },
                |m: &mut Song| { &mut m.year },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Performer>>(
                "performers",
                |m: &Song| { &m.performers },
                |m: &mut Song| { &mut m.performers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Song>(
                "Song",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Song {
        static instance: ::protobuf::rt::LazyV2<Song> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Song::new)
    }
}

impl ::protobuf::Clear for Song {
    fn clear(&mut self) {
        self.title.clear();
        self.year = 0;
        self.performers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Song {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Song {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Album {
    // message fields
    pub tracks: ::protobuf::RepeatedField<Song>,
    pub venumeName: ::std::string::String,
    pub concertDate: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Album {
    fn default() -> &'a Album {
        <Album as ::protobuf::Message>::default_instance()
    }
}

impl Album {
    pub fn new() -> Album {
        ::std::default::Default::default()
    }

    // repeated .Song tracks = 1;


    pub fn get_tracks(&self) -> &[Song] {
        &self.tracks
    }
    pub fn clear_tracks(&mut self) {
        self.tracks.clear();
    }

    // Param is passed by value, moved
    pub fn set_tracks(&mut self, v: ::protobuf::RepeatedField<Song>) {
        self.tracks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tracks(&mut self) -> &mut ::protobuf::RepeatedField<Song> {
        &mut self.tracks
    }

    // Take field
    pub fn take_tracks(&mut self) -> ::protobuf::RepeatedField<Song> {
        ::std::mem::replace(&mut self.tracks, ::protobuf::RepeatedField::new())
    }

    // string venumeName = 2;


    pub fn get_venumeName(&self) -> &str {
        &self.venumeName
    }
    pub fn clear_venumeName(&mut self) {
        self.venumeName.clear();
    }

    // Param is passed by value, moved
    pub fn set_venumeName(&mut self, v: ::std::string::String) {
        self.venumeName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_venumeName(&mut self) -> &mut ::std::string::String {
        &mut self.venumeName
    }

    // Take field
    pub fn take_venumeName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.venumeName, ::std::string::String::new())
    }

    // uint64 concertDate = 3;


    pub fn get_concertDate(&self) -> u64 {
        self.concertDate
    }
    pub fn clear_concertDate(&mut self) {
        self.concertDate = 0;
    }

    // Param is passed by value, moved
    pub fn set_concertDate(&mut self, v: u64) {
        self.concertDate = v;
    }
}

impl ::protobuf::Message for Album {
    fn is_initialized(&self) -> bool {
        for v in &self.tracks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tracks)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.venumeName)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.concertDate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tracks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.venumeName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.venumeName);
        }
        if self.concertDate != 0 {
            my_size += ::protobuf::rt::value_size(3, self.concertDate, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tracks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.venumeName.is_empty() {
            os.write_string(2, &self.venumeName)?;
        }
        if self.concertDate != 0 {
            os.write_uint64(3, self.concertDate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Album {
        Album::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Song>>(
                "tracks",
                |m: &Album| { &m.tracks },
                |m: &mut Album| { &mut m.tracks },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "venumeName",
                |m: &Album| { &m.venumeName },
                |m: &mut Album| { &mut m.venumeName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "concertDate",
                |m: &Album| { &m.concertDate },
                |m: &mut Album| { &mut m.concertDate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Album>(
                "Album",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Album {
        static instance: ::protobuf::rt::LazyV2<Album> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Album::new)
    }
}

impl ::protobuf::Clear for Album {
    fn clear(&mut self) {
        self.tracks.clear();
        self.venumeName.clear();
        self.concertDate = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Album {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Album {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Library {
    // message fields
    pub albums: ::std::collections::HashMap<::std::string::String, Album>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Library {
    fn default() -> &'a Library {
        <Library as ::protobuf::Message>::default_instance()
    }
}

impl Library {
    pub fn new() -> Library {
        ::std::default::Default::default()
    }

    // repeated .Library.albums_MapEntry albums = 1;


    pub fn get_albums(&self) -> &::std::collections::HashMap<::std::string::String, Album> {
        &self.albums
    }
    pub fn clear_albums(&mut self) {
        self.albums.clear();
    }

    // Param is passed by value, moved
    pub fn set_albums(&mut self, v: ::std::collections::HashMap<::std::string::String, Album>) {
        self.albums = v;
    }

    // Mutable pointer to the field.
    pub fn mut_albums(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Album> {
        &mut self.albums
    }

    // Take field
    pub fn take_albums(&mut self) -> ::std::collections::HashMap<::std::string::String, Album> {
        ::std::mem::replace(&mut self.albums, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Library {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Album>>(wire_type, is, &mut self.albums)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Album>>(1, &self.albums);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Album>>(1, &self.albums, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Library {
        Library::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Album>>(
                "albums",
                |m: &Library| { &m.albums },
                |m: &mut Library| { &mut m.albums },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Library>(
                "Library",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Library {
        static instance: ::protobuf::rt::LazyV2<Library> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Library::new)
    }
}

impl ::protobuf::Clear for Library {
    fn clear(&mut self) {
        self.albums.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Library {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Library {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Instrument {
    Sax = 0,
    Trumpet = 1,
    Clarinet = 2,
    Piano = 3,
    Cello = 4,
}

impl ::protobuf::ProtobufEnum for Instrument {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Instrument> {
        match value {
            0 => ::std::option::Option::Some(Instrument::Sax),
            1 => ::std::option::Option::Some(Instrument::Trumpet),
            2 => ::std::option::Option::Some(Instrument::Clarinet),
            3 => ::std::option::Option::Some(Instrument::Piano),
            4 => ::std::option::Option::Some(Instrument::Cello),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Instrument] = &[
            Instrument::Sax,
            Instrument::Trumpet,
            Instrument::Clarinet,
            Instrument::Piano,
            Instrument::Cello,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Instrument>("Instrument", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Instrument {
}

impl ::std::default::Default for Instrument {
    fn default() -> Self {
        Instrument::Sax
    }
}

impl ::protobuf::reflect::ProtobufValue for Instrument {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\njazz.proto\"H\n\tPerformer\x12\x14\n\x04name\x18\x01\x20\x01(\tR\x04\
    nameB\0\x12#\n\x05plays\x18\x02\x20\x01(\x0e2\x0b.InstrumentR\x05playsB\
    \0:\0\"d\n\x04Song\x12\x16\n\x05title\x18\x01\x20\x01(\tR\x05titleB\0\
    \x12\x14\n\x04year\x18\x02\x20\x01(\rR\x04yearB\0\x12,\n\nperformers\x18\
    \x03\x20\x03(\x0b2\n.PerformerR\nperformersB\0:\0\"p\n\x05Album\x12\x1f\
    \n\x06tracks\x18\x01\x20\x03(\x0b2\x05.SongR\x06tracksB\0\x12\x20\n\nven\
    umeName\x18\x02\x20\x01(\tR\nvenumeNameB\0\x12\"\n\x0bconcertDate\x18\
    \x03\x20\x01(\x04R\x0bconcertDateB\0:\0\"\x82\x01\n\x07Library\x122\n\
    \x06albums\x18\x01\x20\x03(\x0b2\x18.Library.albums_MapEntryR\x06albumsB\
    \0\x1aA\n\x0falbums_MapEntry\x12\x0e\n\x03key\x18\x01(\tR\x03key\x12\x1a\
    \n\x05value\x18\x02(\x0b2\x06.AlbumR\x05value:\x028\x01:\0*H\n\nInstrume\
    nt\x12\x07\n\x03Sax\x10\0\x12\x0b\n\x07Trumpet\x10\x01\x12\x0c\n\x08Clar\
    inet\x10\x02\x12\t\n\x05Piano\x10\x03\x12\t\n\x05Cello\x10\x04\x1a\0B\0b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
