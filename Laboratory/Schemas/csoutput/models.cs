//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//       bebopc version:
//           0.0.1-20210810-2118
//
//
//       bebopc source:
//           https://github.com/RainwayApp/bebop
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// This source code was auto-generated by bebopc, Version=0.0.1-20210810-2118.
//
/// <summary>A static class which contains schema defined constants.</summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public static class BopConstants {
  public const int ExampleConstInt32 = -123;
  public const ulong ExampleConstUint64 = 0x123ffffffff;
  public const double ExampleConstFloat64 = 123.45678e9;
  public const double ExampleConstInf = double.PositiveInfinity;
  public const double ExampleConstNegInf = double.NegativeInfinity;
  public const double ExampleConstNan = double.NaN;
  public const bool ExampleConstFalse = false;
  public const bool ExampleConstTrue = true;
  public const string ExampleConstString = "hello \"world\"\r\nwith newlines";
  public static readonly global::System.Guid ExampleConstGuid = new global::System.Guid("e215a946-b26f-4567-a276-13136f0a1708");
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class ArrayOfStrings : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<ArrayOfStrings> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string[] Strings { get; set; }

  /// <summary>
  /// </summary>
  public ArrayOfStrings() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="strings">
  /// </param>
  public ArrayOfStrings([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string[] strings) => (Strings) = (strings);
  public ArrayOfStrings([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ArrayOfStrings original) => (Strings) = (original.Strings);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string[] strings) => (strings) = (Strings);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    {
      var length0 = unchecked((uint)Strings.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Strings[i0].Length);
      }
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    {
      var length0 = unchecked((uint)Strings.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Strings[i0]);
      }
    }
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(ArrayOfStrings record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(ArrayOfStrings record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ArrayOfStrings Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ArrayOfStrings Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ArrayOfStrings Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ArrayOfStrings Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ArrayOfStrings Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(ArrayOfStrings record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.Strings.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteString(record.Strings[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static ArrayOfStrings __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    string[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new string[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        string x0;
        x0 = reader.ReadString();
        field0[i0] = x0;
      }
    }
    return new ArrayOfStrings {
      Strings = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(ArrayOfStrings other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (Strings is null ? other.Strings is null : other.Strings is not null && global::System.Linq.Enumerable.SequenceEqual(Strings, other.Strings));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not ArrayOfStrings baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Strings.GetHashCode();
    return hash;
  }

  public static bool operator ==(ArrayOfStrings left, ArrayOfStrings right) => Equals(left, right);
  public static bool operator !=(ArrayOfStrings left, ArrayOfStrings  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class BasicArrays : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<BasicArrays> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool[] ABool { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Immutable.ImmutableArray<byte> AByte { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public short[] AInt16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ushort[] AUint16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int[] AInt32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint[] AUint32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public long[] AInt64 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong[] AUint64 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public float[] AFloat32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double[] AFloat64 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string[] AString { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid[] AGuid { get; set; }

  /// <summary>
  /// </summary>
  public BasicArrays() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a_bool">
  /// </param>
  /// <param name="a_byte">
  /// </param>
  /// <param name="a_int16">
  /// </param>
  /// <param name="a_uint16">
  /// </param>
  /// <param name="a_int32">
  /// </param>
  /// <param name="a_uint32">
  /// </param>
  /// <param name="a_int64">
  /// </param>
  /// <param name="a_uint64">
  /// </param>
  /// <param name="a_float32">
  /// </param>
  /// <param name="a_float64">
  /// </param>
  /// <param name="a_string">
  /// </param>
  /// <param name="a_guid">
  /// </param>
  public BasicArrays([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool[] a_bool, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Immutable.ImmutableArray<byte> a_byte, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] short[] a_int16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ushort[] a_uint16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int[] a_int32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint[] a_uint32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] long[] a_int64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong[] a_uint64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] float[] a_float32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double[] a_float64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string[] a_string, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid[] a_guid) => (ABool, AByte, AInt16, AUint16, AInt32, AUint32, AInt64, AUint64, AFloat32, AFloat64, AString, AGuid) = (a_bool, a_byte, a_int16, a_uint16, a_int32, a_uint32, a_int64, a_uint64, a_float32, a_float64, a_string, a_guid);
  public BasicArrays([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] BasicArrays original) => (ABool, AByte, AInt16, AUint16, AInt32, AUint32, AInt64, AUint64, AFloat32, AFloat64, AString, AGuid) = (original.ABool, original.AByte, original.AInt16, original.AUint16, original.AInt32, original.AUint32, original.AInt64, original.AUint64, original.AFloat32, original.AFloat64, original.AString, original.AGuid);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool[] a_bool, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Immutable.ImmutableArray<byte> a_byte, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out short[] a_int16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ushort[] a_uint16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int[] a_int32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint[] a_uint32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out long[] a_int64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong[] a_uint64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out float[] a_float32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double[] a_float64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string[] a_string, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid[] a_guid) => (a_bool, a_byte, a_int16, a_uint16, a_int32, a_uint32, a_int64, a_uint64, a_float32, a_float64, a_string, a_guid) = (ABool, AByte, AInt16, AUint16, AInt32, AUint32, AInt64, AUint64, AFloat32, AFloat64, AString, AGuid);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + ABool.Length * 1;
    byteCount += sizeof(uint) + AByte.Length * 1;
    byteCount += sizeof(uint) + AInt16.Length * 2;
    byteCount += sizeof(uint) + AUint16.Length * 2;
    byteCount += sizeof(uint) + AInt32.Length * 4;
    byteCount += sizeof(uint) + AUint32.Length * 4;
    byteCount += sizeof(uint) + AInt64.Length * 8;
    byteCount += sizeof(uint) + AUint64.Length * 8;
    byteCount += sizeof(uint) + AFloat32.Length * 4;
    byteCount += sizeof(uint) + AFloat64.Length * 8;
    {
      var length0 = unchecked((uint)AString.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(AString[i0].Length);
      }
    }
    byteCount += sizeof(uint) + AGuid.Length * 16;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + ABool.Length * 1;
    byteCount += sizeof(uint) + AByte.Length * 1;
    byteCount += sizeof(uint) + AInt16.Length * 2;
    byteCount += sizeof(uint) + AUint16.Length * 2;
    byteCount += sizeof(uint) + AInt32.Length * 4;
    byteCount += sizeof(uint) + AUint32.Length * 4;
    byteCount += sizeof(uint) + AInt64.Length * 8;
    byteCount += sizeof(uint) + AUint64.Length * 8;
    byteCount += sizeof(uint) + AFloat32.Length * 4;
    byteCount += sizeof(uint) + AFloat64.Length * 8;
    {
      var length0 = unchecked((uint)AString.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(AString[i0]);
      }
    }
    byteCount += sizeof(uint) + AGuid.Length * 16;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(BasicArrays record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(BasicArrays record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicArrays Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicArrays Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicArrays Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicArrays Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicArrays Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(BasicArrays record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.ABool.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteByte(record.ABool[i0]);
      }
    }
    writer.WriteBytes(record.AByte);
    {
      var length0 = unchecked((uint)record.AInt16.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt16(record.AInt16[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.AUint16.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt16(record.AUint16[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.AInt32.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt32(record.AInt32[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.AUint32.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt32(record.AUint32[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.AInt64.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt64(record.AInt64[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.AUint64.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt64(record.AUint64[i0]);
      }
    }
    writer.WriteFloat32S(record.AFloat32);
    writer.WriteFloat64S(record.AFloat64);
    {
      var length0 = unchecked((uint)record.AString.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteString(record.AString[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.AGuid.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteGuid(record.AGuid[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static BasicArrays __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    bool[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new bool[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        bool x0;
        x0 = reader.ReadByte() != 0;
        field0[i0] = x0;
      }
    }
    global::System.Collections.Immutable.ImmutableArray<byte> field1;
    field1 = reader.ReadBytes();
    short[] field2;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field2 = new short[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        short x0;
        x0 = reader.ReadInt16();
        field2[i0] = x0;
      }
    }
    ushort[] field3;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field3 = new ushort[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        ushort x0;
        x0 = reader.ReadUInt16();
        field3[i0] = x0;
      }
    }
    int[] field4;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field4 = new int[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        int x0;
        x0 = reader.ReadInt32();
        field4[i0] = x0;
      }
    }
    uint[] field5;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field5 = new uint[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        uint x0;
        x0 = reader.ReadUInt32();
        field5[i0] = x0;
      }
    }
    long[] field6;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field6 = new long[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        long x0;
        x0 = reader.ReadInt64();
        field6[i0] = x0;
      }
    }
    ulong[] field7;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field7 = new ulong[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        ulong x0;
        x0 = reader.ReadUInt64();
        field7[i0] = x0;
      }
    }
    float[] field8;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field8 = new float[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        float x0;
        x0 = reader.ReadFloat32();
        field8[i0] = x0;
      }
    }
    double[] field9;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field9 = new double[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        double x0;
        x0 = reader.ReadFloat64();
        field9[i0] = x0;
      }
    }
    string[] field10;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field10 = new string[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        string x0;
        x0 = reader.ReadString();
        field10[i0] = x0;
      }
    }
    global::System.Guid[] field11;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field11 = new global::System.Guid[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        global::System.Guid x0;
        x0 = reader.ReadGuid();
        field11[i0] = x0;
      }
    }
    return new BasicArrays {
      ABool = field0,
      AByte = field1,
      AInt16 = field2,
      AUint16 = field3,
      AInt32 = field4,
      AUint32 = field5,
      AInt64 = field6,
      AUint64 = field7,
      AFloat32 = field8,
      AFloat64 = field9,
      AString = field10,
      AGuid = field11,
    };
  }

  #endregion
  #region Equality
  public bool Equals(BasicArrays other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (ABool is null ? other.ABool is null : other.ABool is not null && global::System.Linq.Enumerable.SequenceEqual(ABool, other.ABool)) && (AByte == null ? other.AByte == null : other.AByte != null && global::System.Linq.Enumerable.SequenceEqual(AByte, other.AByte)) && (AInt16 is null ? other.AInt16 is null : other.AInt16 is not null && global::System.Linq.Enumerable.SequenceEqual(AInt16, other.AInt16)) && (AUint16 is null ? other.AUint16 is null : other.AUint16 is not null && global::System.Linq.Enumerable.SequenceEqual(AUint16, other.AUint16)) && (AInt32 is null ? other.AInt32 is null : other.AInt32 is not null && global::System.Linq.Enumerable.SequenceEqual(AInt32, other.AInt32)) && (AUint32 is null ? other.AUint32 is null : other.AUint32 is not null && global::System.Linq.Enumerable.SequenceEqual(AUint32, other.AUint32)) && (AInt64 is null ? other.AInt64 is null : other.AInt64 is not null && global::System.Linq.Enumerable.SequenceEqual(AInt64, other.AInt64)) && (AUint64 is null ? other.AUint64 is null : other.AUint64 is not null && global::System.Linq.Enumerable.SequenceEqual(AUint64, other.AUint64)) && (AFloat32 is null ? other.AFloat32 is null : other.AFloat32 is not null && global::System.Linq.Enumerable.SequenceEqual(AFloat32, other.AFloat32)) && (AFloat64 is null ? other.AFloat64 is null : other.AFloat64 is not null && global::System.Linq.Enumerable.SequenceEqual(AFloat64, other.AFloat64)) && (AString is null ? other.AString is null : other.AString is not null && global::System.Linq.Enumerable.SequenceEqual(AString, other.AString)) && (AGuid is null ? other.AGuid is null : other.AGuid is not null && global::System.Linq.Enumerable.SequenceEqual(AGuid, other.AGuid));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not BasicArrays baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= ABool.GetHashCode();
    hash ^= AByte.GetHashCode();
    hash ^= AInt16.GetHashCode();
    hash ^= AUint16.GetHashCode();
    hash ^= AInt32.GetHashCode();
    hash ^= AUint32.GetHashCode();
    hash ^= AInt64.GetHashCode();
    hash ^= AUint64.GetHashCode();
    hash ^= AFloat32.GetHashCode();
    hash ^= AFloat64.GetHashCode();
    hash ^= AString.GetHashCode();
    hash ^= AGuid.GetHashCode();
    return hash;
  }

  public static bool operator ==(BasicArrays left, BasicArrays right) => Equals(left, right);
  public static bool operator !=(BasicArrays left, BasicArrays  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class TestInt32Array : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<TestInt32Array> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int[] A { get; set; }

  /// <summary>
  /// </summary>
  public TestInt32Array() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public TestInt32Array([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int[] a) => (A) = (a);
  public TestInt32Array([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] TestInt32Array original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(TestInt32Array record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(TestInt32Array record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TestInt32Array Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TestInt32Array Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TestInt32Array Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TestInt32Array Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TestInt32Array Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(TestInt32Array record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.A.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt32(record.A[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static TestInt32Array __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new int[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        int x0;
        x0 = reader.ReadInt32();
        field0[i0] = x0;
      }
    }
    return new TestInt32Array {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(TestInt32Array other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not TestInt32Array baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(TestInt32Array left, TestInt32Array right) => Equals(left, right);
  public static bool operator !=(TestInt32Array left, TestInt32Array  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class BasicTypes : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<BasicTypes> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool ABool { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public byte AByte { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public short AInt16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ushort AUint16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int AInt32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint AUint32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public long AInt64 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong AUint64 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public float AFloat32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double AFloat64 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string AString { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid AGuid { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.DateTime ADate { get; set; }

  /// <summary>
  /// </summary>
  public BasicTypes() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a_bool">
  /// </param>
  /// <param name="a_byte">
  /// </param>
  /// <param name="a_int16">
  /// </param>
  /// <param name="a_uint16">
  /// </param>
  /// <param name="a_int32">
  /// </param>
  /// <param name="a_uint32">
  /// </param>
  /// <param name="a_int64">
  /// </param>
  /// <param name="a_uint64">
  /// </param>
  /// <param name="a_float32">
  /// </param>
  /// <param name="a_float64">
  /// </param>
  /// <param name="a_string">
  /// </param>
  /// <param name="a_guid">
  /// </param>
  /// <param name="a_date">
  /// </param>
  public BasicTypes([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool a_bool, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] byte a_byte, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] short a_int16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ushort a_uint16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int a_int32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint a_uint32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] long a_int64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong a_uint64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] float a_float32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double a_float64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string a_string, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid a_guid, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.DateTime a_date) => (ABool, AByte, AInt16, AUint16, AInt32, AUint32, AInt64, AUint64, AFloat32, AFloat64, AString, AGuid, ADate) = (a_bool, a_byte, a_int16, a_uint16, a_int32, a_uint32, a_int64, a_uint64, a_float32, a_float64, a_string, a_guid, a_date);
  public BasicTypes([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] BasicTypes original) => (ABool, AByte, AInt16, AUint16, AInt32, AUint32, AInt64, AUint64, AFloat32, AFloat64, AString, AGuid, ADate) = (original.ABool, original.AByte, original.AInt16, original.AUint16, original.AInt32, original.AUint32, original.AInt64, original.AUint64, original.AFloat32, original.AFloat64, original.AString, original.AGuid, original.ADate);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool a_bool, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out byte a_byte, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out short a_int16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ushort a_uint16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int a_int32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint a_uint32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out long a_int64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong a_uint64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out float a_float32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double a_float64, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string a_string, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid a_guid, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.DateTime a_date) => (a_bool, a_byte, a_int16, a_uint16, a_int32, a_uint32, a_int64, a_uint64, a_float32, a_float64, a_string, a_guid, a_date) = (ABool, AByte, AInt16, AUint16, AInt32, AUint32, AInt64, AUint64, AFloat32, AFloat64, AString, AGuid, ADate);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(bool);
    byteCount += sizeof(byte);
    byteCount += sizeof(short);
    byteCount += sizeof(ushort);
    byteCount += sizeof(int);
    byteCount += sizeof(uint);
    byteCount += sizeof(long);
    byteCount += sizeof(ulong);
    byteCount += sizeof(float);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(AString.Length);
    byteCount += 16;
    byteCount += 8;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(bool);
    byteCount += sizeof(byte);
    byteCount += sizeof(short);
    byteCount += sizeof(ushort);
    byteCount += sizeof(int);
    byteCount += sizeof(uint);
    byteCount += sizeof(long);
    byteCount += sizeof(ulong);
    byteCount += sizeof(float);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(AString);
    byteCount += 16;
    byteCount += 8;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(BasicTypes record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(BasicTypes record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicTypes Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicTypes Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicTypes Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicTypes Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static BasicTypes Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(BasicTypes record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteByte(record.ABool);
    writer.WriteByte(record.AByte);
    writer.WriteInt16(record.AInt16);
    writer.WriteUInt16(record.AUint16);
    writer.WriteInt32(record.AInt32);
    writer.WriteUInt32(record.AUint32);
    writer.WriteInt64(record.AInt64);
    writer.WriteUInt64(record.AUint64);
    writer.WriteFloat32(record.AFloat32);
    writer.WriteFloat64(record.AFloat64);
    writer.WriteString(record.AString);
    writer.WriteGuid(record.AGuid);
    writer.WriteDate(record.ADate);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static BasicTypes __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    bool field0;
    field0 = reader.ReadByte() != 0;
    byte field1;
    field1 = reader.ReadByte();
    short field2;
    field2 = reader.ReadInt16();
    ushort field3;
    field3 = reader.ReadUInt16();
    int field4;
    field4 = reader.ReadInt32();
    uint field5;
    field5 = reader.ReadUInt32();
    long field6;
    field6 = reader.ReadInt64();
    ulong field7;
    field7 = reader.ReadUInt64();
    float field8;
    field8 = reader.ReadFloat32();
    double field9;
    field9 = reader.ReadFloat64();
    string field10;
    field10 = reader.ReadString();
    global::System.Guid field11;
    field11 = reader.ReadGuid();
    global::System.DateTime field12;
    field12 = reader.ReadDate();
    return new BasicTypes {
      ABool = field0,
      AByte = field1,
      AInt16 = field2,
      AUint16 = field3,
      AInt32 = field4,
      AUint32 = field5,
      AInt64 = field6,
      AUint64 = field7,
      AFloat32 = field8,
      AFloat64 = field9,
      AString = field10,
      AGuid = field11,
      ADate = field12,
    };
  }

  #endregion
  #region Equality
  public bool Equals(BasicTypes other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return ABool == other.ABool && AByte == other.AByte && AInt16 == other.AInt16 && AUint16 == other.AUint16 && AInt32 == other.AInt32 && AUint32 == other.AUint32 && AInt64 == other.AInt64 && AUint64 == other.AUint64 && AFloat32 == other.AFloat32 && AFloat64 == other.AFloat64 && AString == other.AString && AGuid == other.AGuid && ADate == other.ADate;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not BasicTypes baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= ABool.GetHashCode();
    hash ^= AByte.GetHashCode();
    hash ^= AInt16.GetHashCode();
    hash ^= AUint16.GetHashCode();
    hash ^= AInt32.GetHashCode();
    hash ^= AUint32.GetHashCode();
    hash ^= AInt64.GetHashCode();
    hash ^= AUint64.GetHashCode();
    hash ^= AFloat32.GetHashCode();
    hash ^= AFloat64.GetHashCode();
    hash ^= AString.GetHashCode();
    hash ^= AGuid.GetHashCode();
    hash ^= ADate.GetHashCode();
    return hash;
  }

  public static bool operator ==(BasicTypes left, BasicTypes right) => Equals(left, right);
  public static bool operator !=(BasicTypes left, BasicTypes  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Enum)]
public enum DepE : uint {
  [System.Obsolete("X in DepE")]
  X = 1
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class DepM : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<DepM> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [System.Obsolete("x in DepM")]
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? X { get; set; }

  /// <summary>
  /// </summary>
  public DepM() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public DepM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? x) => (X) = (x);
  public DepM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] DepM? original) => (X) = (original?.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(DepM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(DepM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DepM Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DepM Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DepM Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DepM Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DepM Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(DepM record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static DepM __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new DepM();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.X = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(DepM other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not DepM baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X is not null) hash ^= X.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(DepM left, DepM right) => Equals(left, right);
  public static bool operator !=(DepM left, DepM  right) => !Equals(left, right);
  #endregion

}

/// <summary>
/// <para>Documented enum</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Enum)]
public enum DocE : uint {
        /// <summary>
        /// <para>Documented constant</para>
        /// </summary>
  X = 1,
  [System.Obsolete("Y in DocE")]
  Y = 2,
        /// <summary>
        /// <para>Deprecated, documented constant</para>
        /// </summary>
  [System.Obsolete("Z in DocE")]
  Z = 3
}

/// <summary>
/// <para>Documented message</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class DocM : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<DocM> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  /// <summary>
  /// <para>Documented field</para>
  /// </summary>
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? X { get; set; }
  [System.Obsolete("y in DocM")]
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? Y { get; set; }
  /// <summary>
  /// <para>Deprecated, documented field</para>
  /// </summary>
  [System.Obsolete("z in DocM")]
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? Z { get; set; }

  /// <summary>
  /// <para>Documented message</para>
  /// </summary>
  public DocM() : base() { }
  /// <summary>
  /// <para>Documented message</para>
  /// </summary>
  /// <param name="x">
  /// <para>Documented field</para>
  /// </param>
  /// <param name="y">
  /// </param>
  /// <param name="z">
  /// <para>Deprecated, documented field</para>
  /// </param>
  public DocM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? x, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? y, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? z) => (X, Y, Z) = (x, y, z);
  public DocM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] DocM? original) => (X, Y, Z) = (original?.X, original?.Y, original?.Z);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? x, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? y, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? z) => (x, y, z) = (X, Y, Z);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Y is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Z is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Y is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Z is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(DocM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(DocM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocM Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocM Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocM Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocM Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocM Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(DocM record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.X is not null) {
      writer.WriteByte(1);
      writer.WriteInt32(record.X.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static DocM __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new DocM();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.X = reader.ReadInt32();
          break;
        case 2:
          record.Y = reader.ReadInt32();
          break;
        case 3:
          record.Z = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(DocM other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X && Y == other.Y && Z == other.Z;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not DocM baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X is not null) hash ^= X.Value.GetHashCode();
    if (Y is not null) hash ^= Y.Value.GetHashCode();
    if (Z is not null) hash ^= Z.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(DocM left, DocM right) => Equals(left, right);
  public static bool operator !=(DocM left, DocM  right) => !Equals(left, right);
  #endregion

}

/// <summary>
/// <para>Documented struct</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class DocS : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<DocS> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  /// <summary>
  /// <para>Documented field</para>
  /// </summary>
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int X { get; set; }

  /// <summary>
  /// <para>Documented struct</para>
  /// </summary>
  public DocS() : base() { }
  /// <summary>
  /// <para>Documented struct</para>
  /// </summary>
  /// <param name="x">
  /// <para>Documented field</para>
  /// </param>
  public DocS([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int x) => (X) = (x);
  public DocS([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] DocS original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(DocS record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(DocS record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocS Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocS Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocS Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocS Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static DocS Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(DocS record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.X);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static DocS __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    return new DocS {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(DocS other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not DocS baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(DocS left, DocS right) => Equals(left, right);
  public static bool operator !=(DocS left, DocS  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Band : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Band> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Musician[] Members { get; set; }

  /// <summary>
  /// </summary>
  public Band() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="members">
  /// </param>
  public Band([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Musician[] members) => (Members) = (members);
  public Band([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Band original) => (Members) = (original.Members);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Musician[] members) => (members) = (Members);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    {
      var length0 = unchecked((uint)Members.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += Members[i0].MaxByteCount;
      }
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    {
      var length0 = unchecked((uint)Members.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += Members[i0].ByteCount;
      }
    }
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Band record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Band record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Band Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Band Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Band Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Band Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Band Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Band record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.Members.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        Musician.__EncodeInto(record.Members[i0], ref writer);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Band __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Musician[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new Musician[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        Musician x0;
        x0 = Musician.__DecodeFrom(ref reader);
        field0[i0] = x0;
      }
    }
    return new Band {
      Members = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Band other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (Members is null ? other.Members is null : other.Members is not null && global::System.Linq.Enumerable.SequenceEqual(Members, other.Members));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Band baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Members.GetHashCode();
    return hash;
  }

  public static bool operator ==(Band left, Band right) => Equals(left, right);
  public static bool operator !=(Band left, Band  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Something : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Something> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public DocE Imported { get; set; }

  /// <summary>
  /// </summary>
  public Something() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="imported">
  /// </param>
  public Something([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] DocE imported) => (Imported) = (imported);
  public Something([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Something original) => (Imported) = (original.Imported);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out DocE imported) => (imported) = (Imported);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Something record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Something record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Something Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Something Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Something Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Something Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Something Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Something record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteEnum<DocE>(record.Imported);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Something __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    DocE field0;
    field0 = reader.ReadEnum<DocE>();
    return new Something {
      Imported = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Something other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Imported == other.Imported;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Something baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Imported.GetHashCode();
    return hash;
  }

  public static bool operator ==(Something left, Something right) => Equals(left, right);
  public static bool operator !=(Something left, Something  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Enum)]
public enum Instrument : uint {
  Sax = 0,
  Trumpet = 1,
  Clarinet = 2
}

/// <summary>
/// <para>test</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct, true)]
public partial class Musician : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Musician> {
  public const uint OpCode = 0x5A5A414A;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  /// <summary>
  /// <para>a name</para>
  /// </summary>
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Name { get; init; }
  /// <summary>
  /// <para>an instrument</para>
  /// </summary>
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Instrument Plays { get; init; }

  /// <summary>
  /// <para>test</para>
  /// </summary>
  public Musician() : base() { }
  /// <summary>
  /// <para>test</para>
  /// </summary>
  /// <param name="name">
  /// <para>a name</para>
  /// </param>
  /// <param name="plays">
  /// <para>an instrument</para>
  /// </param>
  public Musician([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string name, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Instrument plays) => (Name, Plays) = (name, plays);
  public Musician([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Musician original) => (Name, Plays) = (original.Name, original.Plays);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string name, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Instrument plays) => (name, plays) = (Name, Plays);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Name.Length);
    byteCount += sizeof(uint);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Name);
    byteCount += sizeof(uint);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Musician record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Musician record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Musician Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Musician Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Musician Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Musician Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Musician Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Musician record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteString(record.Name);
    writer.WriteEnum<Instrument>(record.Plays);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Musician __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    string field0;
    field0 = reader.ReadString();
    Instrument field1;
    field1 = reader.ReadEnum<Instrument>();
    return new Musician {
      Name = field0,
      Plays = field1,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Musician other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Name == other.Name && Plays == other.Plays;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Musician baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Name.GetHashCode();
    hash ^= Plays.GetHashCode();
    return hash;
  }

  public static bool operator ==(Musician left, Musician right) => Equals(left, right);
  public static bool operator !=(Musician left, Musician  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class Song : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Song> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public string? Title { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public ushort? Year { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public Musician[]? Performers { get; set; }

  /// <summary>
  /// </summary>
  public Song() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="title">
  /// </param>
  /// <param name="year">
  /// </param>
  /// <param name="performers">
  /// </param>
  public Song([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? title, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] ushort? year, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] Musician[]? performers) => (Title, Year, Performers) = (title, year, performers);
  public Song([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] Song? original) => (Title, Year, Performers) = (original?.Title, original?.Year, original?.Performers);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? title, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out ushort? year, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out Musician[]? performers) => (title, year, performers) = (Title, Year, Performers);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (Title is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Title.Length);
    }
    if (Year is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(ushort);
    }
    if (Performers is not null) {
      byteCount += sizeof(byte);
      {
        var length0 = unchecked((uint)Performers.Length);
        byteCount += sizeof(uint);
        for (var i0 = 0; i0 < length0; i0++) {
          byteCount += Performers[i0].MaxByteCount;
        }
      }
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (Title is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Title);
    }
    if (Year is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(ushort);
    }
    if (Performers is not null) {
      byteCount += sizeof(byte);
      {
        var length0 = unchecked((uint)Performers.Length);
        byteCount += sizeof(uint);
        for (var i0 = 0; i0 < length0; i0++) {
          byteCount += Performers[i0].ByteCount;
        }
      }
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Song record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Song record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Song Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Song Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Song Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Song Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Song Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Song record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.Title is not null) {
      writer.WriteByte(1);
      writer.WriteString(record.Title);
    }

    if (record.Year is not null) {
      writer.WriteByte(2);
      writer.WriteUInt16(record.Year.Value);
    }

    if (record.Performers is not null) {
      writer.WriteByte(3);
      {
        var length0 = unchecked((uint)record.Performers.Length);
        writer.WriteUInt32(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          Musician.__EncodeInto(record.Performers[i0], ref writer);
        }
      }
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Song __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new Song();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.Title = reader.ReadString();
          break;
        case 2:
          record.Year = reader.ReadUInt16();
          break;
        case 3:
          {
            var length0 = unchecked((int)reader.ReadUInt32());
            record.Performers = new Musician[length0];
            for (var i0 = 0; i0 < length0; i0++) {
              Musician x0;
              x0 = Musician.__DecodeFrom(ref reader);
              record.Performers[i0] = x0;
            }
          }
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(Song other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Title == other.Title && Year == other.Year && (Performers is null ? other.Performers is null : other.Performers is not null && global::System.Linq.Enumerable.SequenceEqual(Performers, other.Performers));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Song baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Title is not null) hash ^= Title.GetHashCode();
    if (Year is not null) hash ^= Year.Value.GetHashCode();
    if (Performers is not null) hash ^= Performers.GetHashCode();
    return hash;
  }

  public static bool operator ==(Song left, Song right) => Equals(left, right);
  public static bool operator !=(Song left, Song  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Library : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Library> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Generic.Dictionary<global::System.Guid, Song> Songs { get; set; }

  /// <summary>
  /// </summary>
  public Library() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="songs">
  /// </param>
  public Library([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Generic.Dictionary<global::System.Guid, Song> songs) => (Songs) = (songs);
  public Library([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Library original) => (Songs) = (original.Songs);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Generic.Dictionary<global::System.Guid, Song> songs) => (songs) = (Songs);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    foreach (var kv0 in Songs) {
      byteCount += 16;
      byteCount += kv0.Value.MaxByteCount;
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    foreach (var kv0 in Songs) {
      byteCount += 16;
      byteCount += kv0.Value.ByteCount;
    }
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Library record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Library record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Library Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Library Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Library Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Library Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Library Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Library record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteUInt32(unchecked((uint)record.Songs.Count));
    foreach (var kv0 in record.Songs) {
      writer.WriteGuid(kv0.Key);
      Song.__EncodeInto(kv0.Value, ref writer);
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Library __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    global::System.Collections.Generic.Dictionary<global::System.Guid, Song> field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new global::System.Collections.Generic.Dictionary<global::System.Guid, Song>(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        global::System.Guid k0;
        Song v0;
        k0 = reader.ReadGuid();
        v0 = Song.__DecodeFrom(ref reader);
        field0.Add(k0, v0);
      }
    }
    return new Library {
      Songs = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Library other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (Songs is null ? other.Songs is null : other.Songs is not null && global::System.Linq.Enumerable.SequenceEqual(Songs, other.Songs));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Library baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Songs.GetHashCode();
    return hash;
  }

  public static bool operator ==(Library left, Library right) => Equals(left, right);
  public static bool operator !=(Library left, Library  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Int32S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Int32S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int[] A { get; set; }

  /// <summary>
  /// </summary>
  public Int32S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public Int32S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int[] a) => (A) = (a);
  public Int32S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Int32S original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Int32S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Int32S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int32S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int32S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int32S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int32S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int32S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Int32S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.A.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt32(record.A[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Int32S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new int[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        int x0;
        x0 = reader.ReadInt32();
        field0[i0] = x0;
      }
    }
    return new Int32S {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Int32S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Int32S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(Int32S left, Int32S right) => Equals(left, right);
  public static bool operator !=(Int32S left, Int32S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Uint32S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Uint32S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint[] A { get; set; }

  /// <summary>
  /// </summary>
  public Uint32S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public Uint32S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint[] a) => (A) = (a);
  public Uint32S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Uint32S original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Uint32S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Uint32S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint32S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint32S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint32S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint32S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint32S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Uint32S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.A.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt32(record.A[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Uint32S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    uint[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new uint[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        uint x0;
        x0 = reader.ReadUInt32();
        field0[i0] = x0;
      }
    }
    return new Uint32S {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Uint32S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Uint32S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(Uint32S left, Uint32S right) => Equals(left, right);
  public static bool operator !=(Uint32S left, Uint32S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Float32S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Float32S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public float[] A { get; set; }

  /// <summary>
  /// </summary>
  public Float32S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public Float32S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] float[] a) => (A) = (a);
  public Float32S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Float32S original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out float[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 4;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Float32S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Float32S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float32S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float32S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float32S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float32S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float32S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Float32S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteFloat32S(record.A);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Float32S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    float[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new float[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        float x0;
        x0 = reader.ReadFloat32();
        field0[i0] = x0;
      }
    }
    return new Float32S {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Float32S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Float32S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(Float32S left, Float32S right) => Equals(left, right);
  public static bool operator !=(Float32S left, Float32S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Int64S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Int64S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public long[] A { get; set; }

  /// <summary>
  /// </summary>
  public Int64S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public Int64S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] long[] a) => (A) = (a);
  public Int64S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Int64S original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out long[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 8;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 8;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Int64S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Int64S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int64S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int64S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int64S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int64S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Int64S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Int64S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.A.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt64(record.A[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Int64S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    long[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new long[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        long x0;
        x0 = reader.ReadInt64();
        field0[i0] = x0;
      }
    }
    return new Int64S {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Int64S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Int64S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(Int64S left, Int64S right) => Equals(left, right);
  public static bool operator !=(Int64S left, Int64S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Uint64S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Uint64S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong[] A { get; set; }

  /// <summary>
  /// </summary>
  public Uint64S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public Uint64S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong[] a) => (A) = (a);
  public Uint64S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Uint64S original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 8;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 8;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Uint64S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Uint64S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint64S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint64S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint64S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint64S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Uint64S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Uint64S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.A.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt64(record.A[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Uint64S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    ulong[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new ulong[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        ulong x0;
        x0 = reader.ReadUInt64();
        field0[i0] = x0;
      }
    }
    return new Uint64S {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Uint64S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Uint64S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(Uint64S left, Uint64S right) => Equals(left, right);
  public static bool operator !=(Uint64S left, Uint64S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Float64S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Float64S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double[] A { get; set; }

  /// <summary>
  /// </summary>
  public Float64S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  public Float64S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double[] a) => (A) = (a);
  public Float64S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Float64S original) => (A) = (original.A);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double[] a) => (a) = (A);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 8;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + A.Length * 8;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Float64S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Float64S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float64S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float64S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float64S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float64S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Float64S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Float64S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteFloat64S(record.A);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Float64S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    double[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new double[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        double x0;
        x0 = reader.ReadFloat64();
        field0[i0] = x0;
      }
    }
    return new Float64S {
      A = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Float64S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (A is null ? other.A is null : other.A is not null && global::System.Linq.Enumerable.SequenceEqual(A, other.A));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Float64S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= A.GetHashCode();
    return hash;
  }

  public static bool operator ==(Float64S left, Float64S right) => Equals(left, right);
  public static bool operator !=(Float64S left, Float64S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Enum)]
public enum VideoCodec : uint {
  H264 = 0,
  H265 = 1
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class VideoData : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<VideoData> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double Time { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint Width { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint Height { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Immutable.ImmutableArray<byte> Fragment { get; set; }

  /// <summary>
  /// </summary>
  public VideoData() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="time">
  /// </param>
  /// <param name="width">
  /// </param>
  /// <param name="height">
  /// </param>
  /// <param name="fragment">
  /// </param>
  public VideoData([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double time, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint width, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint height, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Immutable.ImmutableArray<byte> fragment) => (Time, Width, Height, Fragment) = (time, width, height, fragment);
  public VideoData([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] VideoData original) => (Time, Width, Height, Fragment) = (original.Time, original.Width, original.Height, original.Fragment);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double time, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint width, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint height, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Immutable.ImmutableArray<byte> fragment) => (time, width, height, fragment) = (Time, Width, Height, Fragment);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(double);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint) + Fragment.Length * 1;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(double);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint) + Fragment.Length * 1;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(VideoData record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(VideoData record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static VideoData Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static VideoData Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static VideoData Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static VideoData Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static VideoData Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(VideoData record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteFloat64(record.Time);
    writer.WriteUInt32(record.Width);
    writer.WriteUInt32(record.Height);
    writer.WriteBytes(record.Fragment);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static VideoData __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    double field0;
    field0 = reader.ReadFloat64();
    uint field1;
    field1 = reader.ReadUInt32();
    uint field2;
    field2 = reader.ReadUInt32();
    global::System.Collections.Immutable.ImmutableArray<byte> field3;
    field3 = reader.ReadBytes();
    return new VideoData {
      Time = field0,
      Width = field1,
      Height = field2,
      Fragment = field3,
    };
  }

  #endregion
  #region Equality
  public bool Equals(VideoData other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Time == other.Time && Width == other.Width && Height == other.Height && (Fragment == null ? other.Fragment == null : other.Fragment != null && global::System.Linq.Enumerable.SequenceEqual(Fragment, other.Fragment));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not VideoData baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Time.GetHashCode();
    hash ^= Width.GetHashCode();
    hash ^= Height.GetHashCode();
    hash ^= Fragment.GetHashCode();
    return hash;
  }

  public static bool operator ==(VideoData left, VideoData right) => Equals(left, right);
  public static bool operator !=(VideoData left, VideoData  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class MediaMessage : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<MediaMessage> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public VideoCodec? Codec { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public VideoData? Data { get; set; }

  /// <summary>
  /// </summary>
  public MediaMessage() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="codec">
  /// </param>
  /// <param name="data">
  /// </param>
  public MediaMessage([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] VideoCodec? codec, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] VideoData? data) => (Codec, Data) = (codec, data);
  public MediaMessage([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] MediaMessage? original) => (Codec, Data) = (original?.Codec, original?.Data);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out VideoCodec? codec, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out VideoData? data) => (codec, data) = (Codec, Data);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (Codec is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint);
    }
    if (Data is not null) {
      byteCount += sizeof(byte);
      byteCount += Data.MaxByteCount;
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (Codec is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint);
    }
    if (Data is not null) {
      byteCount += sizeof(byte);
      byteCount += Data.ByteCount;
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(MediaMessage record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(MediaMessage record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MediaMessage Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MediaMessage Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MediaMessage Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MediaMessage Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MediaMessage Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(MediaMessage record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.Codec is not null) {
      writer.WriteByte(1);
      writer.WriteEnum<VideoCodec>(record.Codec.Value);
    }

    if (record.Data is not null) {
      writer.WriteByte(2);
      VideoData.__EncodeInto(record.Data, ref writer);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static MediaMessage __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new MediaMessage();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.Codec = reader.ReadEnum<VideoCodec>();
          break;
        case 2:
          record.Data = VideoData.__DecodeFrom(ref reader);
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(MediaMessage other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Codec == other.Codec && Data == other.Data;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not MediaMessage baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Codec is not null) hash ^= Codec.Value.GetHashCode();
    if (Data is not null) hash ^= Data.GetHashCode();
    return hash;
  }

  public static bool operator ==(MediaMessage left, MediaMessage right) => Equals(left, right);
  public static bool operator !=(MediaMessage left, MediaMessage  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class SkipTestOld : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<SkipTestOld> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? X { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? Y { get; set; }

  /// <summary>
  /// </summary>
  public SkipTestOld() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  /// <param name="y">
  /// </param>
  public SkipTestOld([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? x, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? y) => (X, Y) = (x, y);
  public SkipTestOld([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] SkipTestOld? original) => (X, Y) = (original?.X, original?.Y);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? x, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? y) => (x, y) = (X, Y);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Y is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Y is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(SkipTestOld record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(SkipTestOld record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOld Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOld Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOld Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOld Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOld Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(SkipTestOld record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.X is not null) {
      writer.WriteByte(1);
      writer.WriteInt32(record.X.Value);
    }

    if (record.Y is not null) {
      writer.WriteByte(2);
      writer.WriteInt32(record.Y.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static SkipTestOld __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new SkipTestOld();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.X = reader.ReadInt32();
          break;
        case 2:
          record.Y = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(SkipTestOld other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X && Y == other.Y;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not SkipTestOld baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X is not null) hash ^= X.Value.GetHashCode();
    if (Y is not null) hash ^= Y.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(SkipTestOld left, SkipTestOld right) => Equals(left, right);
  public static bool operator !=(SkipTestOld left, SkipTestOld  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class SkipTestNew : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<SkipTestNew> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? X { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? Y { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? Z { get; set; }

  /// <summary>
  /// </summary>
  public SkipTestNew() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  /// <param name="y">
  /// </param>
  /// <param name="z">
  /// </param>
  public SkipTestNew([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? x, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? y, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? z) => (X, Y, Z) = (x, y, z);
  public SkipTestNew([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] SkipTestNew? original) => (X, Y, Z) = (original?.X, original?.Y, original?.Z);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? x, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? y, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? z) => (x, y, z) = (X, Y, Z);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Y is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Z is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Y is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    if (Z is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(SkipTestNew record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(SkipTestNew record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNew Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNew Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNew Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNew Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNew Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(SkipTestNew record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.X is not null) {
      writer.WriteByte(1);
      writer.WriteInt32(record.X.Value);
    }

    if (record.Y is not null) {
      writer.WriteByte(2);
      writer.WriteInt32(record.Y.Value);
    }

    if (record.Z is not null) {
      writer.WriteByte(3);
      writer.WriteInt32(record.Z.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static SkipTestNew __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new SkipTestNew();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.X = reader.ReadInt32();
          break;
        case 2:
          record.Y = reader.ReadInt32();
          break;
        case 3:
          record.Z = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(SkipTestNew other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X && Y == other.Y && Z == other.Z;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not SkipTestNew baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X is not null) hash ^= X.Value.GetHashCode();
    if (Y is not null) hash ^= Y.Value.GetHashCode();
    if (Z is not null) hash ^= Z.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(SkipTestNew left, SkipTestNew right) => Equals(left, right);
  public static bool operator !=(SkipTestNew left, SkipTestNew  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class SkipTestOldContainer : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<SkipTestOldContainer> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public SkipTestOld? S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? After { get; set; }

  /// <summary>
  /// </summary>
  public SkipTestOldContainer() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="s">
  /// </param>
  /// <param name="after">
  /// </param>
  public SkipTestOldContainer([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] SkipTestOld? s, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? after) => (S, After) = (s, after);
  public SkipTestOldContainer([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] SkipTestOldContainer? original) => (S, After) = (original?.S, original?.After);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out SkipTestOld? s, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? after) => (s, after) = (S, After);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (S is not null) {
      byteCount += sizeof(byte);
      byteCount += S.MaxByteCount;
    }
    if (After is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (S is not null) {
      byteCount += sizeof(byte);
      byteCount += S.ByteCount;
    }
    if (After is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(SkipTestOldContainer record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(SkipTestOldContainer record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOldContainer Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOldContainer Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOldContainer Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOldContainer Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestOldContainer Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(SkipTestOldContainer record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.S is not null) {
      writer.WriteByte(1);
      SkipTestOld.__EncodeInto(record.S, ref writer);
    }

    if (record.After is not null) {
      writer.WriteByte(2);
      writer.WriteInt32(record.After.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static SkipTestOldContainer __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new SkipTestOldContainer();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.S = SkipTestOld.__DecodeFrom(ref reader);
          break;
        case 2:
          record.After = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(SkipTestOldContainer other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return S == other.S && After == other.After;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not SkipTestOldContainer baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (S is not null) hash ^= S.GetHashCode();
    if (After is not null) hash ^= After.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(SkipTestOldContainer left, SkipTestOldContainer right) => Equals(left, right);
  public static bool operator !=(SkipTestOldContainer left, SkipTestOldContainer  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class SkipTestNewContainer : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<SkipTestNewContainer> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public SkipTestNew? S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? After { get; set; }

  /// <summary>
  /// </summary>
  public SkipTestNewContainer() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="s">
  /// </param>
  /// <param name="after">
  /// </param>
  public SkipTestNewContainer([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] SkipTestNew? s, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? after) => (S, After) = (s, after);
  public SkipTestNewContainer([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] SkipTestNewContainer? original) => (S, After) = (original?.S, original?.After);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out SkipTestNew? s, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? after) => (s, after) = (S, After);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (S is not null) {
      byteCount += sizeof(byte);
      byteCount += S.MaxByteCount;
    }
    if (After is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (S is not null) {
      byteCount += sizeof(byte);
      byteCount += S.ByteCount;
    }
    if (After is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(SkipTestNewContainer record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(SkipTestNewContainer record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNewContainer Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNewContainer Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNewContainer Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNewContainer Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SkipTestNewContainer Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(SkipTestNewContainer record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.S is not null) {
      writer.WriteByte(1);
      SkipTestNew.__EncodeInto(record.S, ref writer);
    }

    if (record.After is not null) {
      writer.WriteByte(2);
      writer.WriteInt32(record.After.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static SkipTestNewContainer __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new SkipTestNewContainer();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.S = SkipTestNew.__DecodeFrom(ref reader);
          break;
        case 2:
          record.After = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(SkipTestNewContainer other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return S == other.S && After == other.After;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not SkipTestNewContainer baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (S is not null) hash ^= S.GetHashCode();
    if (After is not null) hash ^= After.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(SkipTestNewContainer left, SkipTestNewContainer right) => Equals(left, right);
  public static bool operator !=(SkipTestNewContainer left, SkipTestNewContainer  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class M : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<M> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public float? A { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public double? B { get; set; }

  /// <summary>
  /// </summary>
  public M() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="a">
  /// </param>
  /// <param name="b">
  /// </param>
  public M([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] float? a, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] double? b) => (A, B) = (a, b);
  public M([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] M? original) => (A, B) = (original?.A, original?.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out float? a, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out double? b) => (a, b) = (A, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (A is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(float);
    }
    if (B is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(double);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (A is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(float);
    }
    if (B is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(double);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(M record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(M record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static M Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static M Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static M Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static M Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static M Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(M record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.A is not null) {
      writer.WriteByte(1);
      writer.WriteFloat32(record.A.Value);
    }

    if (record.B is not null) {
      writer.WriteByte(2);
      writer.WriteFloat64(record.B.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static M __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new M();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.A = reader.ReadFloat32();
          break;
        case 2:
          record.B = reader.ReadFloat64();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(M other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return A == other.A && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not M baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (A is not null) hash ^= A.Value.GetHashCode();
    if (B is not null) hash ^= B.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(M left, M right) => Equals(left, right);
  public static bool operator !=(M left, M  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct, true)]
public partial class S : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<S> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int X { get; init; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int Y { get; init; }

  /// <summary>
  /// </summary>
  public S() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  /// <param name="y">
  /// </param>
  public S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int x, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int y) => (X, Y) = (x, y);
  public S([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] S original) => (X, Y) = (original.X, original.Y);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int x, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int y) => (x, y) = (X, Y);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(int);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(int);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(S record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static S Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static S Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static S Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static S Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static S Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(S record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.X);
    writer.WriteInt32(record.Y);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static S __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    int field1;
    field1 = reader.ReadInt32();
    return new S {
      X = field0,
      Y = field1,
    };
  }

  #endregion
  #region Equality
  public bool Equals(S other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X && Y == other.Y;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not S baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    hash ^= Y.GetHashCode();
    return hash;
  }

  public static bool operator ==(S left, S right) => Equals(left, right);
  public static bool operator !=(S left, S  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class SomeMaps : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<SomeMaps> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Generic.Dictionary<bool, bool> M1 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> M2 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]>[] M3 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Generic.Dictionary<string, float[]>[] M4 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Generic.Dictionary<global::System.Guid, M> M5 { get; set; }

  /// <summary>
  /// </summary>
  public SomeMaps() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="m1">
  /// </param>
  /// <param name="m2">
  /// </param>
  /// <param name="m3">
  /// </param>
  /// <param name="m4">
  /// </param>
  /// <param name="m5">
  /// </param>
  public SomeMaps([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Generic.Dictionary<bool, bool> m1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> m2, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]>[] m3, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Generic.Dictionary<string, float[]>[] m4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Generic.Dictionary<global::System.Guid, M> m5) => (M1, M2, M3, M4, M5) = (m1, m2, m3, m4, m5);
  public SomeMaps([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] SomeMaps original) => (M1, M2, M3, M4, M5) = (original.M1, original.M2, original.M3, original.M4, original.M5);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Generic.Dictionary<bool, bool> m1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> m2, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]>[] m3, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Generic.Dictionary<string, float[]>[] m4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Generic.Dictionary<global::System.Guid, M> m5) => (m1, m2, m3, m4, m5) = (M1, M2, M3, M4, M5);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + (M1.Count * 2);
    byteCount += sizeof(uint);
    foreach (var kv0 in M2) {
      byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(kv0.Key.Length);
      byteCount += sizeof(uint);
      foreach (var kv1 in kv0.Value) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(kv1.Key.Length);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(kv1.Value.Length);
      }
    }
    {
      var length0 = unchecked((uint)M3.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint);
        foreach (var kv1 in M3[i0]) {
          byteCount += sizeof(int);
          {
            var length2 = unchecked((uint)kv1.Value.Length);
            byteCount += sizeof(uint);
            for (var i2 = 0; i2 < length2; i2++) {
              byteCount += sizeof(uint);
              foreach (var kv3 in kv1.Value[i2]) {
                byteCount += sizeof(bool);
                byteCount += kv3.Value.MaxByteCount;
              }
            }
          }
        }
      }
    }
    {
      var length0 = unchecked((uint)M4.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint);
        foreach (var kv1 in M4[i0]) {
          byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(kv1.Key.Length);
          byteCount += sizeof(uint) + kv1.Value.Length * 4;
        }
      }
    }
    byteCount += sizeof(uint);
    foreach (var kv0 in M5) {
      byteCount += 16;
      byteCount += kv0.Value.MaxByteCount;
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + (M1.Count * 2);
    byteCount += sizeof(uint);
    foreach (var kv0 in M2) {
      byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(kv0.Key);
      byteCount += sizeof(uint);
      foreach (var kv1 in kv0.Value) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(kv1.Key);
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(kv1.Value);
      }
    }
    {
      var length0 = unchecked((uint)M3.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint);
        foreach (var kv1 in M3[i0]) {
          byteCount += sizeof(int);
          {
            var length2 = unchecked((uint)kv1.Value.Length);
            byteCount += sizeof(uint);
            for (var i2 = 0; i2 < length2; i2++) {
              byteCount += sizeof(uint);
              foreach (var kv3 in kv1.Value[i2]) {
                byteCount += sizeof(bool);
                byteCount += kv3.Value.ByteCount;
              }
            }
          }
        }
      }
    }
    {
      var length0 = unchecked((uint)M4.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint);
        foreach (var kv1 in M4[i0]) {
          byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(kv1.Key);
          byteCount += sizeof(uint) + kv1.Value.Length * 4;
        }
      }
    }
    byteCount += sizeof(uint);
    foreach (var kv0 in M5) {
      byteCount += 16;
      byteCount += kv0.Value.ByteCount;
    }
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(SomeMaps record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(SomeMaps record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SomeMaps Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SomeMaps Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SomeMaps Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SomeMaps Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static SomeMaps Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(SomeMaps record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteUInt32(unchecked((uint)record.M1.Count));
    foreach (var kv0 in record.M1) {
      writer.WriteByte(kv0.Key);
      writer.WriteByte(kv0.Value);
    }
    writer.WriteUInt32(unchecked((uint)record.M2.Count));
    foreach (var kv0 in record.M2) {
      writer.WriteString(kv0.Key);
      writer.WriteUInt32(unchecked((uint)kv0.Value.Count));
      foreach (var kv1 in kv0.Value) {
        writer.WriteString(kv1.Key);
        writer.WriteString(kv1.Value);
      }
    }
    {
      var length0 = unchecked((uint)record.M3.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt32(unchecked((uint)record.M3[i0].Count));
        foreach (var kv1 in record.M3[i0]) {
          writer.WriteInt32(kv1.Key);
          {
            var length2 = unchecked((uint)kv1.Value.Length);
            writer.WriteUInt32(length2);
            for (var i2 = 0; i2 < length2; i2++) {
              writer.WriteUInt32(unchecked((uint)kv1.Value[i2].Count));
              foreach (var kv3 in kv1.Value[i2]) {
                writer.WriteByte(kv3.Key);
                S.__EncodeInto(kv3.Value, ref writer);
              }
            }
          }
        }
      }
    }
    {
      var length0 = unchecked((uint)record.M4.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteUInt32(unchecked((uint)record.M4[i0].Count));
        foreach (var kv1 in record.M4[i0]) {
          writer.WriteString(kv1.Key);
          writer.WriteFloat32S(kv1.Value);
        }
      }
    }
    writer.WriteUInt32(unchecked((uint)record.M5.Count));
    foreach (var kv0 in record.M5) {
      writer.WriteGuid(kv0.Key);
      M.__EncodeInto(kv0.Value, ref writer);
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static SomeMaps __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    global::System.Collections.Generic.Dictionary<bool, bool> field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new global::System.Collections.Generic.Dictionary<bool, bool>(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        bool k0;
        bool v0;
        k0 = reader.ReadByte() != 0;
        v0 = reader.ReadByte() != 0;
        field0.Add(k0, v0);
      }
    }
    global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>> field1;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field1 = new global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.Dictionary<string, string>>(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        string k0;
        global::System.Collections.Generic.Dictionary<string, string> v0;
        k0 = reader.ReadString();
        {
          var length1 = unchecked((int)reader.ReadUInt32());
          v0 = new global::System.Collections.Generic.Dictionary<string, string>(length1);
          for (var i1 = 0; i1 < length1; i1++) {
            string k1;
            string v1;
            k1 = reader.ReadString();
            v1 = reader.ReadString();
            v0.Add(k1, v1);
          }
        }
        field1.Add(k0, v0);
      }
    }
    global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]>[] field2;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field2 = new global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]>[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]> x0;
        {
          var length1 = unchecked((int)reader.ReadUInt32());
          x0 = new global::System.Collections.Generic.Dictionary<int, global::System.Collections.Generic.Dictionary<bool, S>[]>(length1);
          for (var i1 = 0; i1 < length1; i1++) {
            int k1;
            global::System.Collections.Generic.Dictionary<bool, S>[] v1;
            k1 = reader.ReadInt32();
            {
              var length2 = unchecked((int)reader.ReadUInt32());
              v1 = new global::System.Collections.Generic.Dictionary<bool, S>[length2];
              for (var i2 = 0; i2 < length2; i2++) {
                global::System.Collections.Generic.Dictionary<bool, S> x2;
                {
                  var length3 = unchecked((int)reader.ReadUInt32());
                  x2 = new global::System.Collections.Generic.Dictionary<bool, S>(length3);
                  for (var i3 = 0; i3 < length3; i3++) {
                    bool k3;
                    S v3;
                    k3 = reader.ReadByte() != 0;
                    v3 = S.__DecodeFrom(ref reader);
                    x2.Add(k3, v3);
                  }
                }
                v1[i2] = x2;
              }
            }
            x0.Add(k1, v1);
          }
        }
        field2[i0] = x0;
      }
    }
    global::System.Collections.Generic.Dictionary<string, float[]>[] field3;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field3 = new global::System.Collections.Generic.Dictionary<string, float[]>[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        global::System.Collections.Generic.Dictionary<string, float[]> x0;
        {
          var length1 = unchecked((int)reader.ReadUInt32());
          x0 = new global::System.Collections.Generic.Dictionary<string, float[]>(length1);
          for (var i1 = 0; i1 < length1; i1++) {
            string k1;
            float[] v1;
            k1 = reader.ReadString();
            {
              var length2 = unchecked((int)reader.ReadUInt32());
              v1 = new float[length2];
              for (var i2 = 0; i2 < length2; i2++) {
                float x2;
                x2 = reader.ReadFloat32();
                v1[i2] = x2;
              }
            }
            x0.Add(k1, v1);
          }
        }
        field3[i0] = x0;
      }
    }
    global::System.Collections.Generic.Dictionary<global::System.Guid, M> field4;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field4 = new global::System.Collections.Generic.Dictionary<global::System.Guid, M>(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        global::System.Guid k0;
        M v0;
        k0 = reader.ReadGuid();
        v0 = M.__DecodeFrom(ref reader);
        field4.Add(k0, v0);
      }
    }
    return new SomeMaps {
      M1 = field0,
      M2 = field1,
      M3 = field2,
      M4 = field3,
      M5 = field4,
    };
  }

  #endregion
  #region Equality
  public bool Equals(SomeMaps other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (M1 is null ? other.M1 is null : other.M1 is not null && global::System.Linq.Enumerable.SequenceEqual(M1, other.M1)) && (M2 is null ? other.M2 is null : other.M2 is not null && global::System.Linq.Enumerable.SequenceEqual(M2, other.M2)) && (M3 is null ? other.M3 is null : other.M3 is not null && global::System.Linq.Enumerable.SequenceEqual(M3, other.M3)) && (M4 is null ? other.M4 is null : other.M4 is not null && global::System.Linq.Enumerable.SequenceEqual(M4, other.M4)) && (M5 is null ? other.M5 is null : other.M5 is not null && global::System.Linq.Enumerable.SequenceEqual(M5, other.M5));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not SomeMaps baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= M1.GetHashCode();
    hash ^= M2.GetHashCode();
    hash ^= M3.GetHashCode();
    hash ^= M4.GetHashCode();
    hash ^= M5.GetHashCode();
    return hash;
  }

  public static bool operator ==(SomeMaps left, SomeMaps right) => Equals(left, right);
  public static bool operator !=(SomeMaps left, SomeMaps  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class MsgpackComparison : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<MsgpackComparison> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public byte Ant0 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public byte Ant1 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public short Ant1X { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public byte Ant8 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public short Ant8X { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public short Ant16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public short Ant16X { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int Ant32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int Ant32X { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool Arue { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool Aalse { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double Aloat { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double Aloatx { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Atring0 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Atring1 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Atring4 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Atring8 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Atring16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int[] Array0 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string[] Array1 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int[] Array8 { get; set; }

  /// <summary>
  /// </summary>
  public MsgpackComparison() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="ant0">
  /// </param>
  /// <param name="ant1">
  /// </param>
  /// <param name="ant1X">
  /// </param>
  /// <param name="ant8">
  /// </param>
  /// <param name="ant8X">
  /// </param>
  /// <param name="ant16">
  /// </param>
  /// <param name="ant16X">
  /// </param>
  /// <param name="ant32">
  /// </param>
  /// <param name="ant32X">
  /// </param>
  /// <param name="arue">
  /// </param>
  /// <param name="aalse">
  /// </param>
  /// <param name="aloat">
  /// </param>
  /// <param name="aloatx">
  /// </param>
  /// <param name="atring0">
  /// </param>
  /// <param name="atring1">
  /// </param>
  /// <param name="atring4">
  /// </param>
  /// <param name="atring8">
  /// </param>
  /// <param name="atring16">
  /// </param>
  /// <param name="array0">
  /// </param>
  /// <param name="array1">
  /// </param>
  /// <param name="array8">
  /// </param>
  public MsgpackComparison([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] byte ant0, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] byte ant1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] short ant1X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] byte ant8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] short ant8X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] short ant16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] short ant16X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int ant32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int ant32X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool arue, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool aalse, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double aloat, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double aloatx, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string atring0, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string atring1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string atring4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string atring8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string atring16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int[] array0, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string[] array1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int[] array8) => (Ant0, Ant1, Ant1X, Ant8, Ant8X, Ant16, Ant16X, Ant32, Ant32X, Arue, Aalse, Aloat, Aloatx, Atring0, Atring1, Atring4, Atring8, Atring16, Array0, Array1, Array8) = (ant0, ant1, ant1X, ant8, ant8X, ant16, ant16X, ant32, ant32X, arue, aalse, aloat, aloatx, atring0, atring1, atring4, atring8, atring16, array0, array1, array8);
  public MsgpackComparison([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] MsgpackComparison original) => (Ant0, Ant1, Ant1X, Ant8, Ant8X, Ant16, Ant16X, Ant32, Ant32X, Arue, Aalse, Aloat, Aloatx, Atring0, Atring1, Atring4, Atring8, Atring16, Array0, Array1, Array8) = (original.Ant0, original.Ant1, original.Ant1X, original.Ant8, original.Ant8X, original.Ant16, original.Ant16X, original.Ant32, original.Ant32X, original.Arue, original.Aalse, original.Aloat, original.Aloatx, original.Atring0, original.Atring1, original.Atring4, original.Atring8, original.Atring16, original.Array0, original.Array1, original.Array8);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out byte ant0, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out byte ant1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out short ant1X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out byte ant8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out short ant8X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out short ant16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out short ant16X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int ant32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int ant32X, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool arue, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool aalse, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double aloat, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double aloatx, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string atring0, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string atring1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string atring4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string atring8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string atring16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int[] array0, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string[] array1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int[] array8) => (ant0, ant1, ant1X, ant8, ant8X, ant16, ant16X, ant32, ant32X, arue, aalse, aloat, aloatx, atring0, atring1, atring4, atring8, atring16, array0, array1, array8) = (Ant0, Ant1, Ant1X, Ant8, Ant8X, Ant16, Ant16X, Ant32, Ant32X, Arue, Aalse, Aloat, Aloatx, Atring0, Atring1, Atring4, Atring8, Atring16, Array0, Array1, Array8);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(byte);
    byteCount += sizeof(byte);
    byteCount += sizeof(short);
    byteCount += sizeof(byte);
    byteCount += sizeof(short);
    byteCount += sizeof(short);
    byteCount += sizeof(short);
    byteCount += sizeof(int);
    byteCount += sizeof(int);
    byteCount += sizeof(bool);
    byteCount += sizeof(bool);
    byteCount += sizeof(double);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Atring0.Length);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Atring1.Length);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Atring4.Length);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Atring8.Length);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Atring16.Length);
    byteCount += sizeof(uint) + Array0.Length * 4;
    {
      var length0 = unchecked((uint)Array1.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Array1[i0].Length);
      }
    }
    byteCount += sizeof(uint) + Array8.Length * 4;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(byte);
    byteCount += sizeof(byte);
    byteCount += sizeof(short);
    byteCount += sizeof(byte);
    byteCount += sizeof(short);
    byteCount += sizeof(short);
    byteCount += sizeof(short);
    byteCount += sizeof(int);
    byteCount += sizeof(int);
    byteCount += sizeof(bool);
    byteCount += sizeof(bool);
    byteCount += sizeof(double);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Atring0);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Atring1);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Atring4);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Atring8);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Atring16);
    byteCount += sizeof(uint) + Array0.Length * 4;
    {
      var length0 = unchecked((uint)Array1.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Array1[i0]);
      }
    }
    byteCount += sizeof(uint) + Array8.Length * 4;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(MsgpackComparison record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(MsgpackComparison record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MsgpackComparison Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MsgpackComparison Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MsgpackComparison Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MsgpackComparison Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static MsgpackComparison Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(MsgpackComparison record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteByte(record.Ant0);
    writer.WriteByte(record.Ant1);
    writer.WriteInt16(record.Ant1X);
    writer.WriteByte(record.Ant8);
    writer.WriteInt16(record.Ant8X);
    writer.WriteInt16(record.Ant16);
    writer.WriteInt16(record.Ant16X);
    writer.WriteInt32(record.Ant32);
    writer.WriteInt32(record.Ant32X);
    writer.WriteByte(record.Arue);
    writer.WriteByte(record.Aalse);
    writer.WriteFloat64(record.Aloat);
    writer.WriteFloat64(record.Aloatx);
    writer.WriteString(record.Atring0);
    writer.WriteString(record.Atring1);
    writer.WriteString(record.Atring4);
    writer.WriteString(record.Atring8);
    writer.WriteString(record.Atring16);
    {
      var length0 = unchecked((uint)record.Array0.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt32(record.Array0[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.Array1.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteString(record.Array1[i0]);
      }
    }
    {
      var length0 = unchecked((uint)record.Array8.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        writer.WriteInt32(record.Array8[i0]);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static MsgpackComparison __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    byte field0;
    field0 = reader.ReadByte();
    byte field1;
    field1 = reader.ReadByte();
    short field2;
    field2 = reader.ReadInt16();
    byte field3;
    field3 = reader.ReadByte();
    short field4;
    field4 = reader.ReadInt16();
    short field5;
    field5 = reader.ReadInt16();
    short field6;
    field6 = reader.ReadInt16();
    int field7;
    field7 = reader.ReadInt32();
    int field8;
    field8 = reader.ReadInt32();
    bool field9;
    field9 = reader.ReadByte() != 0;
    bool field10;
    field10 = reader.ReadByte() != 0;
    double field11;
    field11 = reader.ReadFloat64();
    double field12;
    field12 = reader.ReadFloat64();
    string field13;
    field13 = reader.ReadString();
    string field14;
    field14 = reader.ReadString();
    string field15;
    field15 = reader.ReadString();
    string field16;
    field16 = reader.ReadString();
    string field17;
    field17 = reader.ReadString();
    int[] field18;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field18 = new int[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        int x0;
        x0 = reader.ReadInt32();
        field18[i0] = x0;
      }
    }
    string[] field19;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field19 = new string[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        string x0;
        x0 = reader.ReadString();
        field19[i0] = x0;
      }
    }
    int[] field20;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field20 = new int[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        int x0;
        x0 = reader.ReadInt32();
        field20[i0] = x0;
      }
    }
    return new MsgpackComparison {
      Ant0 = field0,
      Ant1 = field1,
      Ant1X = field2,
      Ant8 = field3,
      Ant8X = field4,
      Ant16 = field5,
      Ant16X = field6,
      Ant32 = field7,
      Ant32X = field8,
      Arue = field9,
      Aalse = field10,
      Aloat = field11,
      Aloatx = field12,
      Atring0 = field13,
      Atring1 = field14,
      Atring4 = field15,
      Atring8 = field16,
      Atring16 = field17,
      Array0 = field18,
      Array1 = field19,
      Array8 = field20,
    };
  }

  #endregion
  #region Equality
  public bool Equals(MsgpackComparison other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Ant0 == other.Ant0 && Ant1 == other.Ant1 && Ant1X == other.Ant1X && Ant8 == other.Ant8 && Ant8X == other.Ant8X && Ant16 == other.Ant16 && Ant16X == other.Ant16X && Ant32 == other.Ant32 && Ant32X == other.Ant32X && Arue == other.Arue && Aalse == other.Aalse && Aloat == other.Aloat && Aloatx == other.Aloatx && Atring0 == other.Atring0 && Atring1 == other.Atring1 && Atring4 == other.Atring4 && Atring8 == other.Atring8 && Atring16 == other.Atring16 && (Array0 is null ? other.Array0 is null : other.Array0 is not null && global::System.Linq.Enumerable.SequenceEqual(Array0, other.Array0)) && (Array1 is null ? other.Array1 is null : other.Array1 is not null && global::System.Linq.Enumerable.SequenceEqual(Array1, other.Array1)) && (Array8 is null ? other.Array8 is null : other.Array8 is not null && global::System.Linq.Enumerable.SequenceEqual(Array8, other.Array8));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not MsgpackComparison baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Ant0.GetHashCode();
    hash ^= Ant1.GetHashCode();
    hash ^= Ant1X.GetHashCode();
    hash ^= Ant8.GetHashCode();
    hash ^= Ant8X.GetHashCode();
    hash ^= Ant16.GetHashCode();
    hash ^= Ant16X.GetHashCode();
    hash ^= Ant32.GetHashCode();
    hash ^= Ant32X.GetHashCode();
    hash ^= Arue.GetHashCode();
    hash ^= Aalse.GetHashCode();
    hash ^= Aloat.GetHashCode();
    hash ^= Aloatx.GetHashCode();
    hash ^= Atring0.GetHashCode();
    hash ^= Atring1.GetHashCode();
    hash ^= Atring4.GetHashCode();
    hash ^= Atring8.GetHashCode();
    hash ^= Atring16.GetHashCode();
    hash ^= Array0.GetHashCode();
    hash ^= Array1.GetHashCode();
    hash ^= Array8.GetHashCode();
    return hash;
  }

  public static bool operator ==(MsgpackComparison left, MsgpackComparison right) => Equals(left, right);
  public static bool operator !=(MsgpackComparison left, MsgpackComparison  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class InnerM : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<InnerM> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public int? X { get; set; }

  /// <summary>
  /// </summary>
  public InnerM() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public InnerM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] int? x) => (X) = (x);
  public InnerM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] InnerM? original) => (X) = (original?.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out int? x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (X is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(int);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(InnerM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(InnerM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerM Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerM Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerM Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerM Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerM Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(InnerM record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.X is not null) {
      writer.WriteByte(1);
      writer.WriteInt32(record.X.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static InnerM __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new InnerM();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.X = reader.ReadInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(InnerM other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not InnerM baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X is not null) hash ^= X.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(InnerM left, InnerM right) => Equals(left, right);
  public static bool operator !=(InnerM left, InnerM  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class InnerS : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<InnerS> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool Y { get; set; }

  /// <summary>
  /// </summary>
  public InnerS() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="y">
  /// </param>
  public InnerS([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool y) => (Y) = (y);
  public InnerS([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] InnerS original) => (Y) = (original.Y);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool y) => (y) = (Y);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(InnerS record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(InnerS record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerS Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerS Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerS Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerS Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static InnerS Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(InnerS record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteByte(record.Y);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static InnerS __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    bool field0;
    field0 = reader.ReadByte() != 0;
    return new InnerS {
      Y = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(InnerS other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Y == other.Y;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not InnerS baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Y.GetHashCode();
    return hash;
  }

  public static bool operator ==(InnerS left, InnerS right) => Equals(left, right);
  public static bool operator !=(InnerS left, InnerS  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class OuterM : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<OuterM> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public InnerM? InnerM { get; set; }
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public InnerS? InnerS { get; set; }

  /// <summary>
  /// </summary>
  public OuterM() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="innerM">
  /// </param>
  /// <param name="innerS">
  /// </param>
  public OuterM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] InnerM? innerM, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] InnerS? innerS) => (InnerM, InnerS) = (innerM, innerS);
  public OuterM([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] OuterM? original) => (InnerM, InnerS) = (original?.InnerM, original?.InnerS);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out InnerM? innerM, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out InnerS? innerS) => (innerM, innerS) = (InnerM, InnerS);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (InnerM is not null) {
      byteCount += sizeof(byte);
      byteCount += InnerM.MaxByteCount;
    }
    if (InnerS is not null) {
      byteCount += sizeof(byte);
      byteCount += InnerS.MaxByteCount;
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (InnerM is not null) {
      byteCount += sizeof(byte);
      byteCount += InnerM.ByteCount;
    }
    if (InnerS is not null) {
      byteCount += sizeof(byte);
      byteCount += InnerS.ByteCount;
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(OuterM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(OuterM record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterM Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterM Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterM Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterM Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterM Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(OuterM record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.InnerM is not null) {
      writer.WriteByte(1);
      InnerM.__EncodeInto(record.InnerM, ref writer);
    }

    if (record.InnerS is not null) {
      writer.WriteByte(2);
      InnerS.__EncodeInto(record.InnerS, ref writer);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static OuterM __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new OuterM();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.InnerM = InnerM.__DecodeFrom(ref reader);
          break;
        case 2:
          record.InnerS = InnerS.__DecodeFrom(ref reader);
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(OuterM other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return InnerM == other.InnerM && InnerS == other.InnerS;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not OuterM baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (InnerM is not null) hash ^= InnerM.GetHashCode();
    if (InnerS is not null) hash ^= InnerS.GetHashCode();
    return hash;
  }

  public static bool operator ==(OuterM left, OuterM right) => Equals(left, right);
  public static bool operator !=(OuterM left, OuterM  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class OuterS : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<OuterS> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public InnerM InnerM { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public InnerS InnerS { get; set; }

  /// <summary>
  /// </summary>
  public OuterS() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="innerM">
  /// </param>
  /// <param name="innerS">
  /// </param>
  public OuterS([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] InnerM innerM, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] InnerS innerS) => (InnerM, InnerS) = (innerM, innerS);
  public OuterS([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] OuterS original) => (InnerM, InnerS) = (original.InnerM, original.InnerS);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out InnerM innerM, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out InnerS innerS) => (innerM, innerS) = (InnerM, InnerS);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += InnerM.MaxByteCount;
    byteCount += InnerS.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += InnerM.ByteCount;
    byteCount += InnerS.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(OuterS record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(OuterS record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterS Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterS Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterS Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterS Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OuterS Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(OuterS record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    InnerM.__EncodeInto(record.InnerM, ref writer);
    InnerS.__EncodeInto(record.InnerS, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static OuterS __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    InnerM field0;
    field0 = InnerM.__DecodeFrom(ref reader);
    InnerS field1;
    field1 = InnerS.__DecodeFrom(ref reader);
    return new OuterS {
      InnerM = field0,
      InnerS = field1,
    };
  }

  #endregion
  #region Equality
  public bool Equals(OuterS other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return InnerM == other.InnerM && InnerS == other.InnerS;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not OuterS baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= InnerM.GetHashCode();
    hash ^= InnerS.GetHashCode();
    return hash;
  }

  public static bool operator ==(OuterS left, OuterS right) => Equals(left, right);
  public static bool operator !=(OuterS left, OuterS  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Enum)]
public enum FurnitureFamily : uint {
  Bed = 0,
  Table = 1,
  Shoe = 2
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct, true)]
public partial class Furniture : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Furniture> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string Name { get; init; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint Price { get; init; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public FurnitureFamily Family { get; init; }

  /// <summary>
  /// </summary>
  public Furniture() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="name">
  /// </param>
  /// <param name="price">
  /// </param>
  /// <param name="family">
  /// </param>
  public Furniture([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string name, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint price, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] FurnitureFamily family) => (Name, Price, Family) = (name, price, family);
  public Furniture([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Furniture original) => (Name, Price, Family) = (original.Name, original.Price, original.Family);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string name, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint price, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out FurnitureFamily family) => (name, price, family) = (Name, Price, Family);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(Name.Length);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(Name);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Furniture record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Furniture record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Furniture Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Furniture Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Furniture Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Furniture Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Furniture Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Furniture record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteString(record.Name);
    writer.WriteUInt32(record.Price);
    writer.WriteEnum<FurnitureFamily>(record.Family);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Furniture __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    string field0;
    field0 = reader.ReadString();
    uint field1;
    field1 = reader.ReadUInt32();
    FurnitureFamily field2;
    field2 = reader.ReadEnum<FurnitureFamily>();
    return new Furniture {
      Name = field0,
      Price = field1,
      Family = field2,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Furniture other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Name == other.Name && Price == other.Price && Family == other.Family;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Furniture baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= Name.GetHashCode();
    hash ^= Price.GetHashCode();
    hash ^= Family.GetHashCode();
    return hash;
  }

  public static bool operator ==(Furniture left, Furniture right) => Equals(left, right);
  public static bool operator !=(Furniture left, Furniture  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class RequestCatalog : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<RequestCatalog> {
  #nullable enable
  public const uint OpCode = 0x41454B49;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public FurnitureFamily? Family { get; set; }
  [System.Obsolete("Nobody react to what I'm about to say...")]
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public string? SecretTunnel { get; set; }

  /// <summary>
  /// </summary>
  public RequestCatalog() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="family">
  /// </param>
  /// <param name="secretTunnel">
  /// </param>
  public RequestCatalog([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] FurnitureFamily? family, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] string? secretTunnel) => (Family, SecretTunnel) = (family, secretTunnel);
  public RequestCatalog([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] RequestCatalog? original) => (Family, SecretTunnel) = (original?.Family, original?.SecretTunnel);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out FurnitureFamily? family, [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out string? secretTunnel) => (family, secretTunnel) = (Family, SecretTunnel);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (Family is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint);
    }
    if (SecretTunnel is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(SecretTunnel.Length);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (Family is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint);
    }
    if (SecretTunnel is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(SecretTunnel);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(RequestCatalog record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(RequestCatalog record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestCatalog Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestCatalog Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestCatalog Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestCatalog Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestCatalog Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(RequestCatalog record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.Family is not null) {
      writer.WriteByte(1);
      writer.WriteEnum<FurnitureFamily>(record.Family.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static RequestCatalog __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new RequestCatalog();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.Family = reader.ReadEnum<FurnitureFamily>();
          break;
        case 2:
          record.SecretTunnel = reader.ReadString();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(RequestCatalog other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return Family == other.Family && SecretTunnel == other.SecretTunnel;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not RequestCatalog baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Family is not null) hash ^= Family.Value.GetHashCode();
    if (SecretTunnel is not null) hash ^= SecretTunnel.GetHashCode();
    return hash;
  }

  public static bool operator ==(RequestCatalog left, RequestCatalog right) => Equals(left, right);
  public static bool operator !=(RequestCatalog left, RequestCatalog  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct, true)]
public partial class RequestResponse : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<RequestResponse> {
  public const uint OpCode = 0x31323334;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Furniture[] AvailableFurniture { get; init; }

  /// <summary>
  /// </summary>
  public RequestResponse() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="availableFurniture">
  /// </param>
  public RequestResponse([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Furniture[] availableFurniture) => (AvailableFurniture) = (availableFurniture);
  public RequestResponse([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] RequestResponse original) => (AvailableFurniture) = (original.AvailableFurniture);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Furniture[] availableFurniture) => (availableFurniture) = (AvailableFurniture);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    {
      var length0 = unchecked((uint)AvailableFurniture.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += AvailableFurniture[i0].MaxByteCount;
      }
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    {
      var length0 = unchecked((uint)AvailableFurniture.Length);
      byteCount += sizeof(uint);
      for (var i0 = 0; i0 < length0; i0++) {
        byteCount += AvailableFurniture[i0].ByteCount;
      }
    }
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(RequestResponse record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(RequestResponse record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestResponse Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestResponse Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestResponse Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestResponse Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static RequestResponse Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(RequestResponse record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    {
      var length0 = unchecked((uint)record.AvailableFurniture.Length);
      writer.WriteUInt32(length0);
      for (var i0 = 0; i0 < length0; i0++) {
        Furniture.__EncodeInto(record.AvailableFurniture[i0], ref writer);
      }
    }
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static RequestResponse __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Furniture[] field0;
    {
      var length0 = unchecked((int)reader.ReadUInt32());
      field0 = new Furniture[length0];
      for (var i0 = 0; i0 < length0; i0++) {
        Furniture x0;
        x0 = Furniture.__DecodeFrom(ref reader);
        field0[i0] = x0;
      }
    }
    return new RequestResponse {
      AvailableFurniture = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(RequestResponse other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return (AvailableFurniture is null ? other.AvailableFurniture is null : other.AvailableFurniture is not null && global::System.Linq.Enumerable.SequenceEqual(AvailableFurniture, other.AvailableFurniture));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not RequestResponse baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= AvailableFurniture.GetHashCode();
    return hash;
  }

  public static bool operator ==(RequestResponse left, RequestResponse right) => Equals(left, right);
  public static bool operator !=(RequestResponse left, RequestResponse  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort7 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort7> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort6 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort7() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort7([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort6 x) => (X) = (x);
  public Toposort7([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort7 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort6 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort7 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort7 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort7 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort7 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort7 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort7 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort7 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort7 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort6.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort7 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort6 field0;
    field0 = Toposort6.__DecodeFrom(ref reader);
    return new Toposort7 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort7 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort7 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort7 left, Toposort7 right) => Equals(left, right);
  public static bool operator !=(Toposort7 left, Toposort7  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort2 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort2> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort1 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort2() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort2([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort1 x) => (X) = (x);
  public Toposort2([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort2 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort1 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort2 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort2 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort2 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort2 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort2 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort2 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort2 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort2 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort1.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort2 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort1 field0;
    field0 = Toposort1.__DecodeFrom(ref reader);
    return new Toposort2 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort2 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort2 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort2 left, Toposort2 right) => Equals(left, right);
  public static bool operator !=(Toposort2 left, Toposort2  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort9 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort9> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort8 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort9() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort9([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort8 x) => (X) = (x);
  public Toposort9([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort9 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort8 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort9 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort9 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort9 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort9 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort9 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort9 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort9 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort9 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort8.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort9 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort8 field0;
    field0 = Toposort8.__DecodeFrom(ref reader);
    return new Toposort9 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort9 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort9 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort9 left, Toposort9 right) => Equals(left, right);
  public static bool operator !=(Toposort9 left, Toposort9  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort0 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort0> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort0() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort0([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int x) => (X) = (x);
  public Toposort0([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort0 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort0 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort0 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort0 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort0 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort0 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort0 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort0 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort0 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.X);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort0 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    return new Toposort0 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort0 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort0 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort0 left, Toposort0 right) => Equals(left, right);
  public static bool operator !=(Toposort0 left, Toposort0  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort5 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort5> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort4 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort5() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort5([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort4 x) => (X) = (x);
  public Toposort5([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort5 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort4 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort5 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort5 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort5 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort5 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort5 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort5 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort5 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort5 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort4.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort5 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort4 field0;
    field0 = Toposort4.__DecodeFrom(ref reader);
    return new Toposort5 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort5 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort5 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort5 left, Toposort5 right) => Equals(left, right);
  public static bool operator !=(Toposort5 left, Toposort5  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort1 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort1> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort0 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort1() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort1([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort0 x) => (X) = (x);
  public Toposort1([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort1 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort0 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort1 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort1 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort1 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort1 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort1 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort1 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort1 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort1 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort0.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort1 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort0 field0;
    field0 = Toposort0.__DecodeFrom(ref reader);
    return new Toposort1 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort1 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort1 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort1 left, Toposort1 right) => Equals(left, right);
  public static bool operator !=(Toposort1 left, Toposort1  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort6 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort6> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort5 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort6() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort6([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort5 x) => (X) = (x);
  public Toposort6([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort6 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort5 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort6 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort6 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort6 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort6 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort6 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort6 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort6 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort6 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort5.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort6 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort5 field0;
    field0 = Toposort5.__DecodeFrom(ref reader);
    return new Toposort6 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort6 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort6 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort6 left, Toposort6 right) => Equals(left, right);
  public static bool operator !=(Toposort6 left, Toposort6  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort4 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort4> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort3 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort4() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort4([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort3 x) => (X) = (x);
  public Toposort4([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort4 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort3 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort4 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort4 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort4 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort4 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort4 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort4 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort4 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort4 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort3.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort4 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort3 field0;
    field0 = Toposort3.__DecodeFrom(ref reader);
    return new Toposort4 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort4 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort4 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort4 left, Toposort4 right) => Equals(left, right);
  public static bool operator !=(Toposort4 left, Toposort4  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort3 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort3> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort2 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort3() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort3([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort2 x) => (X) = (x);
  public Toposort3([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort3 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort2 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort3 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort3 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort3 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort3 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort3 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort3 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort3 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort3 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort2.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort3 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort2 field0;
    field0 = Toposort2.__DecodeFrom(ref reader);
    return new Toposort3 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort3 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort3 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort3 left, Toposort3 right) => Equals(left, right);
  public static bool operator !=(Toposort3 left, Toposort3  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class Toposort8 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<Toposort8> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public Toposort7 X { get; set; }

  /// <summary>
  /// </summary>
  public Toposort8() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="x">
  /// </param>
  public Toposort8([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort7 x) => (X) = (x);
  public Toposort8([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] Toposort8 original) => (X) = (original.X);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out Toposort7 x) => (x) = (X);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += X.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += X.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(Toposort8 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(Toposort8 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort8 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort8 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort8 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort8 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static Toposort8 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(Toposort8 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    Toposort7.__EncodeInto(record.X, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static Toposort8 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    Toposort7 field0;
    field0 = Toposort7.__DecodeFrom(ref reader);
    return new Toposort8 {
      X = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(Toposort8 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return X == other.X;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not Toposort8 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= X.GetHashCode();
    return hash;
  }

  public static bool operator ==(Toposort8 left, Toposort8 right) => Equals(left, right);
  public static bool operator !=(Toposort8 left, Toposort8  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Message)]
public partial class A : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A> {
  #nullable enable
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull]
  public uint? B { get; set; }

  /// <summary>
  /// </summary>
  public A() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="b">
  /// </param>
  public A([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] uint? b) => (B) = (b);
  public A([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] A? original) => (B) = (original?.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.MaybeNull, global::System.Diagnostics.CodeAnalysis.AllowNull] out uint? b) => (b) = (B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (B is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint);
    }
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += 5;
    if (B is not null) {
      byteCount += sizeof(byte);
      byteCount += sizeof(uint);
    }
    return byteCount;
  }

  #nullable disable

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    var pos = writer.ReserveRecordLength();
    var start = writer.Length;

    if (record.B is not null) {
      writer.WriteByte(1);
      writer.WriteUInt32(record.B.Value);
    }
    writer.WriteByte(0);
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var record = new A();
    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length));
    while (true) {
      switch (reader.ReadByte()) {
        case 0:
          return record;
        case 1:
          record.B = reader.ReadUInt32();
          break;
        default:
          reader.Position = end;
          return record;
      }
    }
  }

  #endregion
  #region Equality
  public bool Equals(A other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    if (B is not null) hash ^= B.Value.GetHashCode();
    return hash;
  }

  public static bool operator ==(A left, A right) => Equals(left, right);
  public static bool operator !=(A left, A  right) => !Equals(left, right);
  #endregion

}

/// <summary>
/// <para>This branch is, too!</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool C { get; set; }

  /// <summary>
  /// <para>This branch is, too!</para>
  /// </summary>
  public B() : base() { }
  /// <summary>
  /// <para>This branch is, too!</para>
  /// </summary>
  /// <param name="c">
  /// </param>
  public B([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool c) => (C) = (c);
  public B([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B original) => (C) = (original.C);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool c) => (c) = (C);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteByte(record.C);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    bool field0;
    field0 = reader.ReadByte() != 0;
    return new B {
      C = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return C == other.C;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= C.GetHashCode();
    return hash;
  }

  public static bool operator ==(B left, B right) => Equals(left, right);
  public static bool operator !=(B left, B  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class C : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<C> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();

  /// <summary>
  /// </summary>
  public C() : base() { }

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(C record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(C record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static C Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static C Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static C Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static C Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static C Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(C record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;

    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static C __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    return new C {
    };
  }

  #endregion
  #region Equality
  public bool Equals(C other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return true;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not C baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  public static bool operator ==(C left, C right) => Equals(left, right);
  public static bool operator !=(C left, C  right) => !Equals(left, right);
  #endregion

}

/// <summary>
/// <para>This union is so documented!</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public abstract class BaseU<T0, T1, T2> : global::Bebop.Runtime.BaseBebopRecord where T0: A where T1: B where T2: C {
  internal readonly T0 _value0;
  internal readonly T1 _value1;
  internal readonly T2 _value2;
  private readonly byte _discriminator;

  protected private BaseU() { }
  protected BaseU(UUnion<T0, T1, T2> input) {
      _discriminator = input.Discriminator;
      switch (_discriminator) {
        case 1: _value0 = input.AsA; break;
        case 2: _value1 = input.AsB; break;
        case 3: _value2 = input.AsC; break;
        default: throw new global::Bebop.Exceptions.BebopRuntimeException();
      }
  }

  public global::Bebop.Runtime.BaseBebopRecord Value => _discriminator switch {
      1 => _value0,
      2 => _value1,
      3 => _value2,
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  public byte Discriminator => _discriminator;

  #region IsAs
  public bool IsA => _discriminator is 1;
  public T0 AsA => _discriminator is 1 ? _value0 : throw new global::System.NotImplementedException($"Cannot return as A as result is T0");

  public bool IsB => _discriminator is 2;
  public T1 AsB => _discriminator is 2 ? _value1 : throw new global::System.NotImplementedException($"Cannot return as B as result is T1");

  public bool IsC => _discriminator is 3;
  public T2 AsC => _discriminator is 3 ? _value2 : throw new global::System.NotImplementedException($"Cannot return as C as result is T2");

  #endregion
  public void Switch(global::System.Action<T0> f0, global::System.Action<T1> f1, global::System.Action<T2> f2) {
      if (_discriminator is 1 && f0 is not null) {
        f0(_value0);
        return;
      }
      if (_discriminator is 2 && f1 is not null) {
        f1(_value1);
        return;
      }
      if (_discriminator is 3 && f2 is not null) {
        f2(_value2);
        return;
      }
      throw new global::Bebop.Exceptions.BebopRuntimeException();
  }

  public TResult Match<TResult>(global::System.Func<T0, TResult> f0, global::System.Func<T1, TResult> f1, global::System.Func<T2, TResult> f2) => _discriminator switch {
      1 when f0 is not null => f0(_value0),
      2 when f1 is not null => f1(_value1),
      3 when f2 is not null => f2(_value2),
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  #region Equality
  private bool Equals(BaseU<T0, T1, T2> other) => _discriminator == other.Discriminator && _discriminator switch {
      1 => Equals(_value0, other._value0),
      2 => Equals(_value1, other._value1),
      3 => Equals(_value2, other._value2),
      _ => false
  };

  public override bool Equals(object other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return other is BaseU<T0, T1, T2> o && Equals(o);
  }

  public static bool operator ==(BaseU<T0, T1, T2> left, BaseU<T0, T1, T2> right) => Equals(left, right);
  public static bool operator !=(BaseU<T0, T1, T2> left, BaseU<T0, T1, T2> right) => !Equals(left, right);
  public override int GetHashCode() => (_discriminator switch {
      1 => _value0?.GetHashCode() ?? 0,
      2 => _value1?.GetHashCode() ?? 0,
      3 => _value2?.GetHashCode() ?? 0,
      _ => 0
  } * 397) ^ _discriminator;

  #endregion
}

/// <inheritdoc />
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Union)]
public partial class U : BaseU<A, B, C> {

  public const uint OpCode = 0x68616579;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();

  protected private U(): base() { }
  private U(UUnion<A, B, C> _) : base(_) { }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(U record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(U record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + sizeof(byte) + Discriminator switch {
        1 => AsA.MaxByteCount,
        2 => AsB.MaxByteCount,
        3 => AsC.MaxByteCount,
        _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
    };
    return byteCount;
  }

  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + sizeof(byte) + Discriminator switch {
        1 => AsA.ByteCount,
        2 => AsB.ByteCount,
        3 => AsC.ByteCount,
        _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
    };
    return byteCount;
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static U Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static U Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static U Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static U Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static U Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Implicit Overrides
  public static implicit operator U(A _) => new (_);
  public static U FromA(A input) => new (input);

  public static implicit operator U(B _) => new (_);
  public static U FromB(B input) => new (input);

  public static implicit operator U(C _) => new (_);
  public static U FromC(C input) => new (input);

  #endregion
  #region Internal Use
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  internal static void __EncodeInto(U record, ref global::Bebop.Runtime.BebopWriter writer) {
    var pos = writer.ReserveRecordLength();
    writer.WriteByte(record.Discriminator);
    var start = writer.Length;
    switch (record.Discriminator) {
      case 1: A.__EncodeInto(record.AsA, ref writer); break;
      case 2: B.__EncodeInto(record.AsB, ref writer); break;
      case 3: C.__EncodeInto(record.AsC, ref writer); break;
    }
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  internal static U __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length + 1));
    switch (reader.ReadByte()) {
      case 1:
          return A.__DecodeFrom(ref reader);
      case 2:
          return B.__DecodeFrom(ref reader);
      case 3:
          return C.__DecodeFrom(ref reader);
      default:
          reader.Position = end;
          return null;
      }
  }

  #endregion
}

/// <inheritdoc />
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public readonly struct UUnion<T0, T1, T2> where T0: A where T1: B where T2: C {

  internal readonly T0 _value0;
  internal readonly T1 _value1;
  internal readonly T2 _value2;
  private readonly byte _discriminator;

  private UUnion(byte discriminator, T0 value0 = default, T1 value1 = default, T2 value2 = default) {
      _discriminator = discriminator;
      _value0 = value0;
      _value1 = value1;
      _value2 = value2;
  }

  public global::Bebop.Runtime.BaseBebopRecord Value => _discriminator switch {
      1 => _value0,
      2 => _value1,
      3 => _value2,
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  public byte Discriminator => _discriminator;

  #region IsAs
  public bool IsA => _discriminator is 1;
  public T0 AsA => _discriminator is 1 ? _value0 : throw new global::System.NotImplementedException($"Cannot return as A as result is T0");

  public bool IsB => _discriminator is 2;
  public T1 AsB => _discriminator is 2 ? _value1 : throw new global::System.NotImplementedException($"Cannot return as B as result is T1");

  public bool IsC => _discriminator is 3;
  public T2 AsC => _discriminator is 3 ? _value2 : throw new global::System.NotImplementedException($"Cannot return as C as result is T2");

  #endregion
  #region Implicit Overrides
  public static implicit operator UUnion<T0, T1, T2>(T0 t) => new  UUnion<T0, T1, T2>(1, value0: t);
  public static UUnion<T0, T1, T2> FromBaseA(T0 input) => input;

  public static implicit operator UUnion<T0, T1, T2>(T1 t) => new  UUnion<T0, T1, T2>(2, value1: t);
  public static UUnion<T0, T1, T2> FromBaseB(T1 input) => input;

  public static implicit operator UUnion<T0, T1, T2>(T2 t) => new  UUnion<T0, T1, T2>(3, value2: t);
  public static UUnion<T0, T1, T2> FromBaseC(T2 input) => input;

  #endregion

  public void Switch(global::System.Action<T0> f0, global::System.Action<T1> f1, global::System.Action<T2> f2) {
      if (_discriminator is 1 && f0 is not null) {
        f0(_value0);
        return;
      }
      if (_discriminator is 2 && f1 is not null) {
        f1(_value1);
        return;
      }
      if (_discriminator is 3 && f2 is not null) {
        f2(_value2);
        return;
      }
      throw new global::Bebop.Exceptions.BebopRuntimeException();
  }

  public TResult Match<TResult>(global::System.Func<T0, TResult> f0, global::System.Func<T1, TResult> f1, global::System.Func<T2, TResult> f2) => _discriminator switch {
      1 when f0 is not null => f0(_value0),
      2 when f1 is not null => f1(_value1),
      3 when f2 is not null => f2(_value2),
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  #region Equality
  private bool Equals(BaseU<T0, T1, T2> other) => _discriminator == other.Discriminator && _discriminator switch {
      1 => Equals(_value0, other._value0),
      2 => Equals(_value1, other._value1),
      3 => Equals(_value2, other._value2),
      _ => false
  };

  public override bool Equals(object other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      return other is BaseU<T0, T1, T2> o && Equals(o);
  }

  public override int GetHashCode() => (_discriminator switch {
      1 => _value0?.GetHashCode() ?? 0,
      2 => _value1?.GetHashCode() ?? 0,
      3 => _value2?.GetHashCode() ?? 0,
      _ => 0
  } * 397) ^ _discriminator;

  #endregion
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class TwoComesFirst : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<TwoComesFirst> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public byte B { get; set; }

  /// <summary>
  /// </summary>
  public TwoComesFirst() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="b">
  /// </param>
  public TwoComesFirst([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] byte b) => (B) = (b);
  public TwoComesFirst([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] TwoComesFirst original) => (B) = (original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out byte b) => (b) = (B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(byte);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(byte);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(TwoComesFirst record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(TwoComesFirst record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TwoComesFirst Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TwoComesFirst Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TwoComesFirst Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TwoComesFirst Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static TwoComesFirst Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(TwoComesFirst record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static TwoComesFirst __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    byte field0;
    field0 = reader.ReadByte();
    return new TwoComesFirst {
      B = field0,
    };
  }

  #endregion
  #region Equality
  public bool Equals(TwoComesFirst other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not TwoComesFirst baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(TwoComesFirst left, TwoComesFirst right) => Equals(left, right);
  public static bool operator !=(TwoComesFirst left, TwoComesFirst  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class ThreeIsSkipped : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<ThreeIsSkipped> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();

  /// <summary>
  /// </summary>
  public ThreeIsSkipped() : base() { }

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(ThreeIsSkipped record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(ThreeIsSkipped record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ThreeIsSkipped Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ThreeIsSkipped Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ThreeIsSkipped Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ThreeIsSkipped Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static ThreeIsSkipped Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(ThreeIsSkipped record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;

    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static ThreeIsSkipped __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    return new ThreeIsSkipped {
    };
  }

  #endregion
  #region Equality
  public bool Equals(ThreeIsSkipped other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return true;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not ThreeIsSkipped baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  public static bool operator ==(ThreeIsSkipped left, ThreeIsSkipped right) => Equals(left, right);
  public static bool operator !=(ThreeIsSkipped left, ThreeIsSkipped  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class OneComesLast : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<OneComesLast> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();

  /// <summary>
  /// </summary>
  public OneComesLast() : base() { }

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(OneComesLast record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(OneComesLast record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OneComesLast Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OneComesLast Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OneComesLast Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OneComesLast Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static OneComesLast Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(OneComesLast record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;

    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static OneComesLast __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    return new OneComesLast {
    };
  }

  #endregion
  #region Equality
  public bool Equals(OneComesLast other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return true;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not OneComesLast baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  public static bool operator ==(OneComesLast left, OneComesLast right) => Equals(left, right);
  public static bool operator !=(OneComesLast left, OneComesLast  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public abstract class BaseWeirdOrder<T1, T3, T0> : global::Bebop.Runtime.BaseBebopRecord where T1: TwoComesFirst where T3: ThreeIsSkipped where T0: OneComesLast {
  internal readonly T1 _value1;
  internal readonly T3 _value3;
  internal readonly T0 _value0;
  private readonly byte _discriminator;

  protected private BaseWeirdOrder() { }
  protected BaseWeirdOrder(WeirdOrderUnion<T1, T3, T0> input) {
      _discriminator = input.Discriminator;
      switch (_discriminator) {
        case 2: _value1 = input.AsTwoComesFirst; break;
        case 4: _value3 = input.AsThreeIsSkipped; break;
        case 1: _value0 = input.AsOneComesLast; break;
        default: throw new global::Bebop.Exceptions.BebopRuntimeException();
      }
  }

  public global::Bebop.Runtime.BaseBebopRecord Value => _discriminator switch {
      2 => _value1,
      4 => _value3,
      1 => _value0,
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  public byte Discriminator => _discriminator;

  #region IsAs
  public bool IsTwoComesFirst => _discriminator is 2;
  public T1 AsTwoComesFirst => _discriminator is 2 ? _value1 : throw new global::System.NotImplementedException($"Cannot return as TwoComesFirst as result is T1");

  public bool IsThreeIsSkipped => _discriminator is 4;
  public T3 AsThreeIsSkipped => _discriminator is 4 ? _value3 : throw new global::System.NotImplementedException($"Cannot return as ThreeIsSkipped as result is T3");

  public bool IsOneComesLast => _discriminator is 1;
  public T0 AsOneComesLast => _discriminator is 1 ? _value0 : throw new global::System.NotImplementedException($"Cannot return as OneComesLast as result is T0");

  #endregion
  public void Switch(global::System.Action<T1> f1, global::System.Action<T3> f3, global::System.Action<T0> f0) {
      if (_discriminator is 2 && f1 is not null) {
        f1(_value1);
        return;
      }
      if (_discriminator is 4 && f3 is not null) {
        f3(_value3);
        return;
      }
      if (_discriminator is 1 && f0 is not null) {
        f0(_value0);
        return;
      }
      throw new global::Bebop.Exceptions.BebopRuntimeException();
  }

  public TResult Match<TResult>(global::System.Func<T1, TResult> f1, global::System.Func<T3, TResult> f3, global::System.Func<T0, TResult> f0) => _discriminator switch {
      2 when f1 is not null => f1(_value1),
      4 when f3 is not null => f3(_value3),
      1 when f0 is not null => f0(_value0),
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  #region Equality
  private bool Equals(BaseWeirdOrder<T1, T3, T0> other) => _discriminator == other.Discriminator && _discriminator switch {
      2 => Equals(_value1, other._value1),
      4 => Equals(_value3, other._value3),
      1 => Equals(_value0, other._value0),
      _ => false
  };

  public override bool Equals(object other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return other is BaseWeirdOrder<T1, T3, T0> o && Equals(o);
  }

  public static bool operator ==(BaseWeirdOrder<T1, T3, T0> left, BaseWeirdOrder<T1, T3, T0> right) => Equals(left, right);
  public static bool operator !=(BaseWeirdOrder<T1, T3, T0> left, BaseWeirdOrder<T1, T3, T0> right) => !Equals(left, right);
  public override int GetHashCode() => (_discriminator switch {
      2 => _value1?.GetHashCode() ?? 0,
      4 => _value3?.GetHashCode() ?? 0,
      1 => _value0?.GetHashCode() ?? 0,
      _ => 0
  } * 397) ^ _discriminator;

  #endregion
}

/// <inheritdoc />
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Union)]
public partial class WeirdOrder : BaseWeirdOrder<TwoComesFirst, ThreeIsSkipped, OneComesLast> {

  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();

  protected private WeirdOrder(): base() { }
  private WeirdOrder(WeirdOrderUnion<TwoComesFirst, ThreeIsSkipped, OneComesLast> _) : base(_) { }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(WeirdOrder record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(WeirdOrder record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + sizeof(byte) + Discriminator switch {
        2 => AsTwoComesFirst.MaxByteCount,
        4 => AsThreeIsSkipped.MaxByteCount,
        1 => AsOneComesLast.MaxByteCount,
        _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
    };
    return byteCount;
  }

  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + sizeof(byte) + Discriminator switch {
        2 => AsTwoComesFirst.ByteCount,
        4 => AsThreeIsSkipped.ByteCount,
        1 => AsOneComesLast.ByteCount,
        _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
    };
    return byteCount;
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static WeirdOrder Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static WeirdOrder Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static WeirdOrder Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static WeirdOrder Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static WeirdOrder Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Implicit Overrides
  public static implicit operator WeirdOrder(TwoComesFirst _) => new (_);
  public static WeirdOrder FromTwoComesFirst(TwoComesFirst input) => new (input);

  public static implicit operator WeirdOrder(ThreeIsSkipped _) => new (_);
  public static WeirdOrder FromThreeIsSkipped(ThreeIsSkipped input) => new (input);

  public static implicit operator WeirdOrder(OneComesLast _) => new (_);
  public static WeirdOrder FromOneComesLast(OneComesLast input) => new (input);

  #endregion
  #region Internal Use
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  internal static void __EncodeInto(WeirdOrder record, ref global::Bebop.Runtime.BebopWriter writer) {
    var pos = writer.ReserveRecordLength();
    writer.WriteByte(record.Discriminator);
    var start = writer.Length;
    switch (record.Discriminator) {
      case 2: TwoComesFirst.__EncodeInto(record.AsTwoComesFirst, ref writer); break;
      case 4: ThreeIsSkipped.__EncodeInto(record.AsThreeIsSkipped, ref writer); break;
      case 1: OneComesLast.__EncodeInto(record.AsOneComesLast, ref writer); break;
    }
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  internal static WeirdOrder __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length + 1));
    switch (reader.ReadByte()) {
      case 2:
          return TwoComesFirst.__DecodeFrom(ref reader);
      case 4:
          return ThreeIsSkipped.__DecodeFrom(ref reader);
      case 1:
          return OneComesLast.__DecodeFrom(ref reader);
      default:
          reader.Position = end;
          return null;
      }
  }

  #endregion
}

/// <inheritdoc />
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public readonly struct WeirdOrderUnion<T1, T3, T0> where T1: TwoComesFirst where T3: ThreeIsSkipped where T0: OneComesLast {

  internal readonly T1 _value1;
  internal readonly T3 _value3;
  internal readonly T0 _value0;
  private readonly byte _discriminator;

  private WeirdOrderUnion(byte discriminator, T1 value1 = default, T3 value3 = default, T0 value0 = default) {
      _discriminator = discriminator;
      _value1 = value1;
      _value3 = value3;
      _value0 = value0;
  }

  public global::Bebop.Runtime.BaseBebopRecord Value => _discriminator switch {
      2 => _value1,
      4 => _value3,
      1 => _value0,
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  public byte Discriminator => _discriminator;

  #region IsAs
  public bool IsTwoComesFirst => _discriminator is 2;
  public T1 AsTwoComesFirst => _discriminator is 2 ? _value1 : throw new global::System.NotImplementedException($"Cannot return as TwoComesFirst as result is T1");

  public bool IsThreeIsSkipped => _discriminator is 4;
  public T3 AsThreeIsSkipped => _discriminator is 4 ? _value3 : throw new global::System.NotImplementedException($"Cannot return as ThreeIsSkipped as result is T3");

  public bool IsOneComesLast => _discriminator is 1;
  public T0 AsOneComesLast => _discriminator is 1 ? _value0 : throw new global::System.NotImplementedException($"Cannot return as OneComesLast as result is T0");

  #endregion
  #region Implicit Overrides
  public static implicit operator WeirdOrderUnion<T1, T3, T0>(T1 t) => new  WeirdOrderUnion<T1, T3, T0>(2, value1: t);
  public static WeirdOrderUnion<T1, T3, T0> FromBaseTwoComesFirst(T1 input) => input;

  public static implicit operator WeirdOrderUnion<T1, T3, T0>(T3 t) => new  WeirdOrderUnion<T1, T3, T0>(4, value3: t);
  public static WeirdOrderUnion<T1, T3, T0> FromBaseThreeIsSkipped(T3 input) => input;

  public static implicit operator WeirdOrderUnion<T1, T3, T0>(T0 t) => new  WeirdOrderUnion<T1, T3, T0>(1, value0: t);
  public static WeirdOrderUnion<T1, T3, T0> FromBaseOneComesLast(T0 input) => input;

  #endregion

  public void Switch(global::System.Action<T1> f1, global::System.Action<T3> f3, global::System.Action<T0> f0) {
      if (_discriminator is 2 && f1 is not null) {
        f1(_value1);
        return;
      }
      if (_discriminator is 4 && f3 is not null) {
        f3(_value3);
        return;
      }
      if (_discriminator is 1 && f0 is not null) {
        f0(_value0);
        return;
      }
      throw new global::Bebop.Exceptions.BebopRuntimeException();
  }

  public TResult Match<TResult>(global::System.Func<T1, TResult> f1, global::System.Func<T3, TResult> f3, global::System.Func<T0, TResult> f0) => _discriminator switch {
      2 when f1 is not null => f1(_value1),
      4 when f3 is not null => f3(_value3),
      1 when f0 is not null => f0(_value0),
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  #region Equality
  private bool Equals(BaseWeirdOrder<T1, T3, T0> other) => _discriminator == other.Discriminator && _discriminator switch {
      2 => Equals(_value1, other._value1),
      4 => Equals(_value3, other._value3),
      1 => Equals(_value0, other._value0),
      _ => false
  };

  public override bool Equals(object other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      return other is BaseWeirdOrder<T1, T3, T0> o && Equals(o);
  }

  public override int GetHashCode() => (_discriminator switch {
      2 => _value1?.GetHashCode() ?? 0,
      4 => _value3?.GetHashCode() ?? 0,
      1 => _value0?.GetHashCode() ?? 0,
      _ => 0
  } * 397) ^ _discriminator;

  #endregion
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A1 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A1> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I1 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A1() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i1">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A1([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I1, U, F, S, G, B) = (i1, u, f, s, g, b);
  public A1([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A1 original) => (I1, U, F, S, G, B) = (original.I1, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i1, u, f, s, g, b) = (I1, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A1 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A1 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A1 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A1 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A1 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A1 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A1 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A1 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I1);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A1 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A1 {
      I1 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A1 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I1 == other.I1 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A1 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I1.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A1 left, A1 right) => Equals(left, right);
  public static bool operator !=(A1 left, A1  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A2 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A2> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I2 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A2() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i2">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A2([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i2, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I2, U, F, S, G, B) = (i2, u, f, s, g, b);
  public A2([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A2 original) => (I2, U, F, S, G, B) = (original.I2, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i2, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i2, u, f, s, g, b) = (I2, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A2 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A2 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A2 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A2 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A2 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A2 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A2 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A2 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I2);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A2 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A2 {
      I2 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A2 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I2 == other.I2 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A2 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I2.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A2 left, A2 right) => Equals(left, right);
  public static bool operator !=(A2 left, A2  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A3 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A3> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I3 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A3() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i3">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A3([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i3, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I3, U, F, S, G, B) = (i3, u, f, s, g, b);
  public A3([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A3 original) => (I3, U, F, S, G, B) = (original.I3, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i3, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i3, u, f, s, g, b) = (I3, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A3 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A3 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A3 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A3 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A3 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A3 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A3 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A3 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I3);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A3 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A3 {
      I3 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A3 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I3 == other.I3 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A3 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I3.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A3 left, A3 right) => Equals(left, right);
  public static bool operator !=(A3 left, A3  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A4 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A4> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I4 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A4() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i4">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A4([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I4, U, F, S, G, B) = (i4, u, f, s, g, b);
  public A4([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A4 original) => (I4, U, F, S, G, B) = (original.I4, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i4, u, f, s, g, b) = (I4, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A4 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A4 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A4 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A4 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A4 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A4 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A4 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A4 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I4);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A4 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A4 {
      I4 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A4 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I4 == other.I4 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A4 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I4.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A4 left, A4 right) => Equals(left, right);
  public static bool operator !=(A4 left, A4  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A5 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A5> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I5 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A5() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i5">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A5([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i5, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I5, U, F, S, G, B) = (i5, u, f, s, g, b);
  public A5([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A5 original) => (I5, U, F, S, G, B) = (original.I5, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i5, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i5, u, f, s, g, b) = (I5, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A5 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A5 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A5 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A5 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A5 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A5 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A5 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A5 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I5);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A5 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A5 {
      I5 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A5 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I5 == other.I5 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A5 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I5.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A5 left, A5 right) => Equals(left, right);
  public static bool operator !=(A5 left, A5  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A6 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A6> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I6 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A6() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i6">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A6([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i6, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I6, U, F, S, G, B) = (i6, u, f, s, g, b);
  public A6([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A6 original) => (I6, U, F, S, G, B) = (original.I6, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i6, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i6, u, f, s, g, b) = (I6, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A6 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A6 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A6 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A6 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A6 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A6 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A6 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A6 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I6);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A6 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A6 {
      I6 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A6 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I6 == other.I6 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A6 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I6.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A6 left, A6 right) => Equals(left, right);
  public static bool operator !=(A6 left, A6  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A7 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A7> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I7 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A7() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i7">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A7([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i7, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I7, U, F, S, G, B) = (i7, u, f, s, g, b);
  public A7([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A7 original) => (I7, U, F, S, G, B) = (original.I7, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i7, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i7, u, f, s, g, b) = (I7, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A7 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A7 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A7 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A7 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A7 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A7 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A7 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A7 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I7);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A7 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A7 {
      I7 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A7 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I7 == other.I7 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A7 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I7.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A7 left, A7 right) => Equals(left, right);
  public static bool operator !=(A7 left, A7  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A8 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A8> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I8 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A8() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i8">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A8([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I8, U, F, S, G, B) = (i8, u, f, s, g, b);
  public A8([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A8 original) => (I8, U, F, S, G, B) = (original.I8, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i8, u, f, s, g, b) = (I8, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A8 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A8 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A8 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A8 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A8 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A8 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A8 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A8 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I8);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A8 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A8 {
      I8 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A8 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I8 == other.I8 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A8 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I8.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A8 left, A8 right) => Equals(left, right);
  public static bool operator !=(A8 left, A8  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A9 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A9> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I9 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A9() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i9">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A9([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i9, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I9, U, F, S, G, B) = (i9, u, f, s, g, b);
  public A9([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A9 original) => (I9, U, F, S, G, B) = (original.I9, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i9, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i9, u, f, s, g, b) = (I9, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A9 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A9 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A9 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A9 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A9 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A9 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A9 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A9 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I9);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A9 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A9 {
      I9 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A9 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I9 == other.I9 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A9 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I9.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A9 left, A9 right) => Equals(left, right);
  public static bool operator !=(A9 left, A9  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A10 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A10> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I10 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A10() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i10">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A10([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i10, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I10, U, F, S, G, B) = (i10, u, f, s, g, b);
  public A10([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A10 original) => (I10, U, F, S, G, B) = (original.I10, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i10, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i10, u, f, s, g, b) = (I10, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A10 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A10 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A10 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A10 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A10 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A10 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A10 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A10 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I10);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A10 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A10 {
      I10 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A10 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I10 == other.I10 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A10 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I10.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A10 left, A10 right) => Equals(left, right);
  public static bool operator !=(A10 left, A10  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A11 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A11> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I11 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A11() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i11">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A11([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i11, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I11, U, F, S, G, B) = (i11, u, f, s, g, b);
  public A11([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A11 original) => (I11, U, F, S, G, B) = (original.I11, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i11, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i11, u, f, s, g, b) = (I11, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A11 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A11 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A11 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A11 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A11 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A11 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A11 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A11 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I11);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A11 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A11 {
      I11 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A11 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I11 == other.I11 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A11 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I11.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A11 left, A11 right) => Equals(left, right);
  public static bool operator !=(A11 left, A11  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A12 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A12> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I12 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A12() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i12">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A12([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i12, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I12, U, F, S, G, B) = (i12, u, f, s, g, b);
  public A12([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A12 original) => (I12, U, F, S, G, B) = (original.I12, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i12, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i12, u, f, s, g, b) = (I12, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A12 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A12 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A12 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A12 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A12 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A12 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A12 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A12 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I12);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A12 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A12 {
      I12 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A12 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I12 == other.I12 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A12 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I12.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A12 left, A12 right) => Equals(left, right);
  public static bool operator !=(A12 left, A12  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A13 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A13> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I13 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A13() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i13">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A13([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i13, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I13, U, F, S, G, B) = (i13, u, f, s, g, b);
  public A13([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A13 original) => (I13, U, F, S, G, B) = (original.I13, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i13, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i13, u, f, s, g, b) = (I13, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A13 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A13 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A13 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A13 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A13 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A13 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A13 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A13 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I13);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A13 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A13 {
      I13 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A13 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I13 == other.I13 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A13 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I13.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A13 left, A13 right) => Equals(left, right);
  public static bool operator !=(A13 left, A13  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A14 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A14> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I14 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A14() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i14">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A14([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i14, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I14, U, F, S, G, B) = (i14, u, f, s, g, b);
  public A14([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A14 original) => (I14, U, F, S, G, B) = (original.I14, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i14, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i14, u, f, s, g, b) = (I14, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A14 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A14 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A14 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A14 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A14 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A14 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A14 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A14 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I14);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A14 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A14 {
      I14 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A14 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I14 == other.I14 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A14 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I14.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A14 left, A14 right) => Equals(left, right);
  public static bool operator !=(A14 left, A14  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A15 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A15> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I15 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A15() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i15">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A15([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i15, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I15, U, F, S, G, B) = (i15, u, f, s, g, b);
  public A15([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A15 original) => (I15, U, F, S, G, B) = (original.I15, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i15, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i15, u, f, s, g, b) = (I15, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A15 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A15 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A15 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A15 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A15 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A15 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A15 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A15 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I15);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A15 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A15 {
      I15 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A15 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I15 == other.I15 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A15 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I15.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A15 left, A15 right) => Equals(left, right);
  public static bool operator !=(A15 left, A15  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A16 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A16> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A16() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i16">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A16([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I16, U, F, S, G, B) = (i16, u, f, s, g, b);
  public A16([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A16 original) => (I16, U, F, S, G, B) = (original.I16, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i16, u, f, s, g, b) = (I16, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A16 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A16 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A16 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A16 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A16 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A16 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A16 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A16 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I16);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A16 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A16 {
      I16 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A16 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I16 == other.I16 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A16 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I16.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A16 left, A16 right) => Equals(left, right);
  public static bool operator !=(A16 left, A16  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A17 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A17> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I17 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A17() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i17">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A17([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i17, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I17, U, F, S, G, B) = (i17, u, f, s, g, b);
  public A17([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A17 original) => (I17, U, F, S, G, B) = (original.I17, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i17, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i17, u, f, s, g, b) = (I17, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A17 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A17 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A17 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A17 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A17 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A17 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A17 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A17 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I17);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A17 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A17 {
      I17 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A17 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I17 == other.I17 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A17 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I17.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A17 left, A17 right) => Equals(left, right);
  public static bool operator !=(A17 left, A17  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A18 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A18> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I18 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A18() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i18">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A18([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i18, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I18, U, F, S, G, B) = (i18, u, f, s, g, b);
  public A18([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A18 original) => (I18, U, F, S, G, B) = (original.I18, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i18, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i18, u, f, s, g, b) = (I18, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A18 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A18 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A18 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A18 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A18 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A18 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A18 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A18 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I18);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A18 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A18 {
      I18 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A18 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I18 == other.I18 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A18 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I18.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A18 left, A18 right) => Equals(left, right);
  public static bool operator !=(A18 left, A18  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A19 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A19> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I19 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A19() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i19">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A19([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i19, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I19, U, F, S, G, B) = (i19, u, f, s, g, b);
  public A19([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A19 original) => (I19, U, F, S, G, B) = (original.I19, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i19, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i19, u, f, s, g, b) = (I19, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A19 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A19 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A19 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A19 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A19 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A19 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A19 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A19 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I19);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A19 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A19 {
      I19 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A19 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I19 == other.I19 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A19 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I19.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A19 left, A19 right) => Equals(left, right);
  public static bool operator !=(A19 left, A19  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A20 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A20> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I20 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A20() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i20">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A20([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i20, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I20, U, F, S, G, B) = (i20, u, f, s, g, b);
  public A20([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A20 original) => (I20, U, F, S, G, B) = (original.I20, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i20, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i20, u, f, s, g, b) = (I20, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A20 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A20 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A20 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A20 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A20 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A20 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A20 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A20 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I20);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A20 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A20 {
      I20 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A20 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I20 == other.I20 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A20 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I20.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A20 left, A20 right) => Equals(left, right);
  public static bool operator !=(A20 left, A20  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A21 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A21> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I21 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A21() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i21">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A21([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i21, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I21, U, F, S, G, B) = (i21, u, f, s, g, b);
  public A21([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A21 original) => (I21, U, F, S, G, B) = (original.I21, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i21, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i21, u, f, s, g, b) = (I21, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A21 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A21 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A21 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A21 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A21 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A21 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A21 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A21 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I21);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A21 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A21 {
      I21 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A21 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I21 == other.I21 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A21 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I21.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A21 left, A21 right) => Equals(left, right);
  public static bool operator !=(A21 left, A21  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A22 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A22> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I22 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A22() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i22">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A22([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i22, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I22, U, F, S, G, B) = (i22, u, f, s, g, b);
  public A22([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A22 original) => (I22, U, F, S, G, B) = (original.I22, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i22, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i22, u, f, s, g, b) = (I22, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A22 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A22 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A22 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A22 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A22 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A22 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A22 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A22 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I22);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A22 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A22 {
      I22 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A22 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I22 == other.I22 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A22 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I22.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A22 left, A22 right) => Equals(left, right);
  public static bool operator !=(A22 left, A22  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A23 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A23> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I23 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A23() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i23">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A23([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i23, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I23, U, F, S, G, B) = (i23, u, f, s, g, b);
  public A23([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A23 original) => (I23, U, F, S, G, B) = (original.I23, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i23, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i23, u, f, s, g, b) = (I23, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A23 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A23 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A23 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A23 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A23 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A23 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A23 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A23 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I23);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A23 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A23 {
      I23 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A23 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I23 == other.I23 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A23 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I23.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A23 left, A23 right) => Equals(left, right);
  public static bool operator !=(A23 left, A23  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A24 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A24> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I24 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A24() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i24">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A24([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i24, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I24, U, F, S, G, B) = (i24, u, f, s, g, b);
  public A24([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A24 original) => (I24, U, F, S, G, B) = (original.I24, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i24, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i24, u, f, s, g, b) = (I24, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A24 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A24 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A24 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A24 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A24 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A24 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A24 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A24 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I24);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A24 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A24 {
      I24 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A24 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I24 == other.I24 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A24 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I24.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A24 left, A24 right) => Equals(left, right);
  public static bool operator !=(A24 left, A24  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A25 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A25> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I25 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A25() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i25">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A25([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i25, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I25, U, F, S, G, B) = (i25, u, f, s, g, b);
  public A25([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A25 original) => (I25, U, F, S, G, B) = (original.I25, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i25, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i25, u, f, s, g, b) = (I25, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A25 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A25 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A25 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A25 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A25 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A25 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A25 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A25 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I25);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A25 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A25 {
      I25 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A25 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I25 == other.I25 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A25 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I25.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A25 left, A25 right) => Equals(left, right);
  public static bool operator !=(A25 left, A25  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A26 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A26> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I26 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A26() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i26">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A26([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i26, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I26, U, F, S, G, B) = (i26, u, f, s, g, b);
  public A26([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A26 original) => (I26, U, F, S, G, B) = (original.I26, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i26, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i26, u, f, s, g, b) = (I26, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A26 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A26 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A26 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A26 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A26 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A26 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A26 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A26 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I26);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A26 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A26 {
      I26 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A26 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I26 == other.I26 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A26 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I26.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A26 left, A26 right) => Equals(left, right);
  public static bool operator !=(A26 left, A26  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A27 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A27> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I27 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A27() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i27">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A27([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i27, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I27, U, F, S, G, B) = (i27, u, f, s, g, b);
  public A27([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A27 original) => (I27, U, F, S, G, B) = (original.I27, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i27, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i27, u, f, s, g, b) = (I27, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A27 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A27 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A27 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A27 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A27 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A27 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A27 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A27 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I27);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A27 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A27 {
      I27 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A27 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I27 == other.I27 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A27 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I27.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A27 left, A27 right) => Equals(left, right);
  public static bool operator !=(A27 left, A27  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A28 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A28> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I28 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A28() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i28">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A28([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i28, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I28, U, F, S, G, B) = (i28, u, f, s, g, b);
  public A28([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A28 original) => (I28, U, F, S, G, B) = (original.I28, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i28, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i28, u, f, s, g, b) = (I28, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A28 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A28 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A28 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A28 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A28 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A28 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A28 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A28 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I28);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A28 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A28 {
      I28 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A28 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I28 == other.I28 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A28 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I28.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A28 left, A28 right) => Equals(left, right);
  public static bool operator !=(A28 left, A28  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A29 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A29> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I29 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A29() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i29">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A29([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i29, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I29, U, F, S, G, B) = (i29, u, f, s, g, b);
  public A29([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A29 original) => (I29, U, F, S, G, B) = (original.I29, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i29, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i29, u, f, s, g, b) = (I29, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A29 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A29 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A29 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A29 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A29 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A29 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A29 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A29 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I29);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A29 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A29 {
      I29 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A29 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I29 == other.I29 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A29 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I29.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A29 left, A29 right) => Equals(left, right);
  public static bool operator !=(A29 left, A29  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A30 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A30> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I30 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A30() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i30">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A30([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i30, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I30, U, F, S, G, B) = (i30, u, f, s, g, b);
  public A30([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A30 original) => (I30, U, F, S, G, B) = (original.I30, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i30, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i30, u, f, s, g, b) = (I30, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A30 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A30 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A30 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A30 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A30 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A30 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A30 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A30 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I30);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A30 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A30 {
      I30 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A30 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I30 == other.I30 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A30 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I30.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A30 left, A30 right) => Equals(left, right);
  public static bool operator !=(A30 left, A30  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A31 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A31> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I31 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A31() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i31">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A31([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i31, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I31, U, F, S, G, B) = (i31, u, f, s, g, b);
  public A31([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A31 original) => (I31, U, F, S, G, B) = (original.I31, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i31, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i31, u, f, s, g, b) = (I31, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A31 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A31 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A31 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A31 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A31 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A31 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A31 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A31 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I31);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A31 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A31 {
      I31 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A31 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I31 == other.I31 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A31 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I31.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A31 left, A31 right) => Equals(left, right);
  public static bool operator !=(A31 left, A31  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A32 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A32> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A32() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i32">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A32([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I32, U, F, S, G, B) = (i32, u, f, s, g, b);
  public A32([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A32 original) => (I32, U, F, S, G, B) = (original.I32, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i32, u, f, s, g, b) = (I32, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A32 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A32 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A32 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A32 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A32 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A32 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A32 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A32 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I32);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A32 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A32 {
      I32 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A32 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I32 == other.I32 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A32 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I32.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A32 left, A32 right) => Equals(left, right);
  public static bool operator !=(A32 left, A32  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A33 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A33> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I33 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A33() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i33">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A33([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i33, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I33, U, F, S, G, B) = (i33, u, f, s, g, b);
  public A33([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A33 original) => (I33, U, F, S, G, B) = (original.I33, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i33, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i33, u, f, s, g, b) = (I33, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A33 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A33 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A33 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A33 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A33 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A33 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A33 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A33 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I33);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A33 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A33 {
      I33 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A33 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I33 == other.I33 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A33 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I33.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A33 left, A33 right) => Equals(left, right);
  public static bool operator !=(A33 left, A33  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A34 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A34> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I34 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A34() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i34">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A34([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i34, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I34, U, F, S, G, B) = (i34, u, f, s, g, b);
  public A34([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A34 original) => (I34, U, F, S, G, B) = (original.I34, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i34, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i34, u, f, s, g, b) = (I34, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A34 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A34 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A34 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A34 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A34 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A34 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A34 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A34 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I34);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A34 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A34 {
      I34 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A34 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I34 == other.I34 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A34 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I34.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A34 left, A34 right) => Equals(left, right);
  public static bool operator !=(A34 left, A34  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A35 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A35> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I35 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A35() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i35">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A35([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i35, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I35, U, F, S, G, B) = (i35, u, f, s, g, b);
  public A35([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A35 original) => (I35, U, F, S, G, B) = (original.I35, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i35, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i35, u, f, s, g, b) = (I35, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A35 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A35 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A35 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A35 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A35 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A35 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A35 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A35 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I35);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A35 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A35 {
      I35 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A35 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I35 == other.I35 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A35 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I35.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A35 left, A35 right) => Equals(left, right);
  public static bool operator !=(A35 left, A35  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A36 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A36> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I36 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A36() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i36">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A36([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i36, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I36, U, F, S, G, B) = (i36, u, f, s, g, b);
  public A36([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A36 original) => (I36, U, F, S, G, B) = (original.I36, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i36, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i36, u, f, s, g, b) = (I36, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A36 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A36 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A36 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A36 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A36 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A36 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A36 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A36 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I36);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A36 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A36 {
      I36 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A36 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I36 == other.I36 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A36 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I36.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A36 left, A36 right) => Equals(left, right);
  public static bool operator !=(A36 left, A36  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A37 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A37> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I37 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A37() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i37">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A37([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i37, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I37, U, F, S, G, B) = (i37, u, f, s, g, b);
  public A37([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A37 original) => (I37, U, F, S, G, B) = (original.I37, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i37, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i37, u, f, s, g, b) = (I37, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A37 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A37 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A37 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A37 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A37 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A37 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A37 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A37 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I37);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A37 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A37 {
      I37 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A37 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I37 == other.I37 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A37 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I37.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A37 left, A37 right) => Equals(left, right);
  public static bool operator !=(A37 left, A37  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A38 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A38> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I38 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A38() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i38">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A38([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i38, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I38, U, F, S, G, B) = (i38, u, f, s, g, b);
  public A38([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A38 original) => (I38, U, F, S, G, B) = (original.I38, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i38, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i38, u, f, s, g, b) = (I38, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A38 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A38 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A38 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A38 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A38 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A38 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A38 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A38 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I38);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A38 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A38 {
      I38 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A38 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I38 == other.I38 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A38 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I38.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A38 left, A38 right) => Equals(left, right);
  public static bool operator !=(A38 left, A38  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A39 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A39> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I39 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A39() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i39">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A39([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i39, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I39, U, F, S, G, B) = (i39, u, f, s, g, b);
  public A39([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A39 original) => (I39, U, F, S, G, B) = (original.I39, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i39, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i39, u, f, s, g, b) = (I39, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A39 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A39 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A39 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A39 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A39 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A39 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A39 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A39 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I39);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A39 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A39 {
      I39 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A39 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I39 == other.I39 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A39 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I39.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A39 left, A39 right) => Equals(left, right);
  public static bool operator !=(A39 left, A39  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A40 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A40> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I40 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A40() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i40">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A40([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i40, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I40, U, F, S, G, B) = (i40, u, f, s, g, b);
  public A40([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A40 original) => (I40, U, F, S, G, B) = (original.I40, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i40, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i40, u, f, s, g, b) = (I40, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A40 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A40 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A40 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A40 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A40 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A40 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A40 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A40 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I40);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A40 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A40 {
      I40 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A40 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I40 == other.I40 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A40 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I40.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A40 left, A40 right) => Equals(left, right);
  public static bool operator !=(A40 left, A40  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A41 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A41> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I41 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A41() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i41">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A41([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i41, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I41, U, F, S, G, B) = (i41, u, f, s, g, b);
  public A41([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A41 original) => (I41, U, F, S, G, B) = (original.I41, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i41, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i41, u, f, s, g, b) = (I41, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A41 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A41 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A41 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A41 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A41 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A41 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A41 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A41 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I41);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A41 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A41 {
      I41 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A41 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I41 == other.I41 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A41 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I41.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A41 left, A41 right) => Equals(left, right);
  public static bool operator !=(A41 left, A41  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A42 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A42> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I42 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A42() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i42">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A42([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i42, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I42, U, F, S, G, B) = (i42, u, f, s, g, b);
  public A42([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A42 original) => (I42, U, F, S, G, B) = (original.I42, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i42, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i42, u, f, s, g, b) = (I42, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A42 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A42 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A42 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A42 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A42 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A42 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A42 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A42 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I42);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A42 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A42 {
      I42 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A42 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I42 == other.I42 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A42 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I42.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A42 left, A42 right) => Equals(left, right);
  public static bool operator !=(A42 left, A42  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A43 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A43> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I43 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A43() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i43">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A43([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i43, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I43, U, F, S, G, B) = (i43, u, f, s, g, b);
  public A43([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A43 original) => (I43, U, F, S, G, B) = (original.I43, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i43, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i43, u, f, s, g, b) = (I43, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A43 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A43 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A43 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A43 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A43 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A43 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A43 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A43 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I43);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A43 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A43 {
      I43 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A43 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I43 == other.I43 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A43 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I43.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A43 left, A43 right) => Equals(left, right);
  public static bool operator !=(A43 left, A43  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A44 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A44> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I44 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A44() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i44">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A44([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i44, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I44, U, F, S, G, B) = (i44, u, f, s, g, b);
  public A44([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A44 original) => (I44, U, F, S, G, B) = (original.I44, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i44, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i44, u, f, s, g, b) = (I44, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A44 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A44 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A44 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A44 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A44 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A44 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A44 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A44 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I44);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A44 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A44 {
      I44 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A44 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I44 == other.I44 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A44 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I44.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A44 left, A44 right) => Equals(left, right);
  public static bool operator !=(A44 left, A44  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A45 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A45> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I45 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A45() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i45">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A45([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i45, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I45, U, F, S, G, B) = (i45, u, f, s, g, b);
  public A45([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A45 original) => (I45, U, F, S, G, B) = (original.I45, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i45, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i45, u, f, s, g, b) = (I45, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A45 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A45 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A45 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A45 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A45 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A45 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A45 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A45 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I45);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A45 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A45 {
      I45 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A45 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I45 == other.I45 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A45 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I45.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A45 left, A45 right) => Equals(left, right);
  public static bool operator !=(A45 left, A45  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A46 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A46> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I46 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A46() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i46">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A46([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i46, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I46, U, F, S, G, B) = (i46, u, f, s, g, b);
  public A46([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A46 original) => (I46, U, F, S, G, B) = (original.I46, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i46, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i46, u, f, s, g, b) = (I46, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A46 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A46 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A46 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A46 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A46 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A46 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A46 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A46 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I46);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A46 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A46 {
      I46 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A46 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I46 == other.I46 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A46 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I46.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A46 left, A46 right) => Equals(left, right);
  public static bool operator !=(A46 left, A46  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A47 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A47> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I47 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A47() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i47">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A47([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i47, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I47, U, F, S, G, B) = (i47, u, f, s, g, b);
  public A47([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A47 original) => (I47, U, F, S, G, B) = (original.I47, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i47, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i47, u, f, s, g, b) = (I47, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A47 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A47 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A47 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A47 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A47 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A47 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A47 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A47 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I47);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A47 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A47 {
      I47 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A47 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I47 == other.I47 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A47 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I47.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A47 left, A47 right) => Equals(left, right);
  public static bool operator !=(A47 left, A47  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A48 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A48> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I48 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A48() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i48">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A48([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i48, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I48, U, F, S, G, B) = (i48, u, f, s, g, b);
  public A48([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A48 original) => (I48, U, F, S, G, B) = (original.I48, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i48, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i48, u, f, s, g, b) = (I48, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A48 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A48 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A48 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A48 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A48 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A48 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A48 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A48 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I48);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A48 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A48 {
      I48 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A48 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I48 == other.I48 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A48 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I48.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A48 left, A48 right) => Equals(left, right);
  public static bool operator !=(A48 left, A48  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A49 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A49> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I49 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A49() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i49">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A49([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i49, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I49, U, F, S, G, B) = (i49, u, f, s, g, b);
  public A49([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A49 original) => (I49, U, F, S, G, B) = (original.I49, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i49, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i49, u, f, s, g, b) = (I49, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A49 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A49 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A49 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A49 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A49 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A49 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A49 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A49 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I49);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A49 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A49 {
      I49 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A49 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I49 == other.I49 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A49 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I49.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A49 left, A49 right) => Equals(left, right);
  public static bool operator !=(A49 left, A49  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class A50 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<A50> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I50 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public A50() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i50">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public A50([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i50, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I50, U, F, S, G, B) = (i50, u, f, s, g, b);
  public A50([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] A50 original) => (I50, U, F, S, G, B) = (original.I50, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i50, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i50, u, f, s, g, b) = (I50, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(A50 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(A50 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A50 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A50 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A50 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A50 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static A50 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(A50 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I50);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static A50 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new A50 {
      I50 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(A50 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I50 == other.I50 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not A50 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I50.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(A50 left, A50 right) => Equals(left, right);
  public static bool operator !=(A50 left, A50  right) => !Equals(left, right);
  #endregion

}

/// <summary>
/// <para>Option A: put the whole thing in a union.</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public abstract class BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> : global::Bebop.Runtime.BaseBebopRecord where T0: A1 where T1: A2 where T2: A3 where T3: A4 where T4: A5 where T5: A6 where T6: A7 where T7: A8 where T8: A9 where T9: A10 where T10: A11 where T11: A12 where T12: A13 where T13: A14 where T14: A15 where T15: A16 where T16: A17 where T17: A18 where T18: A19 where T19: A20 where T20: A21 where T21: A22 where T22: A23 where T23: A24 where T24: A25 where T25: A26 where T26: A27 where T27: A28 where T28: A29 where T29: A30 where T30: A31 where T31: A32 where T32: A33 where T33: A34 where T34: A35 where T35: A36 where T36: A37 where T37: A38 where T38: A39 where T39: A40 where T40: A41 where T41: A42 where T42: A43 where T43: A44 where T44: A45 where T45: A46 where T46: A47 where T47: A48 where T48: A49 where T49: A50 {
  internal readonly T0 _value0;
  internal readonly T1 _value1;
  internal readonly T2 _value2;
  internal readonly T3 _value3;
  internal readonly T4 _value4;
  internal readonly T5 _value5;
  internal readonly T6 _value6;
  internal readonly T7 _value7;
  internal readonly T8 _value8;
  internal readonly T9 _value9;
  internal readonly T10 _value10;
  internal readonly T11 _value11;
  internal readonly T12 _value12;
  internal readonly T13 _value13;
  internal readonly T14 _value14;
  internal readonly T15 _value15;
  internal readonly T16 _value16;
  internal readonly T17 _value17;
  internal readonly T18 _value18;
  internal readonly T19 _value19;
  internal readonly T20 _value20;
  internal readonly T21 _value21;
  internal readonly T22 _value22;
  internal readonly T23 _value23;
  internal readonly T24 _value24;
  internal readonly T25 _value25;
  internal readonly T26 _value26;
  internal readonly T27 _value27;
  internal readonly T28 _value28;
  internal readonly T29 _value29;
  internal readonly T30 _value30;
  internal readonly T31 _value31;
  internal readonly T32 _value32;
  internal readonly T33 _value33;
  internal readonly T34 _value34;
  internal readonly T35 _value35;
  internal readonly T36 _value36;
  internal readonly T37 _value37;
  internal readonly T38 _value38;
  internal readonly T39 _value39;
  internal readonly T40 _value40;
  internal readonly T41 _value41;
  internal readonly T42 _value42;
  internal readonly T43 _value43;
  internal readonly T44 _value44;
  internal readonly T45 _value45;
  internal readonly T46 _value46;
  internal readonly T47 _value47;
  internal readonly T48 _value48;
  internal readonly T49 _value49;
  private readonly byte _discriminator;

  protected private BaseUnionPerfU() { }
  protected BaseUnionPerfU(UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> input) {
      _discriminator = input.Discriminator;
      switch (_discriminator) {
        case 1: _value0 = input.AsA1; break;
        case 2: _value1 = input.AsA2; break;
        case 3: _value2 = input.AsA3; break;
        case 4: _value3 = input.AsA4; break;
        case 5: _value4 = input.AsA5; break;
        case 6: _value5 = input.AsA6; break;
        case 7: _value6 = input.AsA7; break;
        case 8: _value7 = input.AsA8; break;
        case 9: _value8 = input.AsA9; break;
        case 10: _value9 = input.AsA10; break;
        case 11: _value10 = input.AsA11; break;
        case 12: _value11 = input.AsA12; break;
        case 13: _value12 = input.AsA13; break;
        case 14: _value13 = input.AsA14; break;
        case 15: _value14 = input.AsA15; break;
        case 16: _value15 = input.AsA16; break;
        case 17: _value16 = input.AsA17; break;
        case 18: _value17 = input.AsA18; break;
        case 19: _value18 = input.AsA19; break;
        case 20: _value19 = input.AsA20; break;
        case 21: _value20 = input.AsA21; break;
        case 22: _value21 = input.AsA22; break;
        case 23: _value22 = input.AsA23; break;
        case 24: _value23 = input.AsA24; break;
        case 25: _value24 = input.AsA25; break;
        case 26: _value25 = input.AsA26; break;
        case 27: _value26 = input.AsA27; break;
        case 28: _value27 = input.AsA28; break;
        case 29: _value28 = input.AsA29; break;
        case 30: _value29 = input.AsA30; break;
        case 31: _value30 = input.AsA31; break;
        case 32: _value31 = input.AsA32; break;
        case 33: _value32 = input.AsA33; break;
        case 34: _value33 = input.AsA34; break;
        case 35: _value34 = input.AsA35; break;
        case 36: _value35 = input.AsA36; break;
        case 37: _value36 = input.AsA37; break;
        case 38: _value37 = input.AsA38; break;
        case 39: _value38 = input.AsA39; break;
        case 40: _value39 = input.AsA40; break;
        case 41: _value40 = input.AsA41; break;
        case 42: _value41 = input.AsA42; break;
        case 43: _value42 = input.AsA43; break;
        case 44: _value43 = input.AsA44; break;
        case 45: _value44 = input.AsA45; break;
        case 46: _value45 = input.AsA46; break;
        case 47: _value46 = input.AsA47; break;
        case 48: _value47 = input.AsA48; break;
        case 49: _value48 = input.AsA49; break;
        case 50: _value49 = input.AsA50; break;
        default: throw new global::Bebop.Exceptions.BebopRuntimeException();
      }
  }

  public global::Bebop.Runtime.BaseBebopRecord Value => _discriminator switch {
      1 => _value0,
      2 => _value1,
      3 => _value2,
      4 => _value3,
      5 => _value4,
      6 => _value5,
      7 => _value6,
      8 => _value7,
      9 => _value8,
      10 => _value9,
      11 => _value10,
      12 => _value11,
      13 => _value12,
      14 => _value13,
      15 => _value14,
      16 => _value15,
      17 => _value16,
      18 => _value17,
      19 => _value18,
      20 => _value19,
      21 => _value20,
      22 => _value21,
      23 => _value22,
      24 => _value23,
      25 => _value24,
      26 => _value25,
      27 => _value26,
      28 => _value27,
      29 => _value28,
      30 => _value29,
      31 => _value30,
      32 => _value31,
      33 => _value32,
      34 => _value33,
      35 => _value34,
      36 => _value35,
      37 => _value36,
      38 => _value37,
      39 => _value38,
      40 => _value39,
      41 => _value40,
      42 => _value41,
      43 => _value42,
      44 => _value43,
      45 => _value44,
      46 => _value45,
      47 => _value46,
      48 => _value47,
      49 => _value48,
      50 => _value49,
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  public byte Discriminator => _discriminator;

  #region IsAs
  public bool IsA1 => _discriminator is 1;
  public T0 AsA1 => _discriminator is 1 ? _value0 : throw new global::System.NotImplementedException($"Cannot return as A1 as result is T0");

  public bool IsA2 => _discriminator is 2;
  public T1 AsA2 => _discriminator is 2 ? _value1 : throw new global::System.NotImplementedException($"Cannot return as A2 as result is T1");

  public bool IsA3 => _discriminator is 3;
  public T2 AsA3 => _discriminator is 3 ? _value2 : throw new global::System.NotImplementedException($"Cannot return as A3 as result is T2");

  public bool IsA4 => _discriminator is 4;
  public T3 AsA4 => _discriminator is 4 ? _value3 : throw new global::System.NotImplementedException($"Cannot return as A4 as result is T3");

  public bool IsA5 => _discriminator is 5;
  public T4 AsA5 => _discriminator is 5 ? _value4 : throw new global::System.NotImplementedException($"Cannot return as A5 as result is T4");

  public bool IsA6 => _discriminator is 6;
  public T5 AsA6 => _discriminator is 6 ? _value5 : throw new global::System.NotImplementedException($"Cannot return as A6 as result is T5");

  public bool IsA7 => _discriminator is 7;
  public T6 AsA7 => _discriminator is 7 ? _value6 : throw new global::System.NotImplementedException($"Cannot return as A7 as result is T6");

  public bool IsA8 => _discriminator is 8;
  public T7 AsA8 => _discriminator is 8 ? _value7 : throw new global::System.NotImplementedException($"Cannot return as A8 as result is T7");

  public bool IsA9 => _discriminator is 9;
  public T8 AsA9 => _discriminator is 9 ? _value8 : throw new global::System.NotImplementedException($"Cannot return as A9 as result is T8");

  public bool IsA10 => _discriminator is 10;
  public T9 AsA10 => _discriminator is 10 ? _value9 : throw new global::System.NotImplementedException($"Cannot return as A10 as result is T9");

  public bool IsA11 => _discriminator is 11;
  public T10 AsA11 => _discriminator is 11 ? _value10 : throw new global::System.NotImplementedException($"Cannot return as A11 as result is T10");

  public bool IsA12 => _discriminator is 12;
  public T11 AsA12 => _discriminator is 12 ? _value11 : throw new global::System.NotImplementedException($"Cannot return as A12 as result is T11");

  public bool IsA13 => _discriminator is 13;
  public T12 AsA13 => _discriminator is 13 ? _value12 : throw new global::System.NotImplementedException($"Cannot return as A13 as result is T12");

  public bool IsA14 => _discriminator is 14;
  public T13 AsA14 => _discriminator is 14 ? _value13 : throw new global::System.NotImplementedException($"Cannot return as A14 as result is T13");

  public bool IsA15 => _discriminator is 15;
  public T14 AsA15 => _discriminator is 15 ? _value14 : throw new global::System.NotImplementedException($"Cannot return as A15 as result is T14");

  public bool IsA16 => _discriminator is 16;
  public T15 AsA16 => _discriminator is 16 ? _value15 : throw new global::System.NotImplementedException($"Cannot return as A16 as result is T15");

  public bool IsA17 => _discriminator is 17;
  public T16 AsA17 => _discriminator is 17 ? _value16 : throw new global::System.NotImplementedException($"Cannot return as A17 as result is T16");

  public bool IsA18 => _discriminator is 18;
  public T17 AsA18 => _discriminator is 18 ? _value17 : throw new global::System.NotImplementedException($"Cannot return as A18 as result is T17");

  public bool IsA19 => _discriminator is 19;
  public T18 AsA19 => _discriminator is 19 ? _value18 : throw new global::System.NotImplementedException($"Cannot return as A19 as result is T18");

  public bool IsA20 => _discriminator is 20;
  public T19 AsA20 => _discriminator is 20 ? _value19 : throw new global::System.NotImplementedException($"Cannot return as A20 as result is T19");

  public bool IsA21 => _discriminator is 21;
  public T20 AsA21 => _discriminator is 21 ? _value20 : throw new global::System.NotImplementedException($"Cannot return as A21 as result is T20");

  public bool IsA22 => _discriminator is 22;
  public T21 AsA22 => _discriminator is 22 ? _value21 : throw new global::System.NotImplementedException($"Cannot return as A22 as result is T21");

  public bool IsA23 => _discriminator is 23;
  public T22 AsA23 => _discriminator is 23 ? _value22 : throw new global::System.NotImplementedException($"Cannot return as A23 as result is T22");

  public bool IsA24 => _discriminator is 24;
  public T23 AsA24 => _discriminator is 24 ? _value23 : throw new global::System.NotImplementedException($"Cannot return as A24 as result is T23");

  public bool IsA25 => _discriminator is 25;
  public T24 AsA25 => _discriminator is 25 ? _value24 : throw new global::System.NotImplementedException($"Cannot return as A25 as result is T24");

  public bool IsA26 => _discriminator is 26;
  public T25 AsA26 => _discriminator is 26 ? _value25 : throw new global::System.NotImplementedException($"Cannot return as A26 as result is T25");

  public bool IsA27 => _discriminator is 27;
  public T26 AsA27 => _discriminator is 27 ? _value26 : throw new global::System.NotImplementedException($"Cannot return as A27 as result is T26");

  public bool IsA28 => _discriminator is 28;
  public T27 AsA28 => _discriminator is 28 ? _value27 : throw new global::System.NotImplementedException($"Cannot return as A28 as result is T27");

  public bool IsA29 => _discriminator is 29;
  public T28 AsA29 => _discriminator is 29 ? _value28 : throw new global::System.NotImplementedException($"Cannot return as A29 as result is T28");

  public bool IsA30 => _discriminator is 30;
  public T29 AsA30 => _discriminator is 30 ? _value29 : throw new global::System.NotImplementedException($"Cannot return as A30 as result is T29");

  public bool IsA31 => _discriminator is 31;
  public T30 AsA31 => _discriminator is 31 ? _value30 : throw new global::System.NotImplementedException($"Cannot return as A31 as result is T30");

  public bool IsA32 => _discriminator is 32;
  public T31 AsA32 => _discriminator is 32 ? _value31 : throw new global::System.NotImplementedException($"Cannot return as A32 as result is T31");

  public bool IsA33 => _discriminator is 33;
  public T32 AsA33 => _discriminator is 33 ? _value32 : throw new global::System.NotImplementedException($"Cannot return as A33 as result is T32");

  public bool IsA34 => _discriminator is 34;
  public T33 AsA34 => _discriminator is 34 ? _value33 : throw new global::System.NotImplementedException($"Cannot return as A34 as result is T33");

  public bool IsA35 => _discriminator is 35;
  public T34 AsA35 => _discriminator is 35 ? _value34 : throw new global::System.NotImplementedException($"Cannot return as A35 as result is T34");

  public bool IsA36 => _discriminator is 36;
  public T35 AsA36 => _discriminator is 36 ? _value35 : throw new global::System.NotImplementedException($"Cannot return as A36 as result is T35");

  public bool IsA37 => _discriminator is 37;
  public T36 AsA37 => _discriminator is 37 ? _value36 : throw new global::System.NotImplementedException($"Cannot return as A37 as result is T36");

  public bool IsA38 => _discriminator is 38;
  public T37 AsA38 => _discriminator is 38 ? _value37 : throw new global::System.NotImplementedException($"Cannot return as A38 as result is T37");

  public bool IsA39 => _discriminator is 39;
  public T38 AsA39 => _discriminator is 39 ? _value38 : throw new global::System.NotImplementedException($"Cannot return as A39 as result is T38");

  public bool IsA40 => _discriminator is 40;
  public T39 AsA40 => _discriminator is 40 ? _value39 : throw new global::System.NotImplementedException($"Cannot return as A40 as result is T39");

  public bool IsA41 => _discriminator is 41;
  public T40 AsA41 => _discriminator is 41 ? _value40 : throw new global::System.NotImplementedException($"Cannot return as A41 as result is T40");

  public bool IsA42 => _discriminator is 42;
  public T41 AsA42 => _discriminator is 42 ? _value41 : throw new global::System.NotImplementedException($"Cannot return as A42 as result is T41");

  public bool IsA43 => _discriminator is 43;
  public T42 AsA43 => _discriminator is 43 ? _value42 : throw new global::System.NotImplementedException($"Cannot return as A43 as result is T42");

  public bool IsA44 => _discriminator is 44;
  public T43 AsA44 => _discriminator is 44 ? _value43 : throw new global::System.NotImplementedException($"Cannot return as A44 as result is T43");

  public bool IsA45 => _discriminator is 45;
  public T44 AsA45 => _discriminator is 45 ? _value44 : throw new global::System.NotImplementedException($"Cannot return as A45 as result is T44");

  public bool IsA46 => _discriminator is 46;
  public T45 AsA46 => _discriminator is 46 ? _value45 : throw new global::System.NotImplementedException($"Cannot return as A46 as result is T45");

  public bool IsA47 => _discriminator is 47;
  public T46 AsA47 => _discriminator is 47 ? _value46 : throw new global::System.NotImplementedException($"Cannot return as A47 as result is T46");

  public bool IsA48 => _discriminator is 48;
  public T47 AsA48 => _discriminator is 48 ? _value47 : throw new global::System.NotImplementedException($"Cannot return as A48 as result is T47");

  public bool IsA49 => _discriminator is 49;
  public T48 AsA49 => _discriminator is 49 ? _value48 : throw new global::System.NotImplementedException($"Cannot return as A49 as result is T48");

  public bool IsA50 => _discriminator is 50;
  public T49 AsA50 => _discriminator is 50 ? _value49 : throw new global::System.NotImplementedException($"Cannot return as A50 as result is T49");

  #endregion
  public void Switch(global::System.Action<T0> f0, global::System.Action<T1> f1, global::System.Action<T2> f2, global::System.Action<T3> f3, global::System.Action<T4> f4, global::System.Action<T5> f5, global::System.Action<T6> f6, global::System.Action<T7> f7, global::System.Action<T8> f8, global::System.Action<T9> f9, global::System.Action<T10> f10, global::System.Action<T11> f11, global::System.Action<T12> f12, global::System.Action<T13> f13, global::System.Action<T14> f14, global::System.Action<T15> f15, global::System.Action<T16> f16, global::System.Action<T17> f17, global::System.Action<T18> f18, global::System.Action<T19> f19, global::System.Action<T20> f20, global::System.Action<T21> f21, global::System.Action<T22> f22, global::System.Action<T23> f23, global::System.Action<T24> f24, global::System.Action<T25> f25, global::System.Action<T26> f26, global::System.Action<T27> f27, global::System.Action<T28> f28, global::System.Action<T29> f29, global::System.Action<T30> f30, global::System.Action<T31> f31, global::System.Action<T32> f32, global::System.Action<T33> f33, global::System.Action<T34> f34, global::System.Action<T35> f35, global::System.Action<T36> f36, global::System.Action<T37> f37, global::System.Action<T38> f38, global::System.Action<T39> f39, global::System.Action<T40> f40, global::System.Action<T41> f41, global::System.Action<T42> f42, global::System.Action<T43> f43, global::System.Action<T44> f44, global::System.Action<T45> f45, global::System.Action<T46> f46, global::System.Action<T47> f47, global::System.Action<T48> f48, global::System.Action<T49> f49) {
      if (_discriminator is 1 && f0 is not null) {
        f0(_value0);
        return;
      }
      if (_discriminator is 2 && f1 is not null) {
        f1(_value1);
        return;
      }
      if (_discriminator is 3 && f2 is not null) {
        f2(_value2);
        return;
      }
      if (_discriminator is 4 && f3 is not null) {
        f3(_value3);
        return;
      }
      if (_discriminator is 5 && f4 is not null) {
        f4(_value4);
        return;
      }
      if (_discriminator is 6 && f5 is not null) {
        f5(_value5);
        return;
      }
      if (_discriminator is 7 && f6 is not null) {
        f6(_value6);
        return;
      }
      if (_discriminator is 8 && f7 is not null) {
        f7(_value7);
        return;
      }
      if (_discriminator is 9 && f8 is not null) {
        f8(_value8);
        return;
      }
      if (_discriminator is 10 && f9 is not null) {
        f9(_value9);
        return;
      }
      if (_discriminator is 11 && f10 is not null) {
        f10(_value10);
        return;
      }
      if (_discriminator is 12 && f11 is not null) {
        f11(_value11);
        return;
      }
      if (_discriminator is 13 && f12 is not null) {
        f12(_value12);
        return;
      }
      if (_discriminator is 14 && f13 is not null) {
        f13(_value13);
        return;
      }
      if (_discriminator is 15 && f14 is not null) {
        f14(_value14);
        return;
      }
      if (_discriminator is 16 && f15 is not null) {
        f15(_value15);
        return;
      }
      if (_discriminator is 17 && f16 is not null) {
        f16(_value16);
        return;
      }
      if (_discriminator is 18 && f17 is not null) {
        f17(_value17);
        return;
      }
      if (_discriminator is 19 && f18 is not null) {
        f18(_value18);
        return;
      }
      if (_discriminator is 20 && f19 is not null) {
        f19(_value19);
        return;
      }
      if (_discriminator is 21 && f20 is not null) {
        f20(_value20);
        return;
      }
      if (_discriminator is 22 && f21 is not null) {
        f21(_value21);
        return;
      }
      if (_discriminator is 23 && f22 is not null) {
        f22(_value22);
        return;
      }
      if (_discriminator is 24 && f23 is not null) {
        f23(_value23);
        return;
      }
      if (_discriminator is 25 && f24 is not null) {
        f24(_value24);
        return;
      }
      if (_discriminator is 26 && f25 is not null) {
        f25(_value25);
        return;
      }
      if (_discriminator is 27 && f26 is not null) {
        f26(_value26);
        return;
      }
      if (_discriminator is 28 && f27 is not null) {
        f27(_value27);
        return;
      }
      if (_discriminator is 29 && f28 is not null) {
        f28(_value28);
        return;
      }
      if (_discriminator is 30 && f29 is not null) {
        f29(_value29);
        return;
      }
      if (_discriminator is 31 && f30 is not null) {
        f30(_value30);
        return;
      }
      if (_discriminator is 32 && f31 is not null) {
        f31(_value31);
        return;
      }
      if (_discriminator is 33 && f32 is not null) {
        f32(_value32);
        return;
      }
      if (_discriminator is 34 && f33 is not null) {
        f33(_value33);
        return;
      }
      if (_discriminator is 35 && f34 is not null) {
        f34(_value34);
        return;
      }
      if (_discriminator is 36 && f35 is not null) {
        f35(_value35);
        return;
      }
      if (_discriminator is 37 && f36 is not null) {
        f36(_value36);
        return;
      }
      if (_discriminator is 38 && f37 is not null) {
        f37(_value37);
        return;
      }
      if (_discriminator is 39 && f38 is not null) {
        f38(_value38);
        return;
      }
      if (_discriminator is 40 && f39 is not null) {
        f39(_value39);
        return;
      }
      if (_discriminator is 41 && f40 is not null) {
        f40(_value40);
        return;
      }
      if (_discriminator is 42 && f41 is not null) {
        f41(_value41);
        return;
      }
      if (_discriminator is 43 && f42 is not null) {
        f42(_value42);
        return;
      }
      if (_discriminator is 44 && f43 is not null) {
        f43(_value43);
        return;
      }
      if (_discriminator is 45 && f44 is not null) {
        f44(_value44);
        return;
      }
      if (_discriminator is 46 && f45 is not null) {
        f45(_value45);
        return;
      }
      if (_discriminator is 47 && f46 is not null) {
        f46(_value46);
        return;
      }
      if (_discriminator is 48 && f47 is not null) {
        f47(_value47);
        return;
      }
      if (_discriminator is 49 && f48 is not null) {
        f48(_value48);
        return;
      }
      if (_discriminator is 50 && f49 is not null) {
        f49(_value49);
        return;
      }
      throw new global::Bebop.Exceptions.BebopRuntimeException();
  }

  public TResult Match<TResult>(global::System.Func<T0, TResult> f0, global::System.Func<T1, TResult> f1, global::System.Func<T2, TResult> f2, global::System.Func<T3, TResult> f3, global::System.Func<T4, TResult> f4, global::System.Func<T5, TResult> f5, global::System.Func<T6, TResult> f6, global::System.Func<T7, TResult> f7, global::System.Func<T8, TResult> f8, global::System.Func<T9, TResult> f9, global::System.Func<T10, TResult> f10, global::System.Func<T11, TResult> f11, global::System.Func<T12, TResult> f12, global::System.Func<T13, TResult> f13, global::System.Func<T14, TResult> f14, global::System.Func<T15, TResult> f15, global::System.Func<T16, TResult> f16, global::System.Func<T17, TResult> f17, global::System.Func<T18, TResult> f18, global::System.Func<T19, TResult> f19, global::System.Func<T20, TResult> f20, global::System.Func<T21, TResult> f21, global::System.Func<T22, TResult> f22, global::System.Func<T23, TResult> f23, global::System.Func<T24, TResult> f24, global::System.Func<T25, TResult> f25, global::System.Func<T26, TResult> f26, global::System.Func<T27, TResult> f27, global::System.Func<T28, TResult> f28, global::System.Func<T29, TResult> f29, global::System.Func<T30, TResult> f30, global::System.Func<T31, TResult> f31, global::System.Func<T32, TResult> f32, global::System.Func<T33, TResult> f33, global::System.Func<T34, TResult> f34, global::System.Func<T35, TResult> f35, global::System.Func<T36, TResult> f36, global::System.Func<T37, TResult> f37, global::System.Func<T38, TResult> f38, global::System.Func<T39, TResult> f39, global::System.Func<T40, TResult> f40, global::System.Func<T41, TResult> f41, global::System.Func<T42, TResult> f42, global::System.Func<T43, TResult> f43, global::System.Func<T44, TResult> f44, global::System.Func<T45, TResult> f45, global::System.Func<T46, TResult> f46, global::System.Func<T47, TResult> f47, global::System.Func<T48, TResult> f48, global::System.Func<T49, TResult> f49) => _discriminator switch {
      1 when f0 is not null => f0(_value0),
      2 when f1 is not null => f1(_value1),
      3 when f2 is not null => f2(_value2),
      4 when f3 is not null => f3(_value3),
      5 when f4 is not null => f4(_value4),
      6 when f5 is not null => f5(_value5),
      7 when f6 is not null => f6(_value6),
      8 when f7 is not null => f7(_value7),
      9 when f8 is not null => f8(_value8),
      10 when f9 is not null => f9(_value9),
      11 when f10 is not null => f10(_value10),
      12 when f11 is not null => f11(_value11),
      13 when f12 is not null => f12(_value12),
      14 when f13 is not null => f13(_value13),
      15 when f14 is not null => f14(_value14),
      16 when f15 is not null => f15(_value15),
      17 when f16 is not null => f16(_value16),
      18 when f17 is not null => f17(_value17),
      19 when f18 is not null => f18(_value18),
      20 when f19 is not null => f19(_value19),
      21 when f20 is not null => f20(_value20),
      22 when f21 is not null => f21(_value21),
      23 when f22 is not null => f22(_value22),
      24 when f23 is not null => f23(_value23),
      25 when f24 is not null => f24(_value24),
      26 when f25 is not null => f25(_value25),
      27 when f26 is not null => f26(_value26),
      28 when f27 is not null => f27(_value27),
      29 when f28 is not null => f28(_value28),
      30 when f29 is not null => f29(_value29),
      31 when f30 is not null => f30(_value30),
      32 when f31 is not null => f31(_value31),
      33 when f32 is not null => f32(_value32),
      34 when f33 is not null => f33(_value33),
      35 when f34 is not null => f34(_value34),
      36 when f35 is not null => f35(_value35),
      37 when f36 is not null => f36(_value36),
      38 when f37 is not null => f37(_value37),
      39 when f38 is not null => f38(_value38),
      40 when f39 is not null => f39(_value39),
      41 when f40 is not null => f40(_value40),
      42 when f41 is not null => f41(_value41),
      43 when f42 is not null => f42(_value42),
      44 when f43 is not null => f43(_value43),
      45 when f44 is not null => f44(_value44),
      46 when f45 is not null => f45(_value45),
      47 when f46 is not null => f46(_value46),
      48 when f47 is not null => f47(_value47),
      49 when f48 is not null => f48(_value48),
      50 when f49 is not null => f49(_value49),
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  #region Equality
  private bool Equals(BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> other) => _discriminator == other.Discriminator && _discriminator switch {
      1 => Equals(_value0, other._value0),
      2 => Equals(_value1, other._value1),
      3 => Equals(_value2, other._value2),
      4 => Equals(_value3, other._value3),
      5 => Equals(_value4, other._value4),
      6 => Equals(_value5, other._value5),
      7 => Equals(_value6, other._value6),
      8 => Equals(_value7, other._value7),
      9 => Equals(_value8, other._value8),
      10 => Equals(_value9, other._value9),
      11 => Equals(_value10, other._value10),
      12 => Equals(_value11, other._value11),
      13 => Equals(_value12, other._value12),
      14 => Equals(_value13, other._value13),
      15 => Equals(_value14, other._value14),
      16 => Equals(_value15, other._value15),
      17 => Equals(_value16, other._value16),
      18 => Equals(_value17, other._value17),
      19 => Equals(_value18, other._value18),
      20 => Equals(_value19, other._value19),
      21 => Equals(_value20, other._value20),
      22 => Equals(_value21, other._value21),
      23 => Equals(_value22, other._value22),
      24 => Equals(_value23, other._value23),
      25 => Equals(_value24, other._value24),
      26 => Equals(_value25, other._value25),
      27 => Equals(_value26, other._value26),
      28 => Equals(_value27, other._value27),
      29 => Equals(_value28, other._value28),
      30 => Equals(_value29, other._value29),
      31 => Equals(_value30, other._value30),
      32 => Equals(_value31, other._value31),
      33 => Equals(_value32, other._value32),
      34 => Equals(_value33, other._value33),
      35 => Equals(_value34, other._value34),
      36 => Equals(_value35, other._value35),
      37 => Equals(_value36, other._value36),
      38 => Equals(_value37, other._value37),
      39 => Equals(_value38, other._value38),
      40 => Equals(_value39, other._value39),
      41 => Equals(_value40, other._value40),
      42 => Equals(_value41, other._value41),
      43 => Equals(_value42, other._value42),
      44 => Equals(_value43, other._value43),
      45 => Equals(_value44, other._value44),
      46 => Equals(_value45, other._value45),
      47 => Equals(_value46, other._value46),
      48 => Equals(_value47, other._value47),
      49 => Equals(_value48, other._value48),
      50 => Equals(_value49, other._value49),
      _ => false
  };

  public override bool Equals(object other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return other is BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> o && Equals(o);
  }

  public static bool operator ==(BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> left, BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> right) => Equals(left, right);
  public static bool operator !=(BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> left, BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> right) => !Equals(left, right);
  public override int GetHashCode() => (_discriminator switch {
      1 => _value0?.GetHashCode() ?? 0,
      2 => _value1?.GetHashCode() ?? 0,
      3 => _value2?.GetHashCode() ?? 0,
      4 => _value3?.GetHashCode() ?? 0,
      5 => _value4?.GetHashCode() ?? 0,
      6 => _value5?.GetHashCode() ?? 0,
      7 => _value6?.GetHashCode() ?? 0,
      8 => _value7?.GetHashCode() ?? 0,
      9 => _value8?.GetHashCode() ?? 0,
      10 => _value9?.GetHashCode() ?? 0,
      11 => _value10?.GetHashCode() ?? 0,
      12 => _value11?.GetHashCode() ?? 0,
      13 => _value12?.GetHashCode() ?? 0,
      14 => _value13?.GetHashCode() ?? 0,
      15 => _value14?.GetHashCode() ?? 0,
      16 => _value15?.GetHashCode() ?? 0,
      17 => _value16?.GetHashCode() ?? 0,
      18 => _value17?.GetHashCode() ?? 0,
      19 => _value18?.GetHashCode() ?? 0,
      20 => _value19?.GetHashCode() ?? 0,
      21 => _value20?.GetHashCode() ?? 0,
      22 => _value21?.GetHashCode() ?? 0,
      23 => _value22?.GetHashCode() ?? 0,
      24 => _value23?.GetHashCode() ?? 0,
      25 => _value24?.GetHashCode() ?? 0,
      26 => _value25?.GetHashCode() ?? 0,
      27 => _value26?.GetHashCode() ?? 0,
      28 => _value27?.GetHashCode() ?? 0,
      29 => _value28?.GetHashCode() ?? 0,
      30 => _value29?.GetHashCode() ?? 0,
      31 => _value30?.GetHashCode() ?? 0,
      32 => _value31?.GetHashCode() ?? 0,
      33 => _value32?.GetHashCode() ?? 0,
      34 => _value33?.GetHashCode() ?? 0,
      35 => _value34?.GetHashCode() ?? 0,
      36 => _value35?.GetHashCode() ?? 0,
      37 => _value36?.GetHashCode() ?? 0,
      38 => _value37?.GetHashCode() ?? 0,
      39 => _value38?.GetHashCode() ?? 0,
      40 => _value39?.GetHashCode() ?? 0,
      41 => _value40?.GetHashCode() ?? 0,
      42 => _value41?.GetHashCode() ?? 0,
      43 => _value42?.GetHashCode() ?? 0,
      44 => _value43?.GetHashCode() ?? 0,
      45 => _value44?.GetHashCode() ?? 0,
      46 => _value45?.GetHashCode() ?? 0,
      47 => _value46?.GetHashCode() ?? 0,
      48 => _value47?.GetHashCode() ?? 0,
      49 => _value48?.GetHashCode() ?? 0,
      50 => _value49?.GetHashCode() ?? 0,
      _ => 0
  } * 397) ^ _discriminator;

  #endregion
}

/// <inheritdoc />
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Union)]
public partial class UnionPerfU : BaseUnionPerfU<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, A27, A28, A29, A30, A31, A32, A33, A34, A35, A36, A37, A38, A39, A40, A41, A42, A43, A44, A45, A46, A47, A48, A49, A50> {

  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();

  protected private UnionPerfU(): base() { }
  private UnionPerfU(UnionPerfUUnion<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, A27, A28, A29, A30, A31, A32, A33, A34, A35, A36, A37, A38, A39, A40, A41, A42, A43, A44, A45, A46, A47, A48, A49, A50> _) : base(_) { }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(UnionPerfU record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(UnionPerfU record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + sizeof(byte) + Discriminator switch {
        1 => AsA1.MaxByteCount,
        2 => AsA2.MaxByteCount,
        3 => AsA3.MaxByteCount,
        4 => AsA4.MaxByteCount,
        5 => AsA5.MaxByteCount,
        6 => AsA6.MaxByteCount,
        7 => AsA7.MaxByteCount,
        8 => AsA8.MaxByteCount,
        9 => AsA9.MaxByteCount,
        10 => AsA10.MaxByteCount,
        11 => AsA11.MaxByteCount,
        12 => AsA12.MaxByteCount,
        13 => AsA13.MaxByteCount,
        14 => AsA14.MaxByteCount,
        15 => AsA15.MaxByteCount,
        16 => AsA16.MaxByteCount,
        17 => AsA17.MaxByteCount,
        18 => AsA18.MaxByteCount,
        19 => AsA19.MaxByteCount,
        20 => AsA20.MaxByteCount,
        21 => AsA21.MaxByteCount,
        22 => AsA22.MaxByteCount,
        23 => AsA23.MaxByteCount,
        24 => AsA24.MaxByteCount,
        25 => AsA25.MaxByteCount,
        26 => AsA26.MaxByteCount,
        27 => AsA27.MaxByteCount,
        28 => AsA28.MaxByteCount,
        29 => AsA29.MaxByteCount,
        30 => AsA30.MaxByteCount,
        31 => AsA31.MaxByteCount,
        32 => AsA32.MaxByteCount,
        33 => AsA33.MaxByteCount,
        34 => AsA34.MaxByteCount,
        35 => AsA35.MaxByteCount,
        36 => AsA36.MaxByteCount,
        37 => AsA37.MaxByteCount,
        38 => AsA38.MaxByteCount,
        39 => AsA39.MaxByteCount,
        40 => AsA40.MaxByteCount,
        41 => AsA41.MaxByteCount,
        42 => AsA42.MaxByteCount,
        43 => AsA43.MaxByteCount,
        44 => AsA44.MaxByteCount,
        45 => AsA45.MaxByteCount,
        46 => AsA46.MaxByteCount,
        47 => AsA47.MaxByteCount,
        48 => AsA48.MaxByteCount,
        49 => AsA49.MaxByteCount,
        50 => AsA50.MaxByteCount,
        _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
    };
    return byteCount;
  }

  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint) + sizeof(byte) + Discriminator switch {
        1 => AsA1.ByteCount,
        2 => AsA2.ByteCount,
        3 => AsA3.ByteCount,
        4 => AsA4.ByteCount,
        5 => AsA5.ByteCount,
        6 => AsA6.ByteCount,
        7 => AsA7.ByteCount,
        8 => AsA8.ByteCount,
        9 => AsA9.ByteCount,
        10 => AsA10.ByteCount,
        11 => AsA11.ByteCount,
        12 => AsA12.ByteCount,
        13 => AsA13.ByteCount,
        14 => AsA14.ByteCount,
        15 => AsA15.ByteCount,
        16 => AsA16.ByteCount,
        17 => AsA17.ByteCount,
        18 => AsA18.ByteCount,
        19 => AsA19.ByteCount,
        20 => AsA20.ByteCount,
        21 => AsA21.ByteCount,
        22 => AsA22.ByteCount,
        23 => AsA23.ByteCount,
        24 => AsA24.ByteCount,
        25 => AsA25.ByteCount,
        26 => AsA26.ByteCount,
        27 => AsA27.ByteCount,
        28 => AsA28.ByteCount,
        29 => AsA29.ByteCount,
        30 => AsA30.ByteCount,
        31 => AsA31.ByteCount,
        32 => AsA32.ByteCount,
        33 => AsA33.ByteCount,
        34 => AsA34.ByteCount,
        35 => AsA35.ByteCount,
        36 => AsA36.ByteCount,
        37 => AsA37.ByteCount,
        38 => AsA38.ByteCount,
        39 => AsA39.ByteCount,
        40 => AsA40.ByteCount,
        41 => AsA41.ByteCount,
        42 => AsA42.ByteCount,
        43 => AsA43.ByteCount,
        44 => AsA44.ByteCount,
        45 => AsA45.ByteCount,
        46 => AsA46.ByteCount,
        47 => AsA47.ByteCount,
        48 => AsA48.ByteCount,
        49 => AsA49.ByteCount,
        50 => AsA50.ByteCount,
        _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
    };
    return byteCount;
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfU Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfU Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfU Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfU Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfU Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Implicit Overrides
  public static implicit operator UnionPerfU(A1 _) => new (_);
  public static UnionPerfU FromA1(A1 input) => new (input);

  public static implicit operator UnionPerfU(A2 _) => new (_);
  public static UnionPerfU FromA2(A2 input) => new (input);

  public static implicit operator UnionPerfU(A3 _) => new (_);
  public static UnionPerfU FromA3(A3 input) => new (input);

  public static implicit operator UnionPerfU(A4 _) => new (_);
  public static UnionPerfU FromA4(A4 input) => new (input);

  public static implicit operator UnionPerfU(A5 _) => new (_);
  public static UnionPerfU FromA5(A5 input) => new (input);

  public static implicit operator UnionPerfU(A6 _) => new (_);
  public static UnionPerfU FromA6(A6 input) => new (input);

  public static implicit operator UnionPerfU(A7 _) => new (_);
  public static UnionPerfU FromA7(A7 input) => new (input);

  public static implicit operator UnionPerfU(A8 _) => new (_);
  public static UnionPerfU FromA8(A8 input) => new (input);

  public static implicit operator UnionPerfU(A9 _) => new (_);
  public static UnionPerfU FromA9(A9 input) => new (input);

  public static implicit operator UnionPerfU(A10 _) => new (_);
  public static UnionPerfU FromA10(A10 input) => new (input);

  public static implicit operator UnionPerfU(A11 _) => new (_);
  public static UnionPerfU FromA11(A11 input) => new (input);

  public static implicit operator UnionPerfU(A12 _) => new (_);
  public static UnionPerfU FromA12(A12 input) => new (input);

  public static implicit operator UnionPerfU(A13 _) => new (_);
  public static UnionPerfU FromA13(A13 input) => new (input);

  public static implicit operator UnionPerfU(A14 _) => new (_);
  public static UnionPerfU FromA14(A14 input) => new (input);

  public static implicit operator UnionPerfU(A15 _) => new (_);
  public static UnionPerfU FromA15(A15 input) => new (input);

  public static implicit operator UnionPerfU(A16 _) => new (_);
  public static UnionPerfU FromA16(A16 input) => new (input);

  public static implicit operator UnionPerfU(A17 _) => new (_);
  public static UnionPerfU FromA17(A17 input) => new (input);

  public static implicit operator UnionPerfU(A18 _) => new (_);
  public static UnionPerfU FromA18(A18 input) => new (input);

  public static implicit operator UnionPerfU(A19 _) => new (_);
  public static UnionPerfU FromA19(A19 input) => new (input);

  public static implicit operator UnionPerfU(A20 _) => new (_);
  public static UnionPerfU FromA20(A20 input) => new (input);

  public static implicit operator UnionPerfU(A21 _) => new (_);
  public static UnionPerfU FromA21(A21 input) => new (input);

  public static implicit operator UnionPerfU(A22 _) => new (_);
  public static UnionPerfU FromA22(A22 input) => new (input);

  public static implicit operator UnionPerfU(A23 _) => new (_);
  public static UnionPerfU FromA23(A23 input) => new (input);

  public static implicit operator UnionPerfU(A24 _) => new (_);
  public static UnionPerfU FromA24(A24 input) => new (input);

  public static implicit operator UnionPerfU(A25 _) => new (_);
  public static UnionPerfU FromA25(A25 input) => new (input);

  public static implicit operator UnionPerfU(A26 _) => new (_);
  public static UnionPerfU FromA26(A26 input) => new (input);

  public static implicit operator UnionPerfU(A27 _) => new (_);
  public static UnionPerfU FromA27(A27 input) => new (input);

  public static implicit operator UnionPerfU(A28 _) => new (_);
  public static UnionPerfU FromA28(A28 input) => new (input);

  public static implicit operator UnionPerfU(A29 _) => new (_);
  public static UnionPerfU FromA29(A29 input) => new (input);

  public static implicit operator UnionPerfU(A30 _) => new (_);
  public static UnionPerfU FromA30(A30 input) => new (input);

  public static implicit operator UnionPerfU(A31 _) => new (_);
  public static UnionPerfU FromA31(A31 input) => new (input);

  public static implicit operator UnionPerfU(A32 _) => new (_);
  public static UnionPerfU FromA32(A32 input) => new (input);

  public static implicit operator UnionPerfU(A33 _) => new (_);
  public static UnionPerfU FromA33(A33 input) => new (input);

  public static implicit operator UnionPerfU(A34 _) => new (_);
  public static UnionPerfU FromA34(A34 input) => new (input);

  public static implicit operator UnionPerfU(A35 _) => new (_);
  public static UnionPerfU FromA35(A35 input) => new (input);

  public static implicit operator UnionPerfU(A36 _) => new (_);
  public static UnionPerfU FromA36(A36 input) => new (input);

  public static implicit operator UnionPerfU(A37 _) => new (_);
  public static UnionPerfU FromA37(A37 input) => new (input);

  public static implicit operator UnionPerfU(A38 _) => new (_);
  public static UnionPerfU FromA38(A38 input) => new (input);

  public static implicit operator UnionPerfU(A39 _) => new (_);
  public static UnionPerfU FromA39(A39 input) => new (input);

  public static implicit operator UnionPerfU(A40 _) => new (_);
  public static UnionPerfU FromA40(A40 input) => new (input);

  public static implicit operator UnionPerfU(A41 _) => new (_);
  public static UnionPerfU FromA41(A41 input) => new (input);

  public static implicit operator UnionPerfU(A42 _) => new (_);
  public static UnionPerfU FromA42(A42 input) => new (input);

  public static implicit operator UnionPerfU(A43 _) => new (_);
  public static UnionPerfU FromA43(A43 input) => new (input);

  public static implicit operator UnionPerfU(A44 _) => new (_);
  public static UnionPerfU FromA44(A44 input) => new (input);

  public static implicit operator UnionPerfU(A45 _) => new (_);
  public static UnionPerfU FromA45(A45 input) => new (input);

  public static implicit operator UnionPerfU(A46 _) => new (_);
  public static UnionPerfU FromA46(A46 input) => new (input);

  public static implicit operator UnionPerfU(A47 _) => new (_);
  public static UnionPerfU FromA47(A47 input) => new (input);

  public static implicit operator UnionPerfU(A48 _) => new (_);
  public static UnionPerfU FromA48(A48 input) => new (input);

  public static implicit operator UnionPerfU(A49 _) => new (_);
  public static UnionPerfU FromA49(A49 input) => new (input);

  public static implicit operator UnionPerfU(A50 _) => new (_);
  public static UnionPerfU FromA50(A50 input) => new (input);

  #endregion
  #region Internal Use
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  internal static void __EncodeInto(UnionPerfU record, ref global::Bebop.Runtime.BebopWriter writer) {
    var pos = writer.ReserveRecordLength();
    writer.WriteByte(record.Discriminator);
    var start = writer.Length;
    switch (record.Discriminator) {
      case 1: A1.__EncodeInto(record.AsA1, ref writer); break;
      case 2: A2.__EncodeInto(record.AsA2, ref writer); break;
      case 3: A3.__EncodeInto(record.AsA3, ref writer); break;
      case 4: A4.__EncodeInto(record.AsA4, ref writer); break;
      case 5: A5.__EncodeInto(record.AsA5, ref writer); break;
      case 6: A6.__EncodeInto(record.AsA6, ref writer); break;
      case 7: A7.__EncodeInto(record.AsA7, ref writer); break;
      case 8: A8.__EncodeInto(record.AsA8, ref writer); break;
      case 9: A9.__EncodeInto(record.AsA9, ref writer); break;
      case 10: A10.__EncodeInto(record.AsA10, ref writer); break;
      case 11: A11.__EncodeInto(record.AsA11, ref writer); break;
      case 12: A12.__EncodeInto(record.AsA12, ref writer); break;
      case 13: A13.__EncodeInto(record.AsA13, ref writer); break;
      case 14: A14.__EncodeInto(record.AsA14, ref writer); break;
      case 15: A15.__EncodeInto(record.AsA15, ref writer); break;
      case 16: A16.__EncodeInto(record.AsA16, ref writer); break;
      case 17: A17.__EncodeInto(record.AsA17, ref writer); break;
      case 18: A18.__EncodeInto(record.AsA18, ref writer); break;
      case 19: A19.__EncodeInto(record.AsA19, ref writer); break;
      case 20: A20.__EncodeInto(record.AsA20, ref writer); break;
      case 21: A21.__EncodeInto(record.AsA21, ref writer); break;
      case 22: A22.__EncodeInto(record.AsA22, ref writer); break;
      case 23: A23.__EncodeInto(record.AsA23, ref writer); break;
      case 24: A24.__EncodeInto(record.AsA24, ref writer); break;
      case 25: A25.__EncodeInto(record.AsA25, ref writer); break;
      case 26: A26.__EncodeInto(record.AsA26, ref writer); break;
      case 27: A27.__EncodeInto(record.AsA27, ref writer); break;
      case 28: A28.__EncodeInto(record.AsA28, ref writer); break;
      case 29: A29.__EncodeInto(record.AsA29, ref writer); break;
      case 30: A30.__EncodeInto(record.AsA30, ref writer); break;
      case 31: A31.__EncodeInto(record.AsA31, ref writer); break;
      case 32: A32.__EncodeInto(record.AsA32, ref writer); break;
      case 33: A33.__EncodeInto(record.AsA33, ref writer); break;
      case 34: A34.__EncodeInto(record.AsA34, ref writer); break;
      case 35: A35.__EncodeInto(record.AsA35, ref writer); break;
      case 36: A36.__EncodeInto(record.AsA36, ref writer); break;
      case 37: A37.__EncodeInto(record.AsA37, ref writer); break;
      case 38: A38.__EncodeInto(record.AsA38, ref writer); break;
      case 39: A39.__EncodeInto(record.AsA39, ref writer); break;
      case 40: A40.__EncodeInto(record.AsA40, ref writer); break;
      case 41: A41.__EncodeInto(record.AsA41, ref writer); break;
      case 42: A42.__EncodeInto(record.AsA42, ref writer); break;
      case 43: A43.__EncodeInto(record.AsA43, ref writer); break;
      case 44: A44.__EncodeInto(record.AsA44, ref writer); break;
      case 45: A45.__EncodeInto(record.AsA45, ref writer); break;
      case 46: A46.__EncodeInto(record.AsA46, ref writer); break;
      case 47: A47.__EncodeInto(record.AsA47, ref writer); break;
      case 48: A48.__EncodeInto(record.AsA48, ref writer); break;
      case 49: A49.__EncodeInto(record.AsA49, ref writer); break;
      case 50: A50.__EncodeInto(record.AsA50, ref writer); break;
    }
    var end = writer.Length;
    writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  internal static UnionPerfU __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    var length = reader.ReadRecordLength();
    var end = unchecked((int) (reader.Position + length + 1));
    switch (reader.ReadByte()) {
      case 1:
          return A1.__DecodeFrom(ref reader);
      case 2:
          return A2.__DecodeFrom(ref reader);
      case 3:
          return A3.__DecodeFrom(ref reader);
      case 4:
          return A4.__DecodeFrom(ref reader);
      case 5:
          return A5.__DecodeFrom(ref reader);
      case 6:
          return A6.__DecodeFrom(ref reader);
      case 7:
          return A7.__DecodeFrom(ref reader);
      case 8:
          return A8.__DecodeFrom(ref reader);
      case 9:
          return A9.__DecodeFrom(ref reader);
      case 10:
          return A10.__DecodeFrom(ref reader);
      case 11:
          return A11.__DecodeFrom(ref reader);
      case 12:
          return A12.__DecodeFrom(ref reader);
      case 13:
          return A13.__DecodeFrom(ref reader);
      case 14:
          return A14.__DecodeFrom(ref reader);
      case 15:
          return A15.__DecodeFrom(ref reader);
      case 16:
          return A16.__DecodeFrom(ref reader);
      case 17:
          return A17.__DecodeFrom(ref reader);
      case 18:
          return A18.__DecodeFrom(ref reader);
      case 19:
          return A19.__DecodeFrom(ref reader);
      case 20:
          return A20.__DecodeFrom(ref reader);
      case 21:
          return A21.__DecodeFrom(ref reader);
      case 22:
          return A22.__DecodeFrom(ref reader);
      case 23:
          return A23.__DecodeFrom(ref reader);
      case 24:
          return A24.__DecodeFrom(ref reader);
      case 25:
          return A25.__DecodeFrom(ref reader);
      case 26:
          return A26.__DecodeFrom(ref reader);
      case 27:
          return A27.__DecodeFrom(ref reader);
      case 28:
          return A28.__DecodeFrom(ref reader);
      case 29:
          return A29.__DecodeFrom(ref reader);
      case 30:
          return A30.__DecodeFrom(ref reader);
      case 31:
          return A31.__DecodeFrom(ref reader);
      case 32:
          return A32.__DecodeFrom(ref reader);
      case 33:
          return A33.__DecodeFrom(ref reader);
      case 34:
          return A34.__DecodeFrom(ref reader);
      case 35:
          return A35.__DecodeFrom(ref reader);
      case 36:
          return A36.__DecodeFrom(ref reader);
      case 37:
          return A37.__DecodeFrom(ref reader);
      case 38:
          return A38.__DecodeFrom(ref reader);
      case 39:
          return A39.__DecodeFrom(ref reader);
      case 40:
          return A40.__DecodeFrom(ref reader);
      case 41:
          return A41.__DecodeFrom(ref reader);
      case 42:
          return A42.__DecodeFrom(ref reader);
      case 43:
          return A43.__DecodeFrom(ref reader);
      case 44:
          return A44.__DecodeFrom(ref reader);
      case 45:
          return A45.__DecodeFrom(ref reader);
      case 46:
          return A46.__DecodeFrom(ref reader);
      case 47:
          return A47.__DecodeFrom(ref reader);
      case 48:
          return A48.__DecodeFrom(ref reader);
      case 49:
          return A49.__DecodeFrom(ref reader);
      case 50:
          return A50.__DecodeFrom(ref reader);
      default:
          reader.Position = end;
          return null;
      }
  }

  #endregion
}

/// <inheritdoc />
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
public readonly struct UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> where T0: A1 where T1: A2 where T2: A3 where T3: A4 where T4: A5 where T5: A6 where T6: A7 where T7: A8 where T8: A9 where T9: A10 where T10: A11 where T11: A12 where T12: A13 where T13: A14 where T14: A15 where T15: A16 where T16: A17 where T17: A18 where T18: A19 where T19: A20 where T20: A21 where T21: A22 where T22: A23 where T23: A24 where T24: A25 where T25: A26 where T26: A27 where T27: A28 where T28: A29 where T29: A30 where T30: A31 where T31: A32 where T32: A33 where T33: A34 where T34: A35 where T35: A36 where T36: A37 where T37: A38 where T38: A39 where T39: A40 where T40: A41 where T41: A42 where T42: A43 where T43: A44 where T44: A45 where T45: A46 where T46: A47 where T47: A48 where T48: A49 where T49: A50 {

  internal readonly T0 _value0;
  internal readonly T1 _value1;
  internal readonly T2 _value2;
  internal readonly T3 _value3;
  internal readonly T4 _value4;
  internal readonly T5 _value5;
  internal readonly T6 _value6;
  internal readonly T7 _value7;
  internal readonly T8 _value8;
  internal readonly T9 _value9;
  internal readonly T10 _value10;
  internal readonly T11 _value11;
  internal readonly T12 _value12;
  internal readonly T13 _value13;
  internal readonly T14 _value14;
  internal readonly T15 _value15;
  internal readonly T16 _value16;
  internal readonly T17 _value17;
  internal readonly T18 _value18;
  internal readonly T19 _value19;
  internal readonly T20 _value20;
  internal readonly T21 _value21;
  internal readonly T22 _value22;
  internal readonly T23 _value23;
  internal readonly T24 _value24;
  internal readonly T25 _value25;
  internal readonly T26 _value26;
  internal readonly T27 _value27;
  internal readonly T28 _value28;
  internal readonly T29 _value29;
  internal readonly T30 _value30;
  internal readonly T31 _value31;
  internal readonly T32 _value32;
  internal readonly T33 _value33;
  internal readonly T34 _value34;
  internal readonly T35 _value35;
  internal readonly T36 _value36;
  internal readonly T37 _value37;
  internal readonly T38 _value38;
  internal readonly T39 _value39;
  internal readonly T40 _value40;
  internal readonly T41 _value41;
  internal readonly T42 _value42;
  internal readonly T43 _value43;
  internal readonly T44 _value44;
  internal readonly T45 _value45;
  internal readonly T46 _value46;
  internal readonly T47 _value47;
  internal readonly T48 _value48;
  internal readonly T49 _value49;
  private readonly byte _discriminator;

  private UnionPerfUUnion(byte discriminator, T0 value0 = default, T1 value1 = default, T2 value2 = default, T3 value3 = default, T4 value4 = default, T5 value5 = default, T6 value6 = default, T7 value7 = default, T8 value8 = default, T9 value9 = default, T10 value10 = default, T11 value11 = default, T12 value12 = default, T13 value13 = default, T14 value14 = default, T15 value15 = default, T16 value16 = default, T17 value17 = default, T18 value18 = default, T19 value19 = default, T20 value20 = default, T21 value21 = default, T22 value22 = default, T23 value23 = default, T24 value24 = default, T25 value25 = default, T26 value26 = default, T27 value27 = default, T28 value28 = default, T29 value29 = default, T30 value30 = default, T31 value31 = default, T32 value32 = default, T33 value33 = default, T34 value34 = default, T35 value35 = default, T36 value36 = default, T37 value37 = default, T38 value38 = default, T39 value39 = default, T40 value40 = default, T41 value41 = default, T42 value42 = default, T43 value43 = default, T44 value44 = default, T45 value45 = default, T46 value46 = default, T47 value47 = default, T48 value48 = default, T49 value49 = default) {
      _discriminator = discriminator;
      _value0 = value0;
      _value1 = value1;
      _value2 = value2;
      _value3 = value3;
      _value4 = value4;
      _value5 = value5;
      _value6 = value6;
      _value7 = value7;
      _value8 = value8;
      _value9 = value9;
      _value10 = value10;
      _value11 = value11;
      _value12 = value12;
      _value13 = value13;
      _value14 = value14;
      _value15 = value15;
      _value16 = value16;
      _value17 = value17;
      _value18 = value18;
      _value19 = value19;
      _value20 = value20;
      _value21 = value21;
      _value22 = value22;
      _value23 = value23;
      _value24 = value24;
      _value25 = value25;
      _value26 = value26;
      _value27 = value27;
      _value28 = value28;
      _value29 = value29;
      _value30 = value30;
      _value31 = value31;
      _value32 = value32;
      _value33 = value33;
      _value34 = value34;
      _value35 = value35;
      _value36 = value36;
      _value37 = value37;
      _value38 = value38;
      _value39 = value39;
      _value40 = value40;
      _value41 = value41;
      _value42 = value42;
      _value43 = value43;
      _value44 = value44;
      _value45 = value45;
      _value46 = value46;
      _value47 = value47;
      _value48 = value48;
      _value49 = value49;
  }

  public global::Bebop.Runtime.BaseBebopRecord Value => _discriminator switch {
      1 => _value0,
      2 => _value1,
      3 => _value2,
      4 => _value3,
      5 => _value4,
      6 => _value5,
      7 => _value6,
      8 => _value7,
      9 => _value8,
      10 => _value9,
      11 => _value10,
      12 => _value11,
      13 => _value12,
      14 => _value13,
      15 => _value14,
      16 => _value15,
      17 => _value16,
      18 => _value17,
      19 => _value18,
      20 => _value19,
      21 => _value20,
      22 => _value21,
      23 => _value22,
      24 => _value23,
      25 => _value24,
      26 => _value25,
      27 => _value26,
      28 => _value27,
      29 => _value28,
      30 => _value29,
      31 => _value30,
      32 => _value31,
      33 => _value32,
      34 => _value33,
      35 => _value34,
      36 => _value35,
      37 => _value36,
      38 => _value37,
      39 => _value38,
      40 => _value39,
      41 => _value40,
      42 => _value41,
      43 => _value42,
      44 => _value43,
      45 => _value44,
      46 => _value45,
      47 => _value46,
      48 => _value47,
      49 => _value48,
      50 => _value49,
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  public byte Discriminator => _discriminator;

  #region IsAs
  public bool IsA1 => _discriminator is 1;
  public T0 AsA1 => _discriminator is 1 ? _value0 : throw new global::System.NotImplementedException($"Cannot return as A1 as result is T0");

  public bool IsA2 => _discriminator is 2;
  public T1 AsA2 => _discriminator is 2 ? _value1 : throw new global::System.NotImplementedException($"Cannot return as A2 as result is T1");

  public bool IsA3 => _discriminator is 3;
  public T2 AsA3 => _discriminator is 3 ? _value2 : throw new global::System.NotImplementedException($"Cannot return as A3 as result is T2");

  public bool IsA4 => _discriminator is 4;
  public T3 AsA4 => _discriminator is 4 ? _value3 : throw new global::System.NotImplementedException($"Cannot return as A4 as result is T3");

  public bool IsA5 => _discriminator is 5;
  public T4 AsA5 => _discriminator is 5 ? _value4 : throw new global::System.NotImplementedException($"Cannot return as A5 as result is T4");

  public bool IsA6 => _discriminator is 6;
  public T5 AsA6 => _discriminator is 6 ? _value5 : throw new global::System.NotImplementedException($"Cannot return as A6 as result is T5");

  public bool IsA7 => _discriminator is 7;
  public T6 AsA7 => _discriminator is 7 ? _value6 : throw new global::System.NotImplementedException($"Cannot return as A7 as result is T6");

  public bool IsA8 => _discriminator is 8;
  public T7 AsA8 => _discriminator is 8 ? _value7 : throw new global::System.NotImplementedException($"Cannot return as A8 as result is T7");

  public bool IsA9 => _discriminator is 9;
  public T8 AsA9 => _discriminator is 9 ? _value8 : throw new global::System.NotImplementedException($"Cannot return as A9 as result is T8");

  public bool IsA10 => _discriminator is 10;
  public T9 AsA10 => _discriminator is 10 ? _value9 : throw new global::System.NotImplementedException($"Cannot return as A10 as result is T9");

  public bool IsA11 => _discriminator is 11;
  public T10 AsA11 => _discriminator is 11 ? _value10 : throw new global::System.NotImplementedException($"Cannot return as A11 as result is T10");

  public bool IsA12 => _discriminator is 12;
  public T11 AsA12 => _discriminator is 12 ? _value11 : throw new global::System.NotImplementedException($"Cannot return as A12 as result is T11");

  public bool IsA13 => _discriminator is 13;
  public T12 AsA13 => _discriminator is 13 ? _value12 : throw new global::System.NotImplementedException($"Cannot return as A13 as result is T12");

  public bool IsA14 => _discriminator is 14;
  public T13 AsA14 => _discriminator is 14 ? _value13 : throw new global::System.NotImplementedException($"Cannot return as A14 as result is T13");

  public bool IsA15 => _discriminator is 15;
  public T14 AsA15 => _discriminator is 15 ? _value14 : throw new global::System.NotImplementedException($"Cannot return as A15 as result is T14");

  public bool IsA16 => _discriminator is 16;
  public T15 AsA16 => _discriminator is 16 ? _value15 : throw new global::System.NotImplementedException($"Cannot return as A16 as result is T15");

  public bool IsA17 => _discriminator is 17;
  public T16 AsA17 => _discriminator is 17 ? _value16 : throw new global::System.NotImplementedException($"Cannot return as A17 as result is T16");

  public bool IsA18 => _discriminator is 18;
  public T17 AsA18 => _discriminator is 18 ? _value17 : throw new global::System.NotImplementedException($"Cannot return as A18 as result is T17");

  public bool IsA19 => _discriminator is 19;
  public T18 AsA19 => _discriminator is 19 ? _value18 : throw new global::System.NotImplementedException($"Cannot return as A19 as result is T18");

  public bool IsA20 => _discriminator is 20;
  public T19 AsA20 => _discriminator is 20 ? _value19 : throw new global::System.NotImplementedException($"Cannot return as A20 as result is T19");

  public bool IsA21 => _discriminator is 21;
  public T20 AsA21 => _discriminator is 21 ? _value20 : throw new global::System.NotImplementedException($"Cannot return as A21 as result is T20");

  public bool IsA22 => _discriminator is 22;
  public T21 AsA22 => _discriminator is 22 ? _value21 : throw new global::System.NotImplementedException($"Cannot return as A22 as result is T21");

  public bool IsA23 => _discriminator is 23;
  public T22 AsA23 => _discriminator is 23 ? _value22 : throw new global::System.NotImplementedException($"Cannot return as A23 as result is T22");

  public bool IsA24 => _discriminator is 24;
  public T23 AsA24 => _discriminator is 24 ? _value23 : throw new global::System.NotImplementedException($"Cannot return as A24 as result is T23");

  public bool IsA25 => _discriminator is 25;
  public T24 AsA25 => _discriminator is 25 ? _value24 : throw new global::System.NotImplementedException($"Cannot return as A25 as result is T24");

  public bool IsA26 => _discriminator is 26;
  public T25 AsA26 => _discriminator is 26 ? _value25 : throw new global::System.NotImplementedException($"Cannot return as A26 as result is T25");

  public bool IsA27 => _discriminator is 27;
  public T26 AsA27 => _discriminator is 27 ? _value26 : throw new global::System.NotImplementedException($"Cannot return as A27 as result is T26");

  public bool IsA28 => _discriminator is 28;
  public T27 AsA28 => _discriminator is 28 ? _value27 : throw new global::System.NotImplementedException($"Cannot return as A28 as result is T27");

  public bool IsA29 => _discriminator is 29;
  public T28 AsA29 => _discriminator is 29 ? _value28 : throw new global::System.NotImplementedException($"Cannot return as A29 as result is T28");

  public bool IsA30 => _discriminator is 30;
  public T29 AsA30 => _discriminator is 30 ? _value29 : throw new global::System.NotImplementedException($"Cannot return as A30 as result is T29");

  public bool IsA31 => _discriminator is 31;
  public T30 AsA31 => _discriminator is 31 ? _value30 : throw new global::System.NotImplementedException($"Cannot return as A31 as result is T30");

  public bool IsA32 => _discriminator is 32;
  public T31 AsA32 => _discriminator is 32 ? _value31 : throw new global::System.NotImplementedException($"Cannot return as A32 as result is T31");

  public bool IsA33 => _discriminator is 33;
  public T32 AsA33 => _discriminator is 33 ? _value32 : throw new global::System.NotImplementedException($"Cannot return as A33 as result is T32");

  public bool IsA34 => _discriminator is 34;
  public T33 AsA34 => _discriminator is 34 ? _value33 : throw new global::System.NotImplementedException($"Cannot return as A34 as result is T33");

  public bool IsA35 => _discriminator is 35;
  public T34 AsA35 => _discriminator is 35 ? _value34 : throw new global::System.NotImplementedException($"Cannot return as A35 as result is T34");

  public bool IsA36 => _discriminator is 36;
  public T35 AsA36 => _discriminator is 36 ? _value35 : throw new global::System.NotImplementedException($"Cannot return as A36 as result is T35");

  public bool IsA37 => _discriminator is 37;
  public T36 AsA37 => _discriminator is 37 ? _value36 : throw new global::System.NotImplementedException($"Cannot return as A37 as result is T36");

  public bool IsA38 => _discriminator is 38;
  public T37 AsA38 => _discriminator is 38 ? _value37 : throw new global::System.NotImplementedException($"Cannot return as A38 as result is T37");

  public bool IsA39 => _discriminator is 39;
  public T38 AsA39 => _discriminator is 39 ? _value38 : throw new global::System.NotImplementedException($"Cannot return as A39 as result is T38");

  public bool IsA40 => _discriminator is 40;
  public T39 AsA40 => _discriminator is 40 ? _value39 : throw new global::System.NotImplementedException($"Cannot return as A40 as result is T39");

  public bool IsA41 => _discriminator is 41;
  public T40 AsA41 => _discriminator is 41 ? _value40 : throw new global::System.NotImplementedException($"Cannot return as A41 as result is T40");

  public bool IsA42 => _discriminator is 42;
  public T41 AsA42 => _discriminator is 42 ? _value41 : throw new global::System.NotImplementedException($"Cannot return as A42 as result is T41");

  public bool IsA43 => _discriminator is 43;
  public T42 AsA43 => _discriminator is 43 ? _value42 : throw new global::System.NotImplementedException($"Cannot return as A43 as result is T42");

  public bool IsA44 => _discriminator is 44;
  public T43 AsA44 => _discriminator is 44 ? _value43 : throw new global::System.NotImplementedException($"Cannot return as A44 as result is T43");

  public bool IsA45 => _discriminator is 45;
  public T44 AsA45 => _discriminator is 45 ? _value44 : throw new global::System.NotImplementedException($"Cannot return as A45 as result is T44");

  public bool IsA46 => _discriminator is 46;
  public T45 AsA46 => _discriminator is 46 ? _value45 : throw new global::System.NotImplementedException($"Cannot return as A46 as result is T45");

  public bool IsA47 => _discriminator is 47;
  public T46 AsA47 => _discriminator is 47 ? _value46 : throw new global::System.NotImplementedException($"Cannot return as A47 as result is T46");

  public bool IsA48 => _discriminator is 48;
  public T47 AsA48 => _discriminator is 48 ? _value47 : throw new global::System.NotImplementedException($"Cannot return as A48 as result is T47");

  public bool IsA49 => _discriminator is 49;
  public T48 AsA49 => _discriminator is 49 ? _value48 : throw new global::System.NotImplementedException($"Cannot return as A49 as result is T48");

  public bool IsA50 => _discriminator is 50;
  public T49 AsA50 => _discriminator is 50 ? _value49 : throw new global::System.NotImplementedException($"Cannot return as A50 as result is T49");

  #endregion
  #region Implicit Overrides
  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T0 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(1, value0: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA1(T0 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T1 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(2, value1: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA2(T1 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T2 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(3, value2: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA3(T2 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T3 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(4, value3: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA4(T3 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T4 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(5, value4: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA5(T4 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T5 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(6, value5: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA6(T5 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T6 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(7, value6: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA7(T6 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T7 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(8, value7: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA8(T7 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T8 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(9, value8: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA9(T8 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T9 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(10, value9: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA10(T9 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T10 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(11, value10: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA11(T10 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T11 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(12, value11: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA12(T11 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T12 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(13, value12: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA13(T12 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T13 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(14, value13: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA14(T13 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T14 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(15, value14: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA15(T14 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T15 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(16, value15: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA16(T15 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T16 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(17, value16: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA17(T16 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T17 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(18, value17: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA18(T17 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T18 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(19, value18: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA19(T18 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T19 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(20, value19: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA20(T19 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T20 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(21, value20: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA21(T20 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T21 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(22, value21: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA22(T21 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T22 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(23, value22: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA23(T22 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T23 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(24, value23: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA24(T23 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T24 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(25, value24: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA25(T24 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T25 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(26, value25: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA26(T25 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T26 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(27, value26: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA27(T26 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T27 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(28, value27: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA28(T27 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T28 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(29, value28: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA29(T28 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T29 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(30, value29: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA30(T29 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T30 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(31, value30: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA31(T30 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T31 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(32, value31: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA32(T31 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T32 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(33, value32: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA33(T32 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T33 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(34, value33: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA34(T33 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T34 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(35, value34: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA35(T34 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T35 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(36, value35: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA36(T35 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T36 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(37, value36: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA37(T36 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T37 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(38, value37: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA38(T37 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T38 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(39, value38: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA39(T38 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T39 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(40, value39: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA40(T39 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T40 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(41, value40: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA41(T40 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T41 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(42, value41: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA42(T41 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T42 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(43, value42: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA43(T42 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T43 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(44, value43: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA44(T43 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T44 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(45, value44: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA45(T44 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T45 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(46, value45: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA46(T45 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T46 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(47, value46: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA47(T46 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T47 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(48, value47: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA48(T47 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T48 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(49, value48: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA49(T48 input) => input;

  public static implicit operator UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(T49 t) => new  UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>(50, value49: t);
  public static UnionPerfUUnion<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> FromBaseA50(T49 input) => input;

  #endregion

  public void Switch(global::System.Action<T0> f0, global::System.Action<T1> f1, global::System.Action<T2> f2, global::System.Action<T3> f3, global::System.Action<T4> f4, global::System.Action<T5> f5, global::System.Action<T6> f6, global::System.Action<T7> f7, global::System.Action<T8> f8, global::System.Action<T9> f9, global::System.Action<T10> f10, global::System.Action<T11> f11, global::System.Action<T12> f12, global::System.Action<T13> f13, global::System.Action<T14> f14, global::System.Action<T15> f15, global::System.Action<T16> f16, global::System.Action<T17> f17, global::System.Action<T18> f18, global::System.Action<T19> f19, global::System.Action<T20> f20, global::System.Action<T21> f21, global::System.Action<T22> f22, global::System.Action<T23> f23, global::System.Action<T24> f24, global::System.Action<T25> f25, global::System.Action<T26> f26, global::System.Action<T27> f27, global::System.Action<T28> f28, global::System.Action<T29> f29, global::System.Action<T30> f30, global::System.Action<T31> f31, global::System.Action<T32> f32, global::System.Action<T33> f33, global::System.Action<T34> f34, global::System.Action<T35> f35, global::System.Action<T36> f36, global::System.Action<T37> f37, global::System.Action<T38> f38, global::System.Action<T39> f39, global::System.Action<T40> f40, global::System.Action<T41> f41, global::System.Action<T42> f42, global::System.Action<T43> f43, global::System.Action<T44> f44, global::System.Action<T45> f45, global::System.Action<T46> f46, global::System.Action<T47> f47, global::System.Action<T48> f48, global::System.Action<T49> f49) {
      if (_discriminator is 1 && f0 is not null) {
        f0(_value0);
        return;
      }
      if (_discriminator is 2 && f1 is not null) {
        f1(_value1);
        return;
      }
      if (_discriminator is 3 && f2 is not null) {
        f2(_value2);
        return;
      }
      if (_discriminator is 4 && f3 is not null) {
        f3(_value3);
        return;
      }
      if (_discriminator is 5 && f4 is not null) {
        f4(_value4);
        return;
      }
      if (_discriminator is 6 && f5 is not null) {
        f5(_value5);
        return;
      }
      if (_discriminator is 7 && f6 is not null) {
        f6(_value6);
        return;
      }
      if (_discriminator is 8 && f7 is not null) {
        f7(_value7);
        return;
      }
      if (_discriminator is 9 && f8 is not null) {
        f8(_value8);
        return;
      }
      if (_discriminator is 10 && f9 is not null) {
        f9(_value9);
        return;
      }
      if (_discriminator is 11 && f10 is not null) {
        f10(_value10);
        return;
      }
      if (_discriminator is 12 && f11 is not null) {
        f11(_value11);
        return;
      }
      if (_discriminator is 13 && f12 is not null) {
        f12(_value12);
        return;
      }
      if (_discriminator is 14 && f13 is not null) {
        f13(_value13);
        return;
      }
      if (_discriminator is 15 && f14 is not null) {
        f14(_value14);
        return;
      }
      if (_discriminator is 16 && f15 is not null) {
        f15(_value15);
        return;
      }
      if (_discriminator is 17 && f16 is not null) {
        f16(_value16);
        return;
      }
      if (_discriminator is 18 && f17 is not null) {
        f17(_value17);
        return;
      }
      if (_discriminator is 19 && f18 is not null) {
        f18(_value18);
        return;
      }
      if (_discriminator is 20 && f19 is not null) {
        f19(_value19);
        return;
      }
      if (_discriminator is 21 && f20 is not null) {
        f20(_value20);
        return;
      }
      if (_discriminator is 22 && f21 is not null) {
        f21(_value21);
        return;
      }
      if (_discriminator is 23 && f22 is not null) {
        f22(_value22);
        return;
      }
      if (_discriminator is 24 && f23 is not null) {
        f23(_value23);
        return;
      }
      if (_discriminator is 25 && f24 is not null) {
        f24(_value24);
        return;
      }
      if (_discriminator is 26 && f25 is not null) {
        f25(_value25);
        return;
      }
      if (_discriminator is 27 && f26 is not null) {
        f26(_value26);
        return;
      }
      if (_discriminator is 28 && f27 is not null) {
        f27(_value27);
        return;
      }
      if (_discriminator is 29 && f28 is not null) {
        f28(_value28);
        return;
      }
      if (_discriminator is 30 && f29 is not null) {
        f29(_value29);
        return;
      }
      if (_discriminator is 31 && f30 is not null) {
        f30(_value30);
        return;
      }
      if (_discriminator is 32 && f31 is not null) {
        f31(_value31);
        return;
      }
      if (_discriminator is 33 && f32 is not null) {
        f32(_value32);
        return;
      }
      if (_discriminator is 34 && f33 is not null) {
        f33(_value33);
        return;
      }
      if (_discriminator is 35 && f34 is not null) {
        f34(_value34);
        return;
      }
      if (_discriminator is 36 && f35 is not null) {
        f35(_value35);
        return;
      }
      if (_discriminator is 37 && f36 is not null) {
        f36(_value36);
        return;
      }
      if (_discriminator is 38 && f37 is not null) {
        f37(_value37);
        return;
      }
      if (_discriminator is 39 && f38 is not null) {
        f38(_value38);
        return;
      }
      if (_discriminator is 40 && f39 is not null) {
        f39(_value39);
        return;
      }
      if (_discriminator is 41 && f40 is not null) {
        f40(_value40);
        return;
      }
      if (_discriminator is 42 && f41 is not null) {
        f41(_value41);
        return;
      }
      if (_discriminator is 43 && f42 is not null) {
        f42(_value42);
        return;
      }
      if (_discriminator is 44 && f43 is not null) {
        f43(_value43);
        return;
      }
      if (_discriminator is 45 && f44 is not null) {
        f44(_value44);
        return;
      }
      if (_discriminator is 46 && f45 is not null) {
        f45(_value45);
        return;
      }
      if (_discriminator is 47 && f46 is not null) {
        f46(_value46);
        return;
      }
      if (_discriminator is 48 && f47 is not null) {
        f47(_value47);
        return;
      }
      if (_discriminator is 49 && f48 is not null) {
        f48(_value48);
        return;
      }
      if (_discriminator is 50 && f49 is not null) {
        f49(_value49);
        return;
      }
      throw new global::Bebop.Exceptions.BebopRuntimeException();
  }

  public TResult Match<TResult>(global::System.Func<T0, TResult> f0, global::System.Func<T1, TResult> f1, global::System.Func<T2, TResult> f2, global::System.Func<T3, TResult> f3, global::System.Func<T4, TResult> f4, global::System.Func<T5, TResult> f5, global::System.Func<T6, TResult> f6, global::System.Func<T7, TResult> f7, global::System.Func<T8, TResult> f8, global::System.Func<T9, TResult> f9, global::System.Func<T10, TResult> f10, global::System.Func<T11, TResult> f11, global::System.Func<T12, TResult> f12, global::System.Func<T13, TResult> f13, global::System.Func<T14, TResult> f14, global::System.Func<T15, TResult> f15, global::System.Func<T16, TResult> f16, global::System.Func<T17, TResult> f17, global::System.Func<T18, TResult> f18, global::System.Func<T19, TResult> f19, global::System.Func<T20, TResult> f20, global::System.Func<T21, TResult> f21, global::System.Func<T22, TResult> f22, global::System.Func<T23, TResult> f23, global::System.Func<T24, TResult> f24, global::System.Func<T25, TResult> f25, global::System.Func<T26, TResult> f26, global::System.Func<T27, TResult> f27, global::System.Func<T28, TResult> f28, global::System.Func<T29, TResult> f29, global::System.Func<T30, TResult> f30, global::System.Func<T31, TResult> f31, global::System.Func<T32, TResult> f32, global::System.Func<T33, TResult> f33, global::System.Func<T34, TResult> f34, global::System.Func<T35, TResult> f35, global::System.Func<T36, TResult> f36, global::System.Func<T37, TResult> f37, global::System.Func<T38, TResult> f38, global::System.Func<T39, TResult> f39, global::System.Func<T40, TResult> f40, global::System.Func<T41, TResult> f41, global::System.Func<T42, TResult> f42, global::System.Func<T43, TResult> f43, global::System.Func<T44, TResult> f44, global::System.Func<T45, TResult> f45, global::System.Func<T46, TResult> f46, global::System.Func<T47, TResult> f47, global::System.Func<T48, TResult> f48, global::System.Func<T49, TResult> f49) => _discriminator switch {
      1 when f0 is not null => f0(_value0),
      2 when f1 is not null => f1(_value1),
      3 when f2 is not null => f2(_value2),
      4 when f3 is not null => f3(_value3),
      5 when f4 is not null => f4(_value4),
      6 when f5 is not null => f5(_value5),
      7 when f6 is not null => f6(_value6),
      8 when f7 is not null => f7(_value7),
      9 when f8 is not null => f8(_value8),
      10 when f9 is not null => f9(_value9),
      11 when f10 is not null => f10(_value10),
      12 when f11 is not null => f11(_value11),
      13 when f12 is not null => f12(_value12),
      14 when f13 is not null => f13(_value13),
      15 when f14 is not null => f14(_value14),
      16 when f15 is not null => f15(_value15),
      17 when f16 is not null => f16(_value16),
      18 when f17 is not null => f17(_value17),
      19 when f18 is not null => f18(_value18),
      20 when f19 is not null => f19(_value19),
      21 when f20 is not null => f20(_value20),
      22 when f21 is not null => f21(_value21),
      23 when f22 is not null => f22(_value22),
      24 when f23 is not null => f23(_value23),
      25 when f24 is not null => f24(_value24),
      26 when f25 is not null => f25(_value25),
      27 when f26 is not null => f26(_value26),
      28 when f27 is not null => f27(_value27),
      29 when f28 is not null => f28(_value28),
      30 when f29 is not null => f29(_value29),
      31 when f30 is not null => f30(_value30),
      32 when f31 is not null => f31(_value31),
      33 when f32 is not null => f32(_value32),
      34 when f33 is not null => f33(_value33),
      35 when f34 is not null => f34(_value34),
      36 when f35 is not null => f35(_value35),
      37 when f36 is not null => f36(_value36),
      38 when f37 is not null => f37(_value37),
      39 when f38 is not null => f38(_value38),
      40 when f39 is not null => f39(_value39),
      41 when f40 is not null => f40(_value40),
      42 when f41 is not null => f41(_value41),
      43 when f42 is not null => f42(_value42),
      44 when f43 is not null => f43(_value43),
      45 when f44 is not null => f44(_value44),
      46 when f45 is not null => f45(_value45),
      47 when f46 is not null => f46(_value46),
      48 when f47 is not null => f47(_value47),
      49 when f48 is not null => f48(_value48),
      50 when f49 is not null => f49(_value49),
      _ => throw new global::Bebop.Exceptions.BebopRuntimeException()
  };

  #region Equality
  private bool Equals(BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> other) => _discriminator == other.Discriminator && _discriminator switch {
      1 => Equals(_value0, other._value0),
      2 => Equals(_value1, other._value1),
      3 => Equals(_value2, other._value2),
      4 => Equals(_value3, other._value3),
      5 => Equals(_value4, other._value4),
      6 => Equals(_value5, other._value5),
      7 => Equals(_value6, other._value6),
      8 => Equals(_value7, other._value7),
      9 => Equals(_value8, other._value8),
      10 => Equals(_value9, other._value9),
      11 => Equals(_value10, other._value10),
      12 => Equals(_value11, other._value11),
      13 => Equals(_value12, other._value12),
      14 => Equals(_value13, other._value13),
      15 => Equals(_value14, other._value14),
      16 => Equals(_value15, other._value15),
      17 => Equals(_value16, other._value16),
      18 => Equals(_value17, other._value17),
      19 => Equals(_value18, other._value18),
      20 => Equals(_value19, other._value19),
      21 => Equals(_value20, other._value20),
      22 => Equals(_value21, other._value21),
      23 => Equals(_value22, other._value22),
      24 => Equals(_value23, other._value23),
      25 => Equals(_value24, other._value24),
      26 => Equals(_value25, other._value25),
      27 => Equals(_value26, other._value26),
      28 => Equals(_value27, other._value27),
      29 => Equals(_value28, other._value28),
      30 => Equals(_value29, other._value29),
      31 => Equals(_value30, other._value30),
      32 => Equals(_value31, other._value31),
      33 => Equals(_value32, other._value32),
      34 => Equals(_value33, other._value33),
      35 => Equals(_value34, other._value34),
      36 => Equals(_value35, other._value35),
      37 => Equals(_value36, other._value36),
      38 => Equals(_value37, other._value37),
      39 => Equals(_value38, other._value38),
      40 => Equals(_value39, other._value39),
      41 => Equals(_value40, other._value40),
      42 => Equals(_value41, other._value41),
      43 => Equals(_value42, other._value42),
      44 => Equals(_value43, other._value43),
      45 => Equals(_value44, other._value44),
      46 => Equals(_value45, other._value45),
      47 => Equals(_value46, other._value46),
      48 => Equals(_value47, other._value47),
      49 => Equals(_value48, other._value48),
      50 => Equals(_value49, other._value49),
      _ => false
  };

  public override bool Equals(object other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      return other is BaseUnionPerfU<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> o && Equals(o);
  }

  public override int GetHashCode() => (_discriminator switch {
      1 => _value0?.GetHashCode() ?? 0,
      2 => _value1?.GetHashCode() ?? 0,
      3 => _value2?.GetHashCode() ?? 0,
      4 => _value3?.GetHashCode() ?? 0,
      5 => _value4?.GetHashCode() ?? 0,
      6 => _value5?.GetHashCode() ?? 0,
      7 => _value6?.GetHashCode() ?? 0,
      8 => _value7?.GetHashCode() ?? 0,
      9 => _value8?.GetHashCode() ?? 0,
      10 => _value9?.GetHashCode() ?? 0,
      11 => _value10?.GetHashCode() ?? 0,
      12 => _value11?.GetHashCode() ?? 0,
      13 => _value12?.GetHashCode() ?? 0,
      14 => _value13?.GetHashCode() ?? 0,
      15 => _value14?.GetHashCode() ?? 0,
      16 => _value15?.GetHashCode() ?? 0,
      17 => _value16?.GetHashCode() ?? 0,
      18 => _value17?.GetHashCode() ?? 0,
      19 => _value18?.GetHashCode() ?? 0,
      20 => _value19?.GetHashCode() ?? 0,
      21 => _value20?.GetHashCode() ?? 0,
      22 => _value21?.GetHashCode() ?? 0,
      23 => _value22?.GetHashCode() ?? 0,
      24 => _value23?.GetHashCode() ?? 0,
      25 => _value24?.GetHashCode() ?? 0,
      26 => _value25?.GetHashCode() ?? 0,
      27 => _value26?.GetHashCode() ?? 0,
      28 => _value27?.GetHashCode() ?? 0,
      29 => _value28?.GetHashCode() ?? 0,
      30 => _value29?.GetHashCode() ?? 0,
      31 => _value30?.GetHashCode() ?? 0,
      32 => _value31?.GetHashCode() ?? 0,
      33 => _value32?.GetHashCode() ?? 0,
      34 => _value33?.GetHashCode() ?? 0,
      35 => _value34?.GetHashCode() ?? 0,
      36 => _value35?.GetHashCode() ?? 0,
      37 => _value36?.GetHashCode() ?? 0,
      38 => _value37?.GetHashCode() ?? 0,
      39 => _value38?.GetHashCode() ?? 0,
      40 => _value39?.GetHashCode() ?? 0,
      41 => _value40?.GetHashCode() ?? 0,
      42 => _value41?.GetHashCode() ?? 0,
      43 => _value42?.GetHashCode() ?? 0,
      44 => _value43?.GetHashCode() ?? 0,
      45 => _value44?.GetHashCode() ?? 0,
      46 => _value45?.GetHashCode() ?? 0,
      47 => _value46?.GetHashCode() ?? 0,
      48 => _value47?.GetHashCode() ?? 0,
      49 => _value48?.GetHashCode() ?? 0,
      50 => _value49?.GetHashCode() ?? 0,
      _ => 0
  } * 397) ^ _discriminator;

  #endregion
}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class UnionPerfA : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<UnionPerfA> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint ContainerOpcode { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint ProtocolVersion { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public UnionPerfU U { get; set; }

  /// <summary>
  /// </summary>
  public UnionPerfA() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="containerOpcode">
  /// </param>
  /// <param name="protocolVersion">
  /// </param>
  /// <param name="u">
  /// </param>
  public UnionPerfA([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint containerOpcode, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint protocolVersion, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] UnionPerfU u) => (ContainerOpcode, ProtocolVersion, U) = (containerOpcode, protocolVersion, u);
  public UnionPerfA([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] UnionPerfA original) => (ContainerOpcode, ProtocolVersion, U) = (original.ContainerOpcode, original.ProtocolVersion, original.U);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint containerOpcode, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint protocolVersion, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out UnionPerfU u) => (containerOpcode, protocolVersion, u) = (ContainerOpcode, ProtocolVersion, U);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    byteCount += U.MaxByteCount;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    byteCount += U.ByteCount;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(UnionPerfA record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(UnionPerfA record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfA Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfA Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfA Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfA Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfA Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(UnionPerfA record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteUInt32(record.ContainerOpcode);
    writer.WriteUInt32(record.ProtocolVersion);
    UnionPerfU.__EncodeInto(record.U, ref writer);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static UnionPerfA __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    uint field0;
    field0 = reader.ReadUInt32();
    uint field1;
    field1 = reader.ReadUInt32();
    UnionPerfU field2;
    field2 = UnionPerfU.__DecodeFrom(ref reader);
    return new UnionPerfA {
      ContainerOpcode = field0,
      ProtocolVersion = field1,
      U = field2,
    };
  }

  #endregion
  #region Equality
  public bool Equals(UnionPerfA other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return ContainerOpcode == other.ContainerOpcode && ProtocolVersion == other.ProtocolVersion && U == other.U;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not UnionPerfA baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= ContainerOpcode.GetHashCode();
    hash ^= ProtocolVersion.GetHashCode();
    hash ^= U.GetHashCode();
    return hash;
  }

  public static bool operator ==(UnionPerfA left, UnionPerfA right) => Equals(left, right);
  public static bool operator !=(UnionPerfA left, UnionPerfA  right) => !Equals(left, right);
  #endregion

}

/// <summary>
/// <para>Option B: an "encodedData" field, that "decode" is called a second time on.</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class UnionPerfB : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<UnionPerfB> {
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint ProtocolVersion { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public uint IncomingOpcode { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Collections.Immutable.ImmutableArray<byte> EncodedData { get; set; }

  /// <summary>
  /// <para>Option B: an "encodedData" field, that "decode" is called a second time on.</para>
  /// </summary>
  public UnionPerfB() : base() { }
  /// <summary>
  /// <para>Option B: an "encodedData" field, that "decode" is called a second time on.</para>
  /// </summary>
  /// <param name="protocolVersion">
  /// </param>
  /// <param name="incomingOpcode">
  /// </param>
  /// <param name="encodedData">
  /// </param>
  public UnionPerfB([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint protocolVersion, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] uint incomingOpcode, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Collections.Immutable.ImmutableArray<byte> encodedData) => (ProtocolVersion, IncomingOpcode, EncodedData) = (protocolVersion, incomingOpcode, encodedData);
  public UnionPerfB([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] UnionPerfB original) => (ProtocolVersion, IncomingOpcode, EncodedData) = (original.ProtocolVersion, original.IncomingOpcode, original.EncodedData);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint protocolVersion, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out uint incomingOpcode, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Collections.Immutable.ImmutableArray<byte> encodedData) => (protocolVersion, incomingOpcode, encodedData) = (ProtocolVersion, IncomingOpcode, EncodedData);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint) + EncodedData.Length * 1;
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(uint);
    byteCount += sizeof(uint);
    byteCount += sizeof(uint) + EncodedData.Length * 1;
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(UnionPerfB record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(UnionPerfB record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfB Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfB Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfB Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfB Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static UnionPerfB Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(UnionPerfB record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteUInt32(record.ProtocolVersion);
    writer.WriteUInt32(record.IncomingOpcode);
    writer.WriteBytes(record.EncodedData);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static UnionPerfB __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    uint field0;
    field0 = reader.ReadUInt32();
    uint field1;
    field1 = reader.ReadUInt32();
    global::System.Collections.Immutable.ImmutableArray<byte> field2;
    field2 = reader.ReadBytes();
    return new UnionPerfB {
      ProtocolVersion = field0,
      IncomingOpcode = field1,
      EncodedData = field2,
    };
  }

  #endregion
  #region Equality
  public bool Equals(UnionPerfB other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return ProtocolVersion == other.ProtocolVersion && IncomingOpcode == other.IncomingOpcode && (EncodedData == null ? other.EncodedData == null : other.EncodedData != null && global::System.Linq.Enumerable.SequenceEqual(EncodedData, other.EncodedData));
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not UnionPerfB baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= ProtocolVersion.GetHashCode();
    hash ^= IncomingOpcode.GetHashCode();
    hash ^= EncodedData.GetHashCode();
    return hash;
  }

  public static bool operator ==(UnionPerfB left, UnionPerfB right) => Equals(left, right);
  public static bool operator !=(UnionPerfB left, UnionPerfB  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B1 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B1> {
  public const uint OpCode = 0x1;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I1 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B1() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i1">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B1([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I1, U, F, S, G, B) = (i1, u, f, s, g, b);
  public B1([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B1 original) => (I1, U, F, S, G, B) = (original.I1, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i1, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i1, u, f, s, g, b) = (I1, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B1 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B1 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B1 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B1 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B1 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B1 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B1 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B1 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I1);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B1 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B1 {
      I1 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B1 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I1 == other.I1 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B1 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I1.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B1 left, B1 right) => Equals(left, right);
  public static bool operator !=(B1 left, B1  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B2 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B2> {
  public const uint OpCode = 0x2;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I2 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B2() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i2">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B2([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i2, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I2, U, F, S, G, B) = (i2, u, f, s, g, b);
  public B2([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B2 original) => (I2, U, F, S, G, B) = (original.I2, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i2, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i2, u, f, s, g, b) = (I2, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B2 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B2 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B2 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B2 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B2 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B2 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B2 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B2 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I2);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B2 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B2 {
      I2 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B2 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I2 == other.I2 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B2 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I2.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B2 left, B2 right) => Equals(left, right);
  public static bool operator !=(B2 left, B2  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B3 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B3> {
  public const uint OpCode = 0x3;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I3 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B3() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i3">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B3([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i3, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I3, U, F, S, G, B) = (i3, u, f, s, g, b);
  public B3([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B3 original) => (I3, U, F, S, G, B) = (original.I3, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i3, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i3, u, f, s, g, b) = (I3, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B3 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B3 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B3 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B3 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B3 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B3 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B3 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B3 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I3);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B3 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B3 {
      I3 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B3 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I3 == other.I3 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B3 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I3.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B3 left, B3 right) => Equals(left, right);
  public static bool operator !=(B3 left, B3  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B4 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B4> {
  public const uint OpCode = 0x4;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I4 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B4() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i4">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B4([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I4, U, F, S, G, B) = (i4, u, f, s, g, b);
  public B4([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B4 original) => (I4, U, F, S, G, B) = (original.I4, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i4, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i4, u, f, s, g, b) = (I4, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B4 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B4 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B4 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B4 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B4 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B4 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B4 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B4 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I4);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B4 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B4 {
      I4 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B4 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I4 == other.I4 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B4 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I4.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B4 left, B4 right) => Equals(left, right);
  public static bool operator !=(B4 left, B4  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B5 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B5> {
  public const uint OpCode = 0x5;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I5 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B5() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i5">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B5([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i5, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I5, U, F, S, G, B) = (i5, u, f, s, g, b);
  public B5([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B5 original) => (I5, U, F, S, G, B) = (original.I5, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i5, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i5, u, f, s, g, b) = (I5, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B5 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B5 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B5 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B5 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B5 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B5 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B5 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B5 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I5);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B5 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B5 {
      I5 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B5 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I5 == other.I5 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B5 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I5.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B5 left, B5 right) => Equals(left, right);
  public static bool operator !=(B5 left, B5  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B6 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B6> {
  public const uint OpCode = 0x6;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I6 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B6() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i6">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B6([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i6, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I6, U, F, S, G, B) = (i6, u, f, s, g, b);
  public B6([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B6 original) => (I6, U, F, S, G, B) = (original.I6, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i6, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i6, u, f, s, g, b) = (I6, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B6 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B6 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B6 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B6 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B6 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B6 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B6 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B6 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I6);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B6 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B6 {
      I6 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B6 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I6 == other.I6 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B6 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I6.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B6 left, B6 right) => Equals(left, right);
  public static bool operator !=(B6 left, B6  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B7 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B7> {
  public const uint OpCode = 0x7;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I7 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B7() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i7">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B7([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i7, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I7, U, F, S, G, B) = (i7, u, f, s, g, b);
  public B7([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B7 original) => (I7, U, F, S, G, B) = (original.I7, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i7, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i7, u, f, s, g, b) = (I7, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B7 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B7 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B7 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B7 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B7 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B7 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B7 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B7 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I7);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B7 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B7 {
      I7 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B7 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I7 == other.I7 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B7 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I7.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B7 left, B7 right) => Equals(left, right);
  public static bool operator !=(B7 left, B7  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B8 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B8> {
  public const uint OpCode = 0x8;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I8 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B8() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i8">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B8([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I8, U, F, S, G, B) = (i8, u, f, s, g, b);
  public B8([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B8 original) => (I8, U, F, S, G, B) = (original.I8, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i8, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i8, u, f, s, g, b) = (I8, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B8 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B8 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B8 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B8 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B8 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B8 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B8 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B8 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I8);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B8 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B8 {
      I8 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B8 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I8 == other.I8 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B8 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I8.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B8 left, B8 right) => Equals(left, right);
  public static bool operator !=(B8 left, B8  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B9 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B9> {
  public const uint OpCode = 0x9;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I9 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B9() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i9">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B9([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i9, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I9, U, F, S, G, B) = (i9, u, f, s, g, b);
  public B9([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B9 original) => (I9, U, F, S, G, B) = (original.I9, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i9, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i9, u, f, s, g, b) = (I9, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B9 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B9 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B9 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B9 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B9 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B9 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B9 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B9 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I9);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B9 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B9 {
      I9 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B9 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I9 == other.I9 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B9 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I9.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B9 left, B9 right) => Equals(left, right);
  public static bool operator !=(B9 left, B9  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B10 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B10> {
  public const uint OpCode = 0xA;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I10 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B10() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i10">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B10([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i10, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I10, U, F, S, G, B) = (i10, u, f, s, g, b);
  public B10([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B10 original) => (I10, U, F, S, G, B) = (original.I10, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i10, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i10, u, f, s, g, b) = (I10, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B10 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B10 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B10 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B10 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B10 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B10 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B10 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B10 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I10);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B10 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B10 {
      I10 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B10 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I10 == other.I10 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B10 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I10.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B10 left, B10 right) => Equals(left, right);
  public static bool operator !=(B10 left, B10  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B11 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B11> {
  public const uint OpCode = 0xB;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I11 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B11() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i11">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B11([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i11, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I11, U, F, S, G, B) = (i11, u, f, s, g, b);
  public B11([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B11 original) => (I11, U, F, S, G, B) = (original.I11, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i11, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i11, u, f, s, g, b) = (I11, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B11 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B11 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B11 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B11 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B11 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B11 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B11 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B11 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I11);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B11 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B11 {
      I11 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B11 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I11 == other.I11 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B11 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I11.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B11 left, B11 right) => Equals(left, right);
  public static bool operator !=(B11 left, B11  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B12 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B12> {
  public const uint OpCode = 0xC;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I12 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B12() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i12">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B12([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i12, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I12, U, F, S, G, B) = (i12, u, f, s, g, b);
  public B12([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B12 original) => (I12, U, F, S, G, B) = (original.I12, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i12, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i12, u, f, s, g, b) = (I12, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B12 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B12 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B12 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B12 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B12 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B12 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B12 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B12 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I12);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B12 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B12 {
      I12 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B12 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I12 == other.I12 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B12 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I12.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B12 left, B12 right) => Equals(left, right);
  public static bool operator !=(B12 left, B12  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B13 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B13> {
  public const uint OpCode = 0xD;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I13 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B13() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i13">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B13([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i13, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I13, U, F, S, G, B) = (i13, u, f, s, g, b);
  public B13([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B13 original) => (I13, U, F, S, G, B) = (original.I13, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i13, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i13, u, f, s, g, b) = (I13, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B13 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B13 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B13 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B13 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B13 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B13 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B13 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B13 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I13);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B13 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B13 {
      I13 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B13 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I13 == other.I13 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B13 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I13.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B13 left, B13 right) => Equals(left, right);
  public static bool operator !=(B13 left, B13  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B14 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B14> {
  public const uint OpCode = 0xE;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I14 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B14() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i14">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B14([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i14, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I14, U, F, S, G, B) = (i14, u, f, s, g, b);
  public B14([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B14 original) => (I14, U, F, S, G, B) = (original.I14, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i14, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i14, u, f, s, g, b) = (I14, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B14 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B14 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B14 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B14 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B14 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B14 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B14 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B14 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I14);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B14 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B14 {
      I14 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B14 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I14 == other.I14 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B14 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I14.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B14 left, B14 right) => Equals(left, right);
  public static bool operator !=(B14 left, B14  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B15 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B15> {
  public const uint OpCode = 0xF;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I15 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B15() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i15">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B15([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i15, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I15, U, F, S, G, B) = (i15, u, f, s, g, b);
  public B15([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B15 original) => (I15, U, F, S, G, B) = (original.I15, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i15, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i15, u, f, s, g, b) = (I15, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B15 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B15 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B15 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B15 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B15 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B15 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B15 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B15 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I15);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B15 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B15 {
      I15 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B15 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I15 == other.I15 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B15 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I15.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B15 left, B15 right) => Equals(left, right);
  public static bool operator !=(B15 left, B15  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B16 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B16> {
  public const uint OpCode = 0x10;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I16 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B16() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i16">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B16([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I16, U, F, S, G, B) = (i16, u, f, s, g, b);
  public B16([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B16 original) => (I16, U, F, S, G, B) = (original.I16, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i16, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i16, u, f, s, g, b) = (I16, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B16 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B16 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B16 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B16 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B16 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B16 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B16 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B16 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I16);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B16 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B16 {
      I16 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B16 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I16 == other.I16 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B16 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I16.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B16 left, B16 right) => Equals(left, right);
  public static bool operator !=(B16 left, B16  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B17 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B17> {
  public const uint OpCode = 0x11;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I17 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B17() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i17">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B17([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i17, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I17, U, F, S, G, B) = (i17, u, f, s, g, b);
  public B17([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B17 original) => (I17, U, F, S, G, B) = (original.I17, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i17, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i17, u, f, s, g, b) = (I17, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B17 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B17 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B17 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B17 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B17 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B17 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B17 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B17 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I17);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B17 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B17 {
      I17 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B17 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I17 == other.I17 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B17 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I17.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B17 left, B17 right) => Equals(left, right);
  public static bool operator !=(B17 left, B17  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B18 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B18> {
  public const uint OpCode = 0x12;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I18 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B18() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i18">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B18([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i18, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I18, U, F, S, G, B) = (i18, u, f, s, g, b);
  public B18([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B18 original) => (I18, U, F, S, G, B) = (original.I18, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i18, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i18, u, f, s, g, b) = (I18, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B18 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B18 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B18 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B18 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B18 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B18 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B18 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B18 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I18);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B18 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B18 {
      I18 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B18 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I18 == other.I18 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B18 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I18.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B18 left, B18 right) => Equals(left, right);
  public static bool operator !=(B18 left, B18  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B19 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B19> {
  public const uint OpCode = 0x13;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I19 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B19() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i19">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B19([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i19, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I19, U, F, S, G, B) = (i19, u, f, s, g, b);
  public B19([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B19 original) => (I19, U, F, S, G, B) = (original.I19, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i19, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i19, u, f, s, g, b) = (I19, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B19 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B19 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B19 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B19 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B19 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B19 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B19 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B19 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I19);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B19 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B19 {
      I19 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B19 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I19 == other.I19 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B19 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I19.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B19 left, B19 right) => Equals(left, right);
  public static bool operator !=(B19 left, B19  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B20 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B20> {
  public const uint OpCode = 0x14;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I20 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B20() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i20">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B20([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i20, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I20, U, F, S, G, B) = (i20, u, f, s, g, b);
  public B20([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B20 original) => (I20, U, F, S, G, B) = (original.I20, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i20, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i20, u, f, s, g, b) = (I20, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B20 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B20 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B20 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B20 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B20 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B20 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B20 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B20 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I20);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B20 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B20 {
      I20 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B20 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I20 == other.I20 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B20 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I20.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B20 left, B20 right) => Equals(left, right);
  public static bool operator !=(B20 left, B20  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B21 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B21> {
  public const uint OpCode = 0x15;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I21 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B21() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i21">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B21([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i21, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I21, U, F, S, G, B) = (i21, u, f, s, g, b);
  public B21([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B21 original) => (I21, U, F, S, G, B) = (original.I21, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i21, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i21, u, f, s, g, b) = (I21, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B21 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B21 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B21 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B21 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B21 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B21 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B21 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B21 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I21);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B21 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B21 {
      I21 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B21 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I21 == other.I21 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B21 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I21.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B21 left, B21 right) => Equals(left, right);
  public static bool operator !=(B21 left, B21  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B22 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B22> {
  public const uint OpCode = 0x16;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I22 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B22() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i22">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B22([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i22, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I22, U, F, S, G, B) = (i22, u, f, s, g, b);
  public B22([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B22 original) => (I22, U, F, S, G, B) = (original.I22, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i22, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i22, u, f, s, g, b) = (I22, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B22 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B22 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B22 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B22 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B22 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B22 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B22 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B22 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I22);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B22 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B22 {
      I22 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B22 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I22 == other.I22 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B22 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I22.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B22 left, B22 right) => Equals(left, right);
  public static bool operator !=(B22 left, B22  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B23 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B23> {
  public const uint OpCode = 0x17;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I23 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B23() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i23">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B23([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i23, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I23, U, F, S, G, B) = (i23, u, f, s, g, b);
  public B23([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B23 original) => (I23, U, F, S, G, B) = (original.I23, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i23, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i23, u, f, s, g, b) = (I23, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B23 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B23 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B23 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B23 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B23 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B23 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B23 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B23 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I23);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B23 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B23 {
      I23 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B23 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I23 == other.I23 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B23 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I23.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B23 left, B23 right) => Equals(left, right);
  public static bool operator !=(B23 left, B23  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B24 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B24> {
  public const uint OpCode = 0x18;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I24 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B24() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i24">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B24([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i24, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I24, U, F, S, G, B) = (i24, u, f, s, g, b);
  public B24([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B24 original) => (I24, U, F, S, G, B) = (original.I24, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i24, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i24, u, f, s, g, b) = (I24, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B24 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B24 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B24 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B24 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B24 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B24 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B24 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B24 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I24);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B24 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B24 {
      I24 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B24 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I24 == other.I24 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B24 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I24.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B24 left, B24 right) => Equals(left, right);
  public static bool operator !=(B24 left, B24  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B25 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B25> {
  public const uint OpCode = 0x19;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I25 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B25() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i25">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B25([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i25, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I25, U, F, S, G, B) = (i25, u, f, s, g, b);
  public B25([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B25 original) => (I25, U, F, S, G, B) = (original.I25, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i25, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i25, u, f, s, g, b) = (I25, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B25 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B25 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B25 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B25 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B25 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B25 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B25 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B25 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I25);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B25 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B25 {
      I25 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B25 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I25 == other.I25 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B25 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I25.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B25 left, B25 right) => Equals(left, right);
  public static bool operator !=(B25 left, B25  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B26 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B26> {
  public const uint OpCode = 0x1A;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I26 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B26() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i26">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B26([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i26, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I26, U, F, S, G, B) = (i26, u, f, s, g, b);
  public B26([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B26 original) => (I26, U, F, S, G, B) = (original.I26, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i26, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i26, u, f, s, g, b) = (I26, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B26 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B26 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B26 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B26 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B26 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B26 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B26 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B26 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I26);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B26 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B26 {
      I26 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B26 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I26 == other.I26 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B26 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I26.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B26 left, B26 right) => Equals(left, right);
  public static bool operator !=(B26 left, B26  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B27 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B27> {
  public const uint OpCode = 0x1B;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I27 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B27() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i27">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B27([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i27, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I27, U, F, S, G, B) = (i27, u, f, s, g, b);
  public B27([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B27 original) => (I27, U, F, S, G, B) = (original.I27, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i27, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i27, u, f, s, g, b) = (I27, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B27 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B27 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B27 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B27 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B27 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B27 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B27 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B27 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I27);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B27 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B27 {
      I27 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B27 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I27 == other.I27 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B27 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I27.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B27 left, B27 right) => Equals(left, right);
  public static bool operator !=(B27 left, B27  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B28 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B28> {
  public const uint OpCode = 0x1C;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I28 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B28() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i28">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B28([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i28, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I28, U, F, S, G, B) = (i28, u, f, s, g, b);
  public B28([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B28 original) => (I28, U, F, S, G, B) = (original.I28, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i28, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i28, u, f, s, g, b) = (I28, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B28 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B28 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B28 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B28 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B28 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B28 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B28 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B28 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I28);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B28 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B28 {
      I28 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B28 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I28 == other.I28 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B28 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I28.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B28 left, B28 right) => Equals(left, right);
  public static bool operator !=(B28 left, B28  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B29 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B29> {
  public const uint OpCode = 0x1D;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I29 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B29() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i29">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B29([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i29, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I29, U, F, S, G, B) = (i29, u, f, s, g, b);
  public B29([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B29 original) => (I29, U, F, S, G, B) = (original.I29, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i29, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i29, u, f, s, g, b) = (I29, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B29 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B29 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B29 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B29 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B29 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B29 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B29 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B29 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I29);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B29 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B29 {
      I29 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B29 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I29 == other.I29 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B29 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I29.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B29 left, B29 right) => Equals(left, right);
  public static bool operator !=(B29 left, B29  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B30 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B30> {
  public const uint OpCode = 0x1E;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I30 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B30() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i30">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B30([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i30, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I30, U, F, S, G, B) = (i30, u, f, s, g, b);
  public B30([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B30 original) => (I30, U, F, S, G, B) = (original.I30, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i30, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i30, u, f, s, g, b) = (I30, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B30 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B30 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B30 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B30 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B30 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B30 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B30 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B30 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I30);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B30 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B30 {
      I30 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B30 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I30 == other.I30 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B30 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I30.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B30 left, B30 right) => Equals(left, right);
  public static bool operator !=(B30 left, B30  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B31 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B31> {
  public const uint OpCode = 0x1F;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I31 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B31() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i31">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B31([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i31, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I31, U, F, S, G, B) = (i31, u, f, s, g, b);
  public B31([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B31 original) => (I31, U, F, S, G, B) = (original.I31, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i31, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i31, u, f, s, g, b) = (I31, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B31 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B31 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B31 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B31 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B31 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B31 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B31 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B31 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I31);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B31 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B31 {
      I31 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B31 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I31 == other.I31 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B31 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I31.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B31 left, B31 right) => Equals(left, right);
  public static bool operator !=(B31 left, B31  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B32 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B32> {
  public const uint OpCode = 0x20;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I32 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B32() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i32">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B32([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I32, U, F, S, G, B) = (i32, u, f, s, g, b);
  public B32([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B32 original) => (I32, U, F, S, G, B) = (original.I32, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i32, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i32, u, f, s, g, b) = (I32, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B32 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B32 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B32 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B32 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B32 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B32 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B32 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B32 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I32);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B32 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B32 {
      I32 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B32 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I32 == other.I32 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B32 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I32.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B32 left, B32 right) => Equals(left, right);
  public static bool operator !=(B32 left, B32  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B33 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B33> {
  public const uint OpCode = 0x21;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I33 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B33() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i33">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B33([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i33, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I33, U, F, S, G, B) = (i33, u, f, s, g, b);
  public B33([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B33 original) => (I33, U, F, S, G, B) = (original.I33, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i33, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i33, u, f, s, g, b) = (I33, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B33 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B33 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B33 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B33 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B33 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B33 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B33 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B33 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I33);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B33 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B33 {
      I33 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B33 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I33 == other.I33 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B33 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I33.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B33 left, B33 right) => Equals(left, right);
  public static bool operator !=(B33 left, B33  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B34 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B34> {
  public const uint OpCode = 0x22;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I34 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B34() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i34">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B34([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i34, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I34, U, F, S, G, B) = (i34, u, f, s, g, b);
  public B34([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B34 original) => (I34, U, F, S, G, B) = (original.I34, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i34, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i34, u, f, s, g, b) = (I34, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B34 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B34 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B34 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B34 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B34 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B34 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B34 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B34 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I34);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B34 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B34 {
      I34 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B34 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I34 == other.I34 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B34 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I34.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B34 left, B34 right) => Equals(left, right);
  public static bool operator !=(B34 left, B34  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B35 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B35> {
  public const uint OpCode = 0x23;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I35 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B35() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i35">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B35([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i35, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I35, U, F, S, G, B) = (i35, u, f, s, g, b);
  public B35([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B35 original) => (I35, U, F, S, G, B) = (original.I35, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i35, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i35, u, f, s, g, b) = (I35, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B35 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B35 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B35 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B35 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B35 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B35 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B35 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B35 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I35);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B35 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B35 {
      I35 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B35 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I35 == other.I35 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B35 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I35.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B35 left, B35 right) => Equals(left, right);
  public static bool operator !=(B35 left, B35  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B36 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B36> {
  public const uint OpCode = 0x24;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I36 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B36() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i36">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B36([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i36, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I36, U, F, S, G, B) = (i36, u, f, s, g, b);
  public B36([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B36 original) => (I36, U, F, S, G, B) = (original.I36, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i36, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i36, u, f, s, g, b) = (I36, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B36 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B36 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B36 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B36 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B36 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B36 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B36 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B36 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I36);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B36 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B36 {
      I36 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B36 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I36 == other.I36 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B36 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I36.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B36 left, B36 right) => Equals(left, right);
  public static bool operator !=(B36 left, B36  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B37 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B37> {
  public const uint OpCode = 0x25;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I37 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B37() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i37">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B37([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i37, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I37, U, F, S, G, B) = (i37, u, f, s, g, b);
  public B37([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B37 original) => (I37, U, F, S, G, B) = (original.I37, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i37, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i37, u, f, s, g, b) = (I37, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B37 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B37 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B37 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B37 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B37 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B37 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B37 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B37 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I37);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B37 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B37 {
      I37 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B37 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I37 == other.I37 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B37 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I37.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B37 left, B37 right) => Equals(left, right);
  public static bool operator !=(B37 left, B37  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B38 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B38> {
  public const uint OpCode = 0x26;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I38 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B38() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i38">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B38([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i38, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I38, U, F, S, G, B) = (i38, u, f, s, g, b);
  public B38([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B38 original) => (I38, U, F, S, G, B) = (original.I38, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i38, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i38, u, f, s, g, b) = (I38, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B38 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B38 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B38 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B38 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B38 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B38 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B38 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B38 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I38);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B38 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B38 {
      I38 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B38 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I38 == other.I38 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B38 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I38.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B38 left, B38 right) => Equals(left, right);
  public static bool operator !=(B38 left, B38  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B39 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B39> {
  public const uint OpCode = 0x27;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I39 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B39() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i39">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B39([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i39, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I39, U, F, S, G, B) = (i39, u, f, s, g, b);
  public B39([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B39 original) => (I39, U, F, S, G, B) = (original.I39, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i39, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i39, u, f, s, g, b) = (I39, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B39 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B39 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B39 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B39 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B39 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B39 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B39 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B39 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I39);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B39 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B39 {
      I39 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B39 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I39 == other.I39 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B39 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I39.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B39 left, B39 right) => Equals(left, right);
  public static bool operator !=(B39 left, B39  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B40 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B40> {
  public const uint OpCode = 0x28;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I40 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B40() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i40">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B40([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i40, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I40, U, F, S, G, B) = (i40, u, f, s, g, b);
  public B40([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B40 original) => (I40, U, F, S, G, B) = (original.I40, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i40, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i40, u, f, s, g, b) = (I40, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B40 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B40 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B40 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B40 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B40 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B40 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B40 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B40 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I40);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B40 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B40 {
      I40 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B40 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I40 == other.I40 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B40 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I40.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B40 left, B40 right) => Equals(left, right);
  public static bool operator !=(B40 left, B40  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B41 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B41> {
  public const uint OpCode = 0x29;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I41 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B41() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i41">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B41([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i41, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I41, U, F, S, G, B) = (i41, u, f, s, g, b);
  public B41([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B41 original) => (I41, U, F, S, G, B) = (original.I41, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i41, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i41, u, f, s, g, b) = (I41, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B41 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B41 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B41 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B41 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B41 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B41 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B41 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B41 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I41);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B41 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B41 {
      I41 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B41 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I41 == other.I41 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B41 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I41.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B41 left, B41 right) => Equals(left, right);
  public static bool operator !=(B41 left, B41  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B42 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B42> {
  public const uint OpCode = 0x2A;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I42 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B42() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i42">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B42([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i42, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I42, U, F, S, G, B) = (i42, u, f, s, g, b);
  public B42([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B42 original) => (I42, U, F, S, G, B) = (original.I42, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i42, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i42, u, f, s, g, b) = (I42, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B42 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B42 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B42 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B42 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B42 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B42 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B42 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B42 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I42);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B42 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B42 {
      I42 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B42 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I42 == other.I42 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B42 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I42.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B42 left, B42 right) => Equals(left, right);
  public static bool operator !=(B42 left, B42  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B43 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B43> {
  public const uint OpCode = 0x2B;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I43 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B43() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i43">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B43([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i43, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I43, U, F, S, G, B) = (i43, u, f, s, g, b);
  public B43([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B43 original) => (I43, U, F, S, G, B) = (original.I43, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i43, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i43, u, f, s, g, b) = (I43, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B43 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B43 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B43 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B43 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B43 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B43 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B43 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B43 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I43);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B43 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B43 {
      I43 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B43 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I43 == other.I43 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B43 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I43.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B43 left, B43 right) => Equals(left, right);
  public static bool operator !=(B43 left, B43  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B44 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B44> {
  public const uint OpCode = 0x2C;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I44 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B44() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i44">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B44([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i44, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I44, U, F, S, G, B) = (i44, u, f, s, g, b);
  public B44([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B44 original) => (I44, U, F, S, G, B) = (original.I44, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i44, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i44, u, f, s, g, b) = (I44, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B44 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B44 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B44 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B44 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B44 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B44 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B44 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B44 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I44);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B44 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B44 {
      I44 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B44 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I44 == other.I44 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B44 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I44.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B44 left, B44 right) => Equals(left, right);
  public static bool operator !=(B44 left, B44  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B45 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B45> {
  public const uint OpCode = 0x2D;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I45 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B45() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i45">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B45([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i45, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I45, U, F, S, G, B) = (i45, u, f, s, g, b);
  public B45([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B45 original) => (I45, U, F, S, G, B) = (original.I45, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i45, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i45, u, f, s, g, b) = (I45, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B45 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B45 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B45 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B45 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B45 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B45 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B45 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B45 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I45);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B45 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B45 {
      I45 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B45 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I45 == other.I45 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B45 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I45.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B45 left, B45 right) => Equals(left, right);
  public static bool operator !=(B45 left, B45  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B46 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B46> {
  public const uint OpCode = 0x2E;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I46 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B46() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i46">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B46([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i46, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I46, U, F, S, G, B) = (i46, u, f, s, g, b);
  public B46([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B46 original) => (I46, U, F, S, G, B) = (original.I46, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i46, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i46, u, f, s, g, b) = (I46, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B46 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B46 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B46 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B46 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B46 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B46 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B46 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B46 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I46);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B46 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B46 {
      I46 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B46 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I46 == other.I46 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B46 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I46.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B46 left, B46 right) => Equals(left, right);
  public static bool operator !=(B46 left, B46  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B47 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B47> {
  public const uint OpCode = 0x2F;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I47 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B47() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i47">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B47([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i47, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I47, U, F, S, G, B) = (i47, u, f, s, g, b);
  public B47([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B47 original) => (I47, U, F, S, G, B) = (original.I47, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i47, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i47, u, f, s, g, b) = (I47, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B47 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B47 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B47 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B47 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B47 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B47 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B47 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B47 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I47);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B47 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B47 {
      I47 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B47 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I47 == other.I47 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B47 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I47.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B47 left, B47 right) => Equals(left, right);
  public static bool operator !=(B47 left, B47  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B48 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B48> {
  public const uint OpCode = 0x30;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I48 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B48() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i48">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B48([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i48, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I48, U, F, S, G, B) = (i48, u, f, s, g, b);
  public B48([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B48 original) => (I48, U, F, S, G, B) = (original.I48, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i48, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i48, u, f, s, g, b) = (I48, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B48 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B48 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B48 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B48 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B48 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B48 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B48 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B48 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I48);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B48 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B48 {
      I48 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B48 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I48 == other.I48 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B48 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I48.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B48 left, B48 right) => Equals(left, right);
  public static bool operator !=(B48 left, B48  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B49 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B49> {
  public const uint OpCode = 0x31;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I49 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B49() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i49">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B49([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i49, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I49, U, F, S, G, B) = (i49, u, f, s, g, b);
  public B49([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B49 original) => (I49, U, F, S, G, B) = (original.I49, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i49, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i49, u, f, s, g, b) = (I49, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B49 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B49 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B49 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B49 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B49 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B49 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B49 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B49 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I49);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B49 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B49 {
      I49 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B49 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I49 == other.I49 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B49 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I49.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B49 left, B49 right) => Equals(left, right);
  public static bool operator !=(B49 left, B49  right) => !Equals(left, right);
  #endregion

}

[global::System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20210810-2118")]
[global::Bebop.Attributes.BebopRecord(global::Bebop.Runtime.BebopKind.Struct)]
public partial class B50 : global::Bebop.Runtime.BaseBebopRecord, global::System.IEquatable<B50> {
  public const uint OpCode = 0x32;
  /// <inheritdoc />
  public sealed override int MaxByteCount => GetMaxByteCount();
  /// <inheritdoc />
  public sealed override int ByteCount => GetByteCount();
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public int I50 { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public ulong U { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public double F { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public string S { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public global::System.Guid G { get; set; }
  [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull]
  public bool B { get; set; }

  /// <summary>
  /// </summary>
  public B50() : base() { }
  /// <summary>
  /// </summary>
  /// <param name="i50">
  /// </param>
  /// <param name="u">
  /// </param>
  /// <param name="f">
  /// </param>
  /// <param name="s">
  /// </param>
  /// <param name="g">
  /// </param>
  /// <param name="b">
  /// </param>
  public B50([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] int i50, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] bool b) => (I50, U, F, S, G, B) = (i50, u, f, s, g, b);
  public B50([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] B50 original) => (I50, U, F, S, G, B) = (original.I50, original.U, original.F, original.S, original.G, original.B);
  public void Deconstruct([global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out int i50, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out ulong u, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out double f, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out string s, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out global::System.Guid g, [global::System.Diagnostics.CodeAnalysis.NotNull, global::System.Diagnostics.CodeAnalysis.DisallowNull] out bool b) => (i50, u, f, s, g, b) = (I50, U, F, S, G, B);

  /// <summary>Calculates the maximum number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetMaxByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetMaxByteCount(S.Length);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }


  /// <summary>Calculates the number of bytes produced by encoding the current record.</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  private protected int GetByteCount() {
    int byteCount = 0;
    byteCount += sizeof(int);
    byteCount += sizeof(ulong);
    byteCount += sizeof(double);
    byteCount += sizeof(uint) + global::System.Text.Encoding.UTF8.GetByteCount(S);
    byteCount += 16;
    byteCount += sizeof(bool);
    return byteCount;
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override byte[] Encode() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static byte[] Encode(B50 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToArray();
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public sealed override global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably() {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(this, ref writer);
    return writer.ToImmutableArray();
  }
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static global::System.Collections.Immutable.ImmutableArray<byte> EncodeImmutably(B50 record) {
    var writer = global::Bebop.Runtime.BebopWriter.Create();
    __EncodeInto(record, ref writer);
    return writer.ToImmutableArray();
  }

  #region Static Decode Methods
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B50 Decode(byte[] record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B50 Decode(global::System.ReadOnlySpan<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B50 Decode(global::System.ReadOnlyMemory<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B50 Decode(global::System.ArraySegment<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  public static B50 Decode(global::System.Collections.Immutable.ImmutableArray<byte> record) {
    var reader = global::Bebop.Runtime.BebopReader.From(record);
    return __DecodeFrom(ref reader);
  }

  #endregion
  #region Internal Use
  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static int __EncodeInto(B50 record, ref global::Bebop.Runtime.BebopWriter writer) {
    var before = writer.Length;
    writer.WriteInt32(record.I50);
    writer.WriteUInt64(record.U);
    writer.WriteFloat64(record.F);
    writer.WriteString(record.S);
    writer.WriteGuid(record.G);
    writer.WriteByte(record.B);
    var after = writer.Length;
    return after - before;
  }


  /// <summary>DO NOT CALL THIS METHOD DIRECTLY!</summary>
  [global::System.Runtime.CompilerServices.MethodImpl(global::Bebop.Runtime.BebopConstants.HotPath)]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
  internal static B50 __DecodeFrom(ref global::Bebop.Runtime.BebopReader reader) {

    int field0;
    field0 = reader.ReadInt32();
    ulong field1;
    field1 = reader.ReadUInt64();
    double field2;
    field2 = reader.ReadFloat64();
    string field3;
    field3 = reader.ReadString();
    global::System.Guid field4;
    field4 = reader.ReadGuid();
    bool field5;
    field5 = reader.ReadByte() != 0;
    return new B50 {
      I50 = field0,
      U = field1,
      F = field2,
      S = field3,
      G = field4,
      B = field5,
    };
  }

  #endregion
  #region Equality
  public bool Equals(B50 other) {
    if (ReferenceEquals(null, other)) {
      return false;
    }
    if (ReferenceEquals(this, other)) {
      return true;
    }
    return I50 == other.I50 && U == other.U && F == other.F && S == other.S && G == other.G && B == other.B;
  }

  public override bool Equals(object obj) {
    if (ReferenceEquals(null, obj)) {
      return false;
    }
    if (ReferenceEquals(this, obj)) {
      return true;
    }
    if (obj is not B50 baseType) {
      return false;
    }
    return Equals(baseType);
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= I50.GetHashCode();
    hash ^= U.GetHashCode();
    hash ^= F.GetHashCode();
    hash ^= S.GetHashCode();
    hash ^= G.GetHashCode();
    hash ^= B.GetHashCode();
    return hash;
  }

  public static bool operator ==(B50 left, B50 right) => Equals(left, right);
  public static bool operator !=(B50 left, B50  right) => !Equals(left, right);
  #endregion

}

