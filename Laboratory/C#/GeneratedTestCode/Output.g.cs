//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:0.0.1-20201206-0609
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::System.Collections.Immutable;
using global::System.Linq;
using global::Bebop.Attributes;
using global::Bebop.Runtime;
//
// This source code was auto-generated by bebopc, Version=0.0.1-20201206-0609.
//
namespace Bebop.Codegen {
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseInt32s : System.IEquatable<BaseInt32s> {
    public int[] A { get; set; }
    public bool Equals(BaseInt32s other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (A is null && other.A is null ? true : A is null || other.A is null ? false : A.SequenceEqual(other.A));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseInt32s baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= A.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseInt32s left, BaseInt32s right) => Equals(left, right);
    public static bool operator !=(BaseInt32s left, BaseInt32s  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Int32s : BaseInt32s {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseInt32s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseInt32s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseInt32s record, ref BebopWriter writer) {
      {
        var length0 = unchecked((uint)record.A.Length);
        writer.WriteUInt32(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          writer.WriteInt32(record.A[i0]);
        }
      }
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseInt32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int32s Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseInt32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int32s Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseInt32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int32s Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseInt32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int32s Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseInt32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int32s Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Int32s DecodeFrom(ref BebopReader reader) {
      int[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new int[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          int x0;
          x0 = reader.ReadInt32();
          field0[i0] = x0;
        }
      }
      return new Int32s {
        A = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseInt32s, new() {
      int[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new int[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          int x0;
          x0 = reader.ReadInt32();
          field0[i0] = x0;
        }
      }
      return new T {
        A = field0,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseUint32s : System.IEquatable<BaseUint32s> {
    public uint[] A { get; set; }
    public bool Equals(BaseUint32s other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (A is null && other.A is null ? true : A is null || other.A is null ? false : A.SequenceEqual(other.A));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseUint32s baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= A.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseUint32s left, BaseUint32s right) => Equals(left, right);
    public static bool operator !=(BaseUint32s left, BaseUint32s  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Uint32s : BaseUint32s {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseUint32s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseUint32s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseUint32s record, ref BebopWriter writer) {
      {
        var length0 = unchecked((uint)record.A.Length);
        writer.WriteUInt32(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          writer.WriteUInt32(record.A[i0]);
        }
      }
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseUint32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint32s Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseUint32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint32s Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseUint32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint32s Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseUint32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint32s Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseUint32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint32s Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Uint32s DecodeFrom(ref BebopReader reader) {
      uint[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new uint[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          uint x0;
          x0 = reader.ReadUInt32();
          field0[i0] = x0;
        }
      }
      return new Uint32s {
        A = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseUint32s, new() {
      uint[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new uint[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          uint x0;
          x0 = reader.ReadUInt32();
          field0[i0] = x0;
        }
      }
      return new T {
        A = field0,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseFloat32s : System.IEquatable<BaseFloat32s> {
    public float[] A { get; set; }
    public bool Equals(BaseFloat32s other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (A is null && other.A is null ? true : A is null || other.A is null ? false : A.SequenceEqual(other.A));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseFloat32s baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= A.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseFloat32s left, BaseFloat32s right) => Equals(left, right);
    public static bool operator !=(BaseFloat32s left, BaseFloat32s  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Float32s : BaseFloat32s {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseFloat32s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseFloat32s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseFloat32s record, ref BebopWriter writer) {
      writer.WriteFloat32s(record.A);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseFloat32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float32s Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseFloat32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float32s Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseFloat32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float32s Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseFloat32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float32s Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseFloat32s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float32s Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Float32s DecodeFrom(ref BebopReader reader) {
      float[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new float[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          float x0;
          x0 = reader.ReadFloat32();
          field0[i0] = x0;
        }
      }
      return new Float32s {
        A = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseFloat32s, new() {
      float[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new float[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          float x0;
          x0 = reader.ReadFloat32();
          field0[i0] = x0;
        }
      }
      return new T {
        A = field0,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseInt64s : System.IEquatable<BaseInt64s> {
    public long[] A { get; set; }
    public bool Equals(BaseInt64s other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (A is null && other.A is null ? true : A is null || other.A is null ? false : A.SequenceEqual(other.A));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseInt64s baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= A.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseInt64s left, BaseInt64s right) => Equals(left, right);
    public static bool operator !=(BaseInt64s left, BaseInt64s  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Int64s : BaseInt64s {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseInt64s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseInt64s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseInt64s record, ref BebopWriter writer) {
      {
        var length0 = unchecked((uint)record.A.Length);
        writer.WriteUInt32(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          writer.WriteInt64(record.A[i0]);
        }
      }
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseInt64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int64s Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseInt64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int64s Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseInt64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int64s Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseInt64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int64s Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseInt64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Int64s Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Int64s DecodeFrom(ref BebopReader reader) {
      long[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new long[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          long x0;
          x0 = reader.ReadInt64();
          field0[i0] = x0;
        }
      }
      return new Int64s {
        A = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseInt64s, new() {
      long[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new long[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          long x0;
          x0 = reader.ReadInt64();
          field0[i0] = x0;
        }
      }
      return new T {
        A = field0,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseUint64s : System.IEquatable<BaseUint64s> {
    public ulong[] A { get; set; }
    public bool Equals(BaseUint64s other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (A is null && other.A is null ? true : A is null || other.A is null ? false : A.SequenceEqual(other.A));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseUint64s baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= A.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseUint64s left, BaseUint64s right) => Equals(left, right);
    public static bool operator !=(BaseUint64s left, BaseUint64s  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Uint64s : BaseUint64s {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseUint64s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseUint64s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseUint64s record, ref BebopWriter writer) {
      {
        var length0 = unchecked((uint)record.A.Length);
        writer.WriteUInt32(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          writer.WriteUInt64(record.A[i0]);
        }
      }
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseUint64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint64s Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseUint64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint64s Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseUint64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint64s Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseUint64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint64s Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseUint64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Uint64s Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Uint64s DecodeFrom(ref BebopReader reader) {
      ulong[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new ulong[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          ulong x0;
          x0 = reader.ReadUInt64();
          field0[i0] = x0;
        }
      }
      return new Uint64s {
        A = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseUint64s, new() {
      ulong[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new ulong[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          ulong x0;
          x0 = reader.ReadUInt64();
          field0[i0] = x0;
        }
      }
      return new T {
        A = field0,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseFloat64s : System.IEquatable<BaseFloat64s> {
    public double[] A { get; set; }
    public bool Equals(BaseFloat64s other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (A is null && other.A is null ? true : A is null || other.A is null ? false : A.SequenceEqual(other.A));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseFloat64s baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= A.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseFloat64s left, BaseFloat64s right) => Equals(left, right);
    public static bool operator !=(BaseFloat64s left, BaseFloat64s  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Float64s : BaseFloat64s {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseFloat64s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseFloat64s record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseFloat64s record, ref BebopWriter writer) {
      writer.WriteFloat64s(record.A);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseFloat64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float64s Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseFloat64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float64s Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseFloat64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float64s Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseFloat64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float64s Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseFloat64s, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Float64s Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Float64s DecodeFrom(ref BebopReader reader) {
      double[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new double[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          double x0;
          x0 = reader.ReadFloat64();
          field0[i0] = x0;
        }
      }
      return new Float64s {
        A = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseFloat64s, new() {
      double[] field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new double[length0];
        for (var i0 = 0; i0 < length0; i0++) {
          double x0;
          x0 = reader.ReadFloat64();
          field0[i0] = x0;
        }
      }
      return new T {
        A = field0,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public enum VideoCodec : uint {
    H264 = 0,
    H265 = 1
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseVideoData : System.IEquatable<BaseVideoData> {
    public double Time { get; set; }
    public uint Width { get; set; }
    public uint Height { get; set; }
    public ImmutableArray<byte> Fragment { get; set; }
    public bool Equals(BaseVideoData other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return Time == other.Time && Width == other.Width && Height == other.Height && (Fragment == null && other.Fragment == null ? true : Fragment == null || other.Fragment == null ? false : Fragment.SequenceEqual(other.Fragment));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseVideoData baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Time.GetHashCode();
      hash ^= Width.GetHashCode();
      hash ^= Height.GetHashCode();
      hash ^= Fragment.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseVideoData left, BaseVideoData right) => Equals(left, right);
    public static bool operator !=(BaseVideoData left, BaseVideoData  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class VideoData : BaseVideoData {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseVideoData record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseVideoData record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseVideoData record, ref BebopWriter writer) {
      writer.WriteFloat64(record.Time);
      writer.WriteUInt32(record.Width);
      writer.WriteUInt32(record.Height);
      writer.WriteBytes(record.Fragment);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseVideoData, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static VideoData Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseVideoData, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static VideoData Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseVideoData, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static VideoData Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseVideoData, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static VideoData Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseVideoData, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static VideoData Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static VideoData DecodeFrom(ref BebopReader reader) {
      double field0;
      field0 = reader.ReadFloat64();
      uint field1;
      field1 = reader.ReadUInt32();
      uint field2;
      field2 = reader.ReadUInt32();
      ImmutableArray<byte> field3;
      field3 = reader.ReadBytes();
      return new VideoData {
        Time = field0,
        Width = field1,
        Height = field2,
        Fragment = field3,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseVideoData, new() {
      double field0;
      field0 = reader.ReadFloat64();
      uint field1;
      field1 = reader.ReadUInt32();
      uint field2;
      field2 = reader.ReadUInt32();
      ImmutableArray<byte> field3;
      field3 = reader.ReadBytes();
      return new T {
        Time = field0,
        Width = field1,
        Height = field2,
        Fragment = field3,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseMediaMessage : System.IEquatable<BaseMediaMessage> {
    #nullable enable
    public VideoCodec? Codec { get; set; }
    public BaseVideoData? Data { get; set; }
    #nullable disable
    public bool Equals(BaseMediaMessage other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return Codec == other.Codec && Data == other.Data;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseMediaMessage baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Codec is not null) hash ^= Codec.Value.GetHashCode();
      if (Data is not null) hash ^= Data.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseMediaMessage left, BaseMediaMessage right) => Equals(left, right);
    public static bool operator !=(BaseMediaMessage left, BaseMediaMessage  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class MediaMessage : BaseMediaMessage {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseMediaMessage record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseMediaMessage record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseMediaMessage record, ref BebopWriter writer) {
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.Codec is not null) {
        writer.WriteByte(1);
        writer.WriteEnum<VideoCodec>(record.Codec.Value);
      }

      if (record.Data is not null) {
        writer.WriteByte(2);
        Bebop.Codegen.VideoData.EncodeInto(record.Data, ref writer);
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseMediaMessage, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static MediaMessage Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseMediaMessage, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static MediaMessage Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseMediaMessage, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static MediaMessage Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseMediaMessage, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static MediaMessage Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseMediaMessage, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static MediaMessage Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static MediaMessage DecodeFrom(ref BebopReader reader) {
      var record = new MediaMessage();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.Codec = reader.ReadEnum<VideoCodec>();
            break;
          case 2:
            record.Data = Bebop.Codegen.VideoData.DecodeFrom(ref reader);
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseMediaMessage, new() {
      var record = new T();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.Codec = reader.ReadEnum<VideoCodec>();
            break;
          case 2:
            record.Data = Bebop.Codegen.VideoData.DecodeFrom(ref reader);
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseSkipTestOld : System.IEquatable<BaseSkipTestOld> {
    #nullable enable
    public int? X { get; set; }
    public int? Y { get; set; }
    #nullable disable
    public bool Equals(BaseSkipTestOld other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return X == other.X && Y == other.Y;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseSkipTestOld baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X is not null) hash ^= X.Value.GetHashCode();
      if (Y is not null) hash ^= Y.Value.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseSkipTestOld left, BaseSkipTestOld right) => Equals(left, right);
    public static bool operator !=(BaseSkipTestOld left, BaseSkipTestOld  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class SkipTestOld : BaseSkipTestOld {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseSkipTestOld record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseSkipTestOld record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseSkipTestOld record, ref BebopWriter writer) {
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.X is not null) {
        writer.WriteByte(1);
        writer.WriteInt32(record.X.Value);
      }

      if (record.Y is not null) {
        writer.WriteByte(2);
        writer.WriteInt32(record.Y.Value);
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseSkipTestOld, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOld Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseSkipTestOld, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOld Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseSkipTestOld, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOld Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseSkipTestOld, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOld Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseSkipTestOld, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOld Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static SkipTestOld DecodeFrom(ref BebopReader reader) {
      var record = new SkipTestOld();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.X = reader.ReadInt32();
            break;
          case 2:
            record.Y = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseSkipTestOld, new() {
      var record = new T();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.X = reader.ReadInt32();
            break;
          case 2:
            record.Y = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseSkipTestNew : System.IEquatable<BaseSkipTestNew> {
    #nullable enable
    public int? X { get; set; }
    public int? Y { get; set; }
    public int? Z { get; set; }
    #nullable disable
    public bool Equals(BaseSkipTestNew other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return X == other.X && Y == other.Y && Z == other.Z;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseSkipTestNew baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X is not null) hash ^= X.Value.GetHashCode();
      if (Y is not null) hash ^= Y.Value.GetHashCode();
      if (Z is not null) hash ^= Z.Value.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseSkipTestNew left, BaseSkipTestNew right) => Equals(left, right);
    public static bool operator !=(BaseSkipTestNew left, BaseSkipTestNew  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class SkipTestNew : BaseSkipTestNew {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseSkipTestNew record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseSkipTestNew record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseSkipTestNew record, ref BebopWriter writer) {
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.X is not null) {
        writer.WriteByte(1);
        writer.WriteInt32(record.X.Value);
      }

      if (record.Y is not null) {
        writer.WriteByte(2);
        writer.WriteInt32(record.Y.Value);
      }

      if (record.Z is not null) {
        writer.WriteByte(3);
        writer.WriteInt32(record.Z.Value);
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseSkipTestNew, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNew Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseSkipTestNew, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNew Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseSkipTestNew, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNew Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseSkipTestNew, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNew Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseSkipTestNew, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNew Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static SkipTestNew DecodeFrom(ref BebopReader reader) {
      var record = new SkipTestNew();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.X = reader.ReadInt32();
            break;
          case 2:
            record.Y = reader.ReadInt32();
            break;
          case 3:
            record.Z = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseSkipTestNew, new() {
      var record = new T();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.X = reader.ReadInt32();
            break;
          case 2:
            record.Y = reader.ReadInt32();
            break;
          case 3:
            record.Z = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseSkipTestOldContainer : System.IEquatable<BaseSkipTestOldContainer> {
    #nullable enable
    public BaseSkipTestOld? S { get; set; }
    public int? After { get; set; }
    #nullable disable
    public bool Equals(BaseSkipTestOldContainer other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return S == other.S && After == other.After;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseSkipTestOldContainer baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (S is not null) hash ^= S.GetHashCode();
      if (After is not null) hash ^= After.Value.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseSkipTestOldContainer left, BaseSkipTestOldContainer right) => Equals(left, right);
    public static bool operator !=(BaseSkipTestOldContainer left, BaseSkipTestOldContainer  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class SkipTestOldContainer : BaseSkipTestOldContainer {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseSkipTestOldContainer record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseSkipTestOldContainer record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseSkipTestOldContainer record, ref BebopWriter writer) {
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.S is not null) {
        writer.WriteByte(1);
        Bebop.Codegen.SkipTestOld.EncodeInto(record.S, ref writer);
      }

      if (record.After is not null) {
        writer.WriteByte(2);
        writer.WriteInt32(record.After.Value);
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseSkipTestOldContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOldContainer Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseSkipTestOldContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOldContainer Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseSkipTestOldContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOldContainer Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseSkipTestOldContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOldContainer Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseSkipTestOldContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestOldContainer Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static SkipTestOldContainer DecodeFrom(ref BebopReader reader) {
      var record = new SkipTestOldContainer();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.S = Bebop.Codegen.SkipTestOld.DecodeFrom(ref reader);
            break;
          case 2:
            record.After = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseSkipTestOldContainer, new() {
      var record = new T();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.S = Bebop.Codegen.SkipTestOld.DecodeFrom(ref reader);
            break;
          case 2:
            record.After = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseSkipTestNewContainer : System.IEquatable<BaseSkipTestNewContainer> {
    #nullable enable
    public BaseSkipTestNew? S { get; set; }
    public int? After { get; set; }
    #nullable disable
    public bool Equals(BaseSkipTestNewContainer other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return S == other.S && After == other.After;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseSkipTestNewContainer baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (S is not null) hash ^= S.GetHashCode();
      if (After is not null) hash ^= After.Value.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseSkipTestNewContainer left, BaseSkipTestNewContainer right) => Equals(left, right);
    public static bool operator !=(BaseSkipTestNewContainer left, BaseSkipTestNewContainer  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class SkipTestNewContainer : BaseSkipTestNewContainer {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseSkipTestNewContainer record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseSkipTestNewContainer record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseSkipTestNewContainer record, ref BebopWriter writer) {
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.S is not null) {
        writer.WriteByte(1);
        Bebop.Codegen.SkipTestNew.EncodeInto(record.S, ref writer);
      }

      if (record.After is not null) {
        writer.WriteByte(2);
        writer.WriteInt32(record.After.Value);
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseSkipTestNewContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNewContainer Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseSkipTestNewContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNewContainer Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseSkipTestNewContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNewContainer Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseSkipTestNewContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNewContainer Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseSkipTestNewContainer, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static SkipTestNewContainer Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static SkipTestNewContainer DecodeFrom(ref BebopReader reader) {
      var record = new SkipTestNewContainer();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.S = Bebop.Codegen.SkipTestNew.DecodeFrom(ref reader);
            break;
          case 2:
            record.After = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseSkipTestNewContainer, new() {
      var record = new T();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.S = Bebop.Codegen.SkipTestNew.DecodeFrom(ref reader);
            break;
          case 2:
            record.After = reader.ReadInt32();
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public enum Instrument : uint {
    Sax = 0,
    Trumpet = 1,
    Clarinet = 2
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseMusician : System.IEquatable<BaseMusician> {
    public string Name { get; init; }
    public Instrument Plays { get; init; }
    public bool Equals(BaseMusician other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return Name == other.Name && Plays == other.Plays;
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseMusician baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Name.GetHashCode();
      hash ^= Plays.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseMusician left, BaseMusician right) => Equals(left, right);
    public static bool operator !=(BaseMusician left, BaseMusician  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Musician : BaseMusician {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseMusician record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseMusician record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseMusician record, ref BebopWriter writer) {
      writer.WriteString(record.Name);
      writer.WriteEnum<Instrument>(record.Plays);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseMusician, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Musician Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseMusician, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Musician Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseMusician, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Musician Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseMusician, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Musician Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseMusician, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Musician Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Musician DecodeFrom(ref BebopReader reader) {
      string field0;
      field0 = reader.ReadString();
      Instrument field1;
      field1 = reader.ReadEnum<Instrument>();
      return new Musician {
        Name = field0,
        Plays = field1,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseMusician, new() {
      string field0;
      field0 = reader.ReadString();
      Instrument field1;
      field1 = reader.ReadEnum<Instrument>();
      return new T {
        Name = field0,
        Plays = field1,
      };
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseSong : System.IEquatable<BaseSong> {
    #nullable enable
    public string? Title { get; set; }
    public ushort? Year { get; set; }
    public BaseMusician[]? Performers { get; set; }
    #nullable disable
    public bool Equals(BaseSong other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return Title == other.Title && Year == other.Year && (Performers is null && other.Performers is null ? true : Performers is null || other.Performers is null ? false : Performers.SequenceEqual(other.Performers));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseSong baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Title is not null) hash ^= Title.GetHashCode();
      if (Year is not null) hash ^= Year.Value.GetHashCode();
      if (Performers is not null) hash ^= Performers.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseSong left, BaseSong right) => Equals(left, right);
    public static bool operator !=(BaseSong left, BaseSong  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Song : BaseSong {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseSong record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseSong record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseSong record, ref BebopWriter writer) {
      var pos = writer.ReserveRecordLength();
      var start = writer.Length;

      if (record.Title is not null) {
        writer.WriteByte(1);
        writer.WriteString(record.Title);
      }

      if (record.Year is not null) {
        writer.WriteByte(2);
        writer.WriteUInt16(record.Year.Value);
      }

      if (record.Performers is not null) {
        writer.WriteByte(3);
        {
          var length0 = unchecked((uint)record.Performers.Length);
          writer.WriteUInt32(length0);
          for (var i0 = 0; i0 < length0; i0++) {
            Bebop.Codegen.Musician.EncodeInto(record.Performers[i0], ref writer);
          }
        }
      }
      writer.WriteByte(0);
      var end = writer.Length;
      writer.FillRecordLength(pos, unchecked((uint) unchecked(end - start)));
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseSong, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Song Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseSong, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Song Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseSong, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Song Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseSong, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Song Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseSong, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Song Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Song DecodeFrom(ref BebopReader reader) {
      var record = new Song();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.Title = reader.ReadString();
            break;
          case 2:
            record.Year = reader.ReadUInt16();
            break;
          case 3:
            {
              var length0 = unchecked((int)reader.ReadUInt32());
              record.Performers = new BaseMusician[length0];
              for (var i0 = 0; i0 < length0; i0++) {
                BaseMusician x0;
                x0 = Bebop.Codegen.Musician.DecodeFrom(ref reader);
                record.Performers[i0] = x0;
              }
            }
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseSong, new() {
      var record = new T();
      var length = reader.ReadRecordLength();
      var end = unchecked((int) (reader.Position + length));
      while (true) {
        switch (reader.ReadByte()) {
          case 0:
            return record;
          case 1:
            record.Title = reader.ReadString();
            break;
          case 2:
            record.Year = reader.ReadUInt16();
            break;
          case 3:
            {
              var length0 = unchecked((int)reader.ReadUInt32());
              record.Performers = new BaseMusician[length0];
              for (var i0 = 0; i0 < length0; i0++) {
                BaseMusician x0;
                x0 = Bebop.Codegen.Musician.DecodeFrom(ref reader);
                record.Performers[i0] = x0;
              }
            }
            break;
          default:
            reader.Position = end;
            return record;
        }
      }
    }
  }
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public abstract class BaseLibrary : System.IEquatable<BaseLibrary> {
    public System.Collections.Generic.Dictionary<System.Guid, BaseSong> Songs { get; set; }
    public bool Equals(BaseLibrary other) {
      if (ReferenceEquals(null, other)) {
        return false;
      }
      if (ReferenceEquals(this, other)) {
        return true;
      }
      return (Songs is null && other.Songs is null ? true : Songs is null || other.Songs is null ? false : Songs.SequenceEqual(other.Songs));
    }

    public override bool Equals(object obj) {
      if (ReferenceEquals(null, obj)) {
        return false;
      }
      if (ReferenceEquals(this, obj)) {
        return true;
      }
      if (obj is not BaseLibrary baseType) {
        return false;
      }
      return Equals(baseType);
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= Songs.GetHashCode();
      return hash;
    }

    public static bool operator ==(BaseLibrary left, BaseLibrary right) => Equals(left, right);
    public static bool operator !=(BaseLibrary left, BaseLibrary  right) => !Equals(left, right);
  }

  /// <inheritdoc />
  [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
  [BebopRecord]
  public sealed class Library : BaseLibrary {
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static byte[] Encode(BaseLibrary record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public byte[] Encode() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToArray();
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static ImmutableArray<byte> EncodeAsImmutable(BaseLibrary record) {
      var writer = BebopWriter.Create();
      EncodeInto(record, ref writer);
      return writer.ToImmutableArray();
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public ImmutableArray<byte> EncodeAsImmutable() {
      var writer = BebopWriter.Create();
      EncodeInto(this, ref writer);
      return writer.ToImmutableArray();
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static void EncodeInto(BaseLibrary record, ref BebopWriter writer) {
      writer.WriteUInt32(unchecked((uint)record.Songs.Count));
      foreach (var kv0 in record.Songs) {
        writer.WriteGuid(kv0.Key);
        Bebop.Codegen.Song.EncodeInto(kv0.Value, ref writer);
      }
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(byte[] record) where T : BaseLibrary, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Library Decode(byte[] record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlySpan<byte> record) where T : BaseLibrary, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Library Decode(System.ReadOnlySpan<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ReadOnlyMemory<byte> record) where T : BaseLibrary, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Library Decode(System.ReadOnlyMemory<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(System.ArraySegment<byte> record) where T : BaseLibrary, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Library Decode(System.ArraySegment<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static T DecodeAs<T>(ImmutableArray<byte> record) where T : BaseLibrary, new() {
      var reader = BebopReader.From(record);
      return DecodeFrom<T>(ref reader);
    }

    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    public static Library Decode(ImmutableArray<byte> record) {
      var reader = BebopReader.From(record);
      return DecodeFrom(ref reader);
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static Library DecodeFrom(ref BebopReader reader) {
      System.Collections.Generic.Dictionary<System.Guid, BaseSong> field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new System.Collections.Generic.Dictionary<System.Guid, BaseSong>(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          System.Guid k0;
          BaseSong v0;
          k0 = reader.ReadGuid();
          v0 = Bebop.Codegen.Song.DecodeFrom(ref reader);
          field0.Add(k0, v0);
        }
      }
      return new Library {
        Songs = field0,
      };
    }
    [System.Runtime.CompilerServices.MethodImpl(BebopConstants.HotPath)]
    [System.CodeDom.Compiler.GeneratedCode("bebopc", "0.0.1-20201206-0609")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    internal static T DecodeFrom<T>(ref BebopReader reader) where T: BaseLibrary, new() {
      System.Collections.Generic.Dictionary<System.Guid, BaseSong> field0;
      {
        var length0 = unchecked((int)reader.ReadUInt32());
        field0 = new System.Collections.Generic.Dictionary<System.Guid, BaseSong>(length0);
        for (var i0 = 0; i0 < length0; i0++) {
          System.Guid k0;
          BaseSong v0;
          k0 = reader.ReadGuid();
          v0 = Bebop.Codegen.Song.DecodeFrom(ref reader);
          field0.Add(k0, v0);
        }
      }
      return new T {
        Songs = field0,
      };
    }
  }
}
