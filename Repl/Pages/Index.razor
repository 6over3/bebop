@page "/"
@using Core.Generators
@using Core.Meta
@using Core.Parser
@inject IJSRuntime JS


<div class="container">
  <div class="side-by-side">
    <div class="editor-wrapper">
      <StandaloneCodeEditor @ref="_schemaEditor" Id="schemaEditor" CssClass="my-editor-class" ConstructionOptions="SchemaConstructionOptions" OnKeyUp="OnInput" />
    </div>

    <div class="editor-wrapper">
      <StandaloneCodeEditor @ref="_previewEditor" Id="previewEditor" CssClass="my-editor-class" ConstructionOptions="PreviewConstructionOptions"  />
    </div>
  </div>

  <div class="toolbar">
    <label for="generators">Generate code for:</label>

    <select @bind="SelectedGenerator" id="generators">
      @foreach (var (key, value) in GeneratorUtils.ImplementedGeneratorNames)
      {
        <option value="@key">@value</option>
      }
    </select>
    <span>@(Core.Meta.ReservedWords.CompilerName) @(DotEnv.Generated.Environment.Version)</span>
  </div>
</div>



@code {
      private StandaloneCodeEditor _schemaEditor = null!;
      private StandaloneCodeEditor _previewEditor = null!;
    string _selectedGenerator = "ts";
    string SelectedGenerator
    {
        get => _selectedGenerator;
        set
        {
            if (_selectedGenerator != value)
            {
                _selectedGenerator = value;
                ShowOutput();
            }
        }
    }
    string _schema = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await JS.InvokeAsync<bool>("hasExampleParam"))
            {
                await JS.InvokeVoidAsync("setExampleSchema");
                _schema = GetExampleSchema();
            }
        }
    }

       private StandaloneEditorConstructionOptions SchemaConstructionOptions(StandaloneCodeEditor editor)
{
	return new StandaloneEditorConstructionOptions
	{
		AutomaticLayout = true,
        Theme = "vs-dark",
		Language = "bebop",
		Value = "struct Point { int32 x; int32 y; }",
        FontLigatures = true,
        FormatOnType = true,
        FontFamily = "Fira Code",
         FontSize = 16,
        Minimap = new EditorMinimapOptions() {
            Enabled = false
        }
	};
}

    private StandaloneEditorConstructionOptions PreviewConstructionOptions(StandaloneCodeEditor editor)
{
	return new StandaloneEditorConstructionOptions
	{
		AutomaticLayout = true,
        Theme = "vs-dark",
		Language = "text",
		Value = "Generated code will appear here...",
        FontLigatures = true,
         FontFamily = "Fira Code",
         FontSize = 15,
         Minimap = new EditorMinimapOptions() {
            Enabled = false
        }
	};
}

protected override async Task OnInitializedAsync()
{
       await JS.InvokeVoidAsync("registerBebop");
}

}

@functions {
    [JSInvokable]
    public static string GetExampleSchema()
    {
        const string exampleSchema = @"enum Instrument {
    Sax = 0;
    Trumpet = 1;
    Clarinet = 2;
}

readonly struct Musician {
    string name;
    Instrument plays;
}

message Song {
    1 -> string title;
    2 -> uint16 year;
    3 -> Musician[] performers;
}

struct Library {
    map[guid, Song] songs;
}";
        return exampleSchema;
    }

    [JSInvokable]
    public static string GetCompilerName()
    {
        return ReservedWords.CompilerName;
    }

    [JSInvokable]
    public static string GetCompilerVersion()
    {
        return DotEnv.Generated.Environment.Version;
    }

    [JSInvokable]
    public static async Task<CompilerOutput> CompileSchema(string textualSchema, string generatorAlias)
    {
        textualSchema = textualSchema?.Trim() ?? string.Empty;
        generatorAlias = generatorAlias?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(textualSchema))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = "No schema was provided"
            };
        }
        if (string.IsNullOrWhiteSpace(generatorAlias))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = "No code generator was specified"
            };
        }
        if (!GeneratorUtils.ImplementedGenerators.ContainsKey(generatorAlias))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = $"The specified generator '{generatorAlias}' is not valid."
            };
        }

        try
        {
            var parser = new SchemaParser(textualSchema, string.Empty);
            var schema = await parser.Parse();
            _ = schema.Validate();
            var diagonstics =  schema.Errors.Concat(schema.Warnings).ToList();
            var hasErrorDiagonstics = diagonstics.Any((d) => d.Severity is Core.Exceptions.Severity.Error);
            return new CompilerOutput
            {
                IsOk = !hasErrorDiagonstics,
                Result = hasErrorDiagonstics ? string.Empty : GeneratorUtils.ImplementedGenerators[generatorAlias](schema).Compile(null, writeGeneratedNotice: false),
                Diagonstics = diagonstics
            };
        }
        catch (Exception e)
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = e.ToString()
            };
        }
    }

    private async Task ShowOutput()
    {
       
        var co = await CompileSchema(_schema, SelectedGenerator);
          if (co.IsOk) {
            var languageId = SelectedGenerator switch {
            "ts" => "typescript",
            "cs" => "csharp",
            "go" => "go",
            "java" => "java",
            "cpp" => "cpp",
            "rust" => "rust",
            "dart" => "dart",
          };
          var model = await _previewEditor.GetModel();
         await _previewEditor.UpdateOptions(new EditorUpdateOptions
          {
            ReadOnly = true
          });
        await  Global.SetModelLanguage(model,languageId);
         await _previewEditor.SetValue(co.Result);
           
        }
        await JS.InvokeVoidAsync("disableError", _previewEditor.Id);
        if(co.Diagonstics is not null) {
             var diagonstics = new List<dynamic>();
             foreach(var err in co.Diagonstics) {
                var range = new BlazorMonaco.Range(err.Span.StartLine + 1, err.Span.StartColumn + 1, err.Span.EndLine  + 1, err.Span.EndColumn + 1);
                diagonstics.Add(new {
                  severity = err.Severity is Core.Exceptions.Severity.Error ? 8 : 4,
                  startLineNumber = range.StartLineNumber,
                  startColumn = range.StartColumn,
                  endLineNumber = range.EndLineNumber,
                  endColumn = range.EndColumn,
                  message = err.Message,
                });
             }
            await JS.InvokeVoidAsync("setMarkers", _schemaEditor.Id, diagonstics.ToArray());
        } else {
             await JS.InvokeVoidAsync("clearMarkers", _schemaEditor.Id);
        }
    }

    [JSInvokable]
    private async Task OnInput(KeyboardEvent e)
    {
        _schema = await _schemaEditor.GetValue();
        await ShowOutput();
    }

}
