@page "/"
@using Core.Generators
@using Core.Meta
@using Core.Parser


<h1>REPL - (@GetCompilerName() / @GetCompilerVersion())</h1>

@functions {

    [JSInvokable]
    public static string GetCompilerName()
    {
        return ReservedWords.CompilerName;
    }

    [JSInvokable]
    public static string GetCompilerVersion()
    {
        return ReservedWords.CompilerVersion;
    }

    [JSInvokable]
    public static async Task<CompilerOutput> CompileSchema(string textualSchema, string generatorAlias)
    {
        textualSchema = textualSchema?.Trim() ?? string.Empty;
        generatorAlias = generatorAlias?.Trim() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(textualSchema))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = "No schema was provided"
            };
        }
        if (string.IsNullOrWhiteSpace(generatorAlias))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = "No code generator was specified"
            };
        }
        if (!GeneratorUtils.ImplementedGenerators.ContainsKey(generatorAlias))
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = $"The specified generator '{generatorAlias}' is not valid."
            };
        }

        try
        {
            var parser = new SchemaParser(textualSchema, "Bebop.Example");
            var schema = await parser.Evaluate();
            schema.Validate();
            return new CompilerOutput
            {
                IsOk = true,
                Result = GeneratorUtils.ImplementedGenerators[generatorAlias](schema).Compile()
            };
        }
        catch (Exception e)
        {
            return new CompilerOutput
            {
                IsOk = false,
                Result = e.ToString()
            };
        }
    }


    [JSInvokable]
    public static async Task<CompilerOutput> TestSchema()
    {
        const string example =
            @"
enum FurnitureFamily {
    Bed = 0;
    Table = 1;
    Shoe = 2;
}

readonly struct Furniture {
    string name;
    uint32 price;
	FurnitureFamily family;
}

[opcode(""IKEA"")]
message RequestCatalog {
    FurnitureFamily family = 1;
	[deprecated(""Nobody react to what I'm about to say..."")]
	string secretTunnel = 2;
}

[opcode(0x31323334)]
readonly struct RequestResponse {
    Furniture[] availableFurniture;
}
";
        return await CompileSchema(example, "cs");
    }


}