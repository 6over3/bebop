name: build-bebopc
on:
  workflow_dispatch:
  push:
    paths:
      - "Compiler/**"
      - "Core/**"
    branches:
      - master
  pull_request:
    paths:
      - "Compiler/**"
      - "Core/**"
    branches:
      - master
jobs:
  build-compiler:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-18.04]
        include:
          - os: macos-latest
            CONFIGURATION: macOS-Release
            RUNTIME: osx-x64
            ARTIFACT: bebopc

          - os: windows-latest
            CONFIGURATION: Windows-Release
            RUNTIME: win-x64
            ARTIFACT: bebopc.exe

          - os: ubuntu-18.04
            CONFIGURATION: Linux-Release
            RUNTIME: linux-x64
            ARTIFACT: bebopc

    env:
      BUILD_ARTIFACT: ./bin/compiler/${{matrix.CONFIGURATION}}/publish/${{matrix.ARTIFACT}}
      BUILD_ZIP_ARTIFACT: ./bin/compiler/${{matrix.CONFIGURATION}}/publish/${{matrix.ARTIFACT}}.zip
    steps:
      - uses: actions/checkout@v1

      - name: Get Enviorment Variables
        id: dotenv
        uses: falti/dotenv-action@v0.2.5

      - if: matrix.os == 'ubuntu-18.04'
        name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang zlib1g-dev libkrb5-dev libtinfo5

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x" # SDK Version to use; x will use the latest version of the 6.0 channel
      - name: Restore Solution
        run: dotnet restore
      - name: Build bebopc
        run: dotnet publish -c ${{matrix.CONFIGURATION}} -r ${{matrix.RUNTIME}} -p:ReleaseVersion=${{ steps.dotenv.outputs.version }}
        working-directory: ./Compiler/

      - if: matrix.os == 'macos-latest'
        name: ZIP macOS Build
        run: zip -j ${{env.BUILD_ZIP_ARTIFACT}} ${{env.BUILD_ARTIFACT}}

      - if: matrix.os == 'ubuntu-18.04'
        name: ZIP Linux Build
        run: zip -j ${{env.BUILD_ZIP_ARTIFACT}} ${{env.BUILD_ARTIFACT}}

      - if: matrix.os == 'windows-latest'
        name: ZIP Windows Build
        shell: powershell
        run: |
          Compress-Archive -Path ${{env.BUILD_ARTIFACT}} -DestinationPath ${{env.BUILD_ZIP_ARTIFACT}}

      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.RUNTIME}}
          path: ${{env.BUILD_ZIP_ARTIFACT}}