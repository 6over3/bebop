name: publish bebop

on:
  push:
    tags:
      - "v*"

jobs:
  build-compiler:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-18.04]
        include:
          - os: macos-latest
            IDENTIFIER: osx
            ARTIFACT: bebopc

          - os: windows-latest
            IDENTIFIER: win
            ARTIFACT: bebopc.exe

          - os: ubuntu-18.04
            IDENTIFIER: linux
            ARTIFACT: bebopc
    env:
      CONFIGURATION: Release
      BUILD_ARTIFACT_X86_64: ./bin/compiler/Release/publish/${{matrix.IDENTIFIER}}-x64/${{matrix.ARTIFACT}}
      BUILD_ARTIFACT_ARM64: ./bin/compiler/Release/publish/${{matrix.IDENTIFIER}}-arm64/${{matrix.ARTIFACT}}
      BUILD_ZIP_ARTIFACT_X86_64: ./bin/compiler/Release/publish/${{matrix.ARTIFACT}}-${{matrix.IDENTIFIER}}-x64.zip
      BUILD_ZIP_ARTIFACT_ARM64: ./bin/compiler/Release/publish/${{matrix.ARTIFACT}}-${{matrix.IDENTIFIER}}-arm64.zip
    steps:
      - uses: actions/checkout@v1

      - name: Get Environment Variables
        id: dotenv
        uses: falti/dotenv-action@v0.2.5

      # ubuntu is the fastest OS to spin up and if one fails they all fail.
      - if: matrix.os == 'ubuntu-18.04'
        name: Check if Versions Synced
        run: |
          if [[ ! refs/tags/v${{ steps.dotenv.outputs.version }} =~ ^(${{ github.ref }})$ ]]; then 
            echo "${{ steps.dotenv.outputs.version }} is not the same as ${{ github.ref }}. Did you bump the .env file?" 1>&2
            exit 1
          fi

      - if: matrix.os == 'ubuntu-18.04'
        name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang zlib1g-dev libkrb5-dev libtinfo5

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.0.x" # SDK Version to use; x will use the latest version of the 7.0 channel
          include-prerelease: true

      - name: Build bebopc
        run: |
          dotnet restore
          dotnet publish -c ${{env.CONFIGURATION}} -r ${{matrix.IDENTIFIER}}-x64 -p:ReleaseVersion=${{ steps.dotenv.outputs.version }} --self-contained
          dotnet publish -c ${{env.CONFIGURATION}} -r ${{matrix.IDENTIFIER}}-arm64 -p:ReleaseVersion=${{ steps.dotenv.outputs.version }} --self-contained
        working-directory: ./Compiler/

      - if: matrix.os == 'macos-latest'
        name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - if: matrix.os == 'macos-latest'
        name: Install gon via HomeBrew for Code Signing and App Notarization
        run: |
          brew install mitchellh/gon/gon

      - if: matrix.os == 'macos-latest'
        name: Sign the macOS Binary
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          mkdir ./tosign
          mv ${{env.BUILD_ARTIFACT_X86_64}} ./tosign/bebopc-macos-x64
          mv ${{env.BUILD_ZIP_ARTIFACT_ARM64}} ./tosign/bebopc-macos-arm64
          gon -log-level=trace -log-json ./gon.json

      - if: matrix.os == 'macos-latest'
        name: ZIP macOS Notarization Build
        run: |
          unzip -l ./notarized.zip
          unzip -o ./notarized.zip
          zip -j ${{env.BUILD_ZIP_ARTIFACT_X86_64}} ./bebopc-macos-x64
          zip -j ${{env.BUILD_ZIP_ARTIFACT_ARM64}} ./bebopc-macos-arm64

      - if: matrix.os == 'ubuntu-18.04'
        name: ZIP Linux Build
        run: |
          zip -j ${{env.BUILD_ZIP_ARTIFACT_X86_64}} ${{env.BUILD_ARTIFACT_X86_64}}
          zip -j ${{env.BUILD_ZIP_ARTIFACT_ARM64}} ${{env.BUILD_ARTIFACT_ARM64}}

      - if: matrix.os == 'windows-latest'
        name: ZIP Windows Build
        shell: powershell
        run: |
          Compress-Archive -Path ${{env.BUILD_ARTIFACT_X86_64}} -DestinationPath ${{env.BUILD_ZIP_ARTIFACT_X86_64}}
          Compress-Archive -Path ${{env.BUILD_ARTIFACT_ARM64}} -DestinationPath ${{env.BUILD_ZIP_ARTIFACT_ARM64}}

      - name: Upload X86_64 Build
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.IDENTIFIER}}-x64
          path: ${{env.BUILD_ZIP_ARTIFACT_X86_64}}

      - name: Upload ARM64 Build
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.IDENTIFIER}}-arm64
          path: ${{env.BUILD_ZIP_ARTIFACT_ARM64}}

  build-runtimes:
    env:
      NET_TEST_ROOT: ${{github.workspace}}/Laboratory/C#/Test
      NET_RUNTIME_ROOT: ${{github.workspace}}/Runtime/C#
      TS_TEST_ROOT: ${{github.workspace}}/Laboratory/TypeScript
      TS_RUNTIME_ROOT: ${{github.workspace}}/Runtime/TypeScript
      RUST_RUNTIME_ROOT: ${{github.workspace}}/Runtime/Rust
      RUST_TEST_ROOT: ${{github.workspace}}/Laboratory/Rust
    runs-on: ubuntu-18.04
    needs: build-compiler
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "14.15.1" # LTS

      - name: Get Environment Variables
        id: dotenv
        uses: falti/dotenv-action@v0.2.5

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.0.x" # SDK Version to use; x will use the latest version of the 7.0 channel
          include-prerelease: true

      - name: Test .NET Runtime
        run: |
          dotnet run --project ../../../Compiler/ --cs "../GeneratedTestCode/Output.g.cs" --namespace Bebop.Codegen --files $(ls -p ../../Schemas/Valid/*.bop | tr '\n' ' ')
          dotnet test -c Release -f net7.0
        working-directory: ${{env.NET_TEST_ROOT}}

      - name: Build .NET Runtime
        run: |
          dotnet restore
          dotnet build -c Release -p:ReleaseVersion=${{ steps.dotenv.outputs.version }}
        working-directory: ${{env.NET_RUNTIME_ROOT}}

      - name: Upload .NET Runtime Package
        uses: actions/upload-artifact@v2
        with:
          name: bebop-runtime-cs-${{ steps.dotenv.outputs.version }}
          path: ${{env.NET_RUNTIME_ROOT}}/bin/Release/bebop.${{ steps.dotenv.outputs.version }}.nupkg

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Cargo Login
        run: cargo login ${{ secrets.CRATES_TOKEN  }}

      - name: Download Compiler Artifacts
        uses: actions/download-artifact@v2

      - name: Extract Compiler Artifacts
        run: |
          mkdir -p ${{github.workspace}}/bin/compiler/Debug/artifacts
          unzip -j -o ./linux-x64/bebopc.zip -d ${{github.workspace}}/bin/compiler/Debug/artifacts
          ls

      # todo: depend on a different job
      - name: Test Rust Runtime
        run: cargo test
        working-directory: ${{ env.RUST_RUNTIME_ROOT }}
      - name: Test Rust Labratory
        run: |
          cargo check -p auto-testing
          cargo test -p functionality-testing
        working-directory: ${{ env.RUST_TEST_ROOT }}

      - name: Package Rust Runtime
        working-directory: ${{ env.RUST_RUNTIME_ROOT }}
        run: |
          sed 's/^version \?= \?.*/version = "${{ steps.dotenv.outputs.version }}"/' Cargo.toml > tmp
          mv tmp Cargo.toml
          cargo package --allow-dirty
      - name: Upload Rust Runtime
        uses: actions/upload-artifact@v2
        with:
          name: bebop-runtime-rust-${{steps.dotenv.outputs.version}}
          path: ${{ env.RUST_RUNTIME_ROOT }}/target/package/bebop-${{ steps.dotenv.outputs.version }}.crate

      # todo: depend on a different job
      - name: Test TypeScript Runtime
        run: |
          npm install
          bash compile-schemas.sh
          npm run test
        working-directory: ${{env.TS_TEST_ROOT}}

      - name: Build TypeScript Runtime
        run: |
          jq '.version = "${{ steps.dotenv.outputs.version }}"' package.json > tmp && mv tmp package.json
          npm install
          npm pack
        working-directory: ${{env.TS_RUNTIME_ROOT}}

      - name: Upload TypeScript Runtime Package
        uses: actions/upload-artifact@v2
        with:
          name: bebop-runtime-ts-${{ steps.dotenv.outputs.version }}
          path: ${{env.TS_RUNTIME_ROOT}}/bebop-${{ steps.dotenv.outputs.version }}.tgz

      - name: Build REPL
        run: |
          dotnet restore
          dotnet publish -c Release -p:ReleaseVersion=${{ steps.dotenv.outputs.version }}
        working-directory: ./Repl/

      - name: Upload REPL Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bebop-repl-${{ steps.dotenv.outputs.version }}
          path: ./bin/repl/Release/publish/wwwroot/

  build-tools:
    env:
      TOOLS_ROOT: ${{github.workspace}}/Tools
      BEBOPC_PATH: ${{github.workspace}}/Tools/bebopc
    needs: build-compiler
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - uses: actions/setup-node@v1
        with:
          node-version: "14.15.1" # LTS

      - name: Get Environment Variables
        id: dotenv
        uses: falti/dotenv-action@v0.2.5

      - name: Download Compiler Artifacts
        uses: actions/download-artifact@v2

      - name: Extract Compiler Artifacts
        run: |
          ls
          unzip -j -o ./win-x64/bebopc.exe.zip -d ${{env.BEBOPC_PATH}}/windows/x64
          unzip -j -o ./win-arm64/bebopc.exe.zip -d ${{env.BEBOPC_PATH}}/windows/arm64
          unzip -j -o ./osx-x64/bebopc.zip -d ${{env.BEBOPC_PATH}}/macos/x64
          unzip -j -o ./osx-arm64/bebopc.zip -d ${{env.BEBOPC_PATH}}/macos/arm64
          unzip -j -o ./linux-x64/bebopc.zip -d ${{env.BEBOPC_PATH}}/linux/x64
          unzip -j -o ./linux-arm64/bebopc.zip -d ${{env.BEBOPC_PATH}}/linux/arm64

      - name: Build NuGet Package
        run: bash build.sh ${{ steps.dotenv.outputs.version }}
        working-directory: ${{env.TOOLS_ROOT}}/vs

      - name: Upload Nuget Artifact
        uses: actions/upload-artifact@v2
        with:
          name: bebop-tools-nuget-${{ steps.dotenv.outputs.version }}
          path: ${{env.TOOLS_ROOT}}/vs/packages/bebop-tools.${{ steps.dotenv.outputs.version }}.nupkg

      - name: Package Cargo Tools
        working-directory: ${{env.TOOLS_ROOT}}/cargo
        run: |
          sed 's/^version \?= \?.*/version = "${{ steps.dotenv.outputs.version }}"/' Cargo.toml > tmp
          mv tmp Cargo.toml
          cargo package --allow-dirty

      - name: Upload Cargo Tools
        uses: actions/upload-artifact@v2
        with:
          name: bebop-tools-cargo-${{ steps.dotenv.outputs.version }}
          path: ${{ env.TOOLS_ROOT }}/cargo/target/package/bebop-tools-${{ steps.dotenv.outputs.version }}.crate

      - name: Copy Compiler Builds for NPM package
        run: |
          mkdir -p ${{env.TOOLS_ROOT}}/node/tools && cp -a ${{env.BEBOPC_PATH}}/. ${{env.TOOLS_ROOT}}/node/tools

      - name: Build Tools NPM Package
        run: |
          jq '.version = "${{ steps.dotenv.outputs.version }}"' package.json > tmp && mv tmp package.json
          npm install
          npm pack
        working-directory: ${{env.TOOLS_ROOT}}/node

      - name: Upload NPM Artifact
        uses: actions/upload-artifact@v2
        with:
          name: bebop-tools-npm-${{ steps.dotenv.outputs.version }}
          path: ${{env.TOOLS_ROOT}}/node/bebop-tools-${{ steps.dotenv.outputs.version }}.tgz

  publish-packages:
    env:
      RUST_RUNTIME_ROOT: ${{github.workspace}}/Runtime/Rust
      TOOLS_ROOT: ${{github.workspace}}/Tools
    runs-on: ubuntu-18.04
    needs: [build-compiler, build-runtimes, build-tools]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "14.15.1" # LTS
          registry-url: https://registry.npmjs.org/

      - name: Get Environment Variables
        id: dotenv
        uses: falti/dotenv-action@v0.2.5

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.0.x" # SDK Version to use; x will use the latest version of the 7.0 channel
          include-prerelease: true

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Cargo Login
        run: cargo login ${{ secrets.CRATES_TOKEN  }}

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Publish .NET Tools
        run: dotnet nuget push bebop-tools-nuget-${{ steps.dotenv.outputs.version }}/bebop-tools.${{ steps.dotenv.outputs.version }}.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Publish .NET Runtime
        run: dotnet nuget push bebop-runtime-cs-${{ steps.dotenv.outputs.version }}/bebop.${{ steps.dotenv.outputs.version }}.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Publish Rust Tools
        run: |
          sed 's/^version \?= \?.*/version = "${{ steps.dotenv.outputs.version }}"/' Cargo.toml > tmp
          mv tmp Cargo.toml
          cargo publish --allow-dirty
        working-directory: ${{env.TOOLS_ROOT}}/cargo

      - name: Publish Rust Runtime
        run: |
          sed 's/^version \?= \?.*/version = "${{ steps.dotenv.outputs.version }}"/' Cargo.toml > tmp
          mv tmp Cargo.toml
          cargo publish --allow-dirty
        working-directory: ${{env.RUST_RUNTIME_ROOT}}

      - name: Publish NodeJS Tools
        run: npm publish "./bebop-tools-npm-${{ steps.dotenv.outputs.version }}/bebop-tools-${{ steps.dotenv.outputs.version }}.tgz" --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Publish TypeScript Runtime
        run: npm publish "./bebop-runtime-ts-${{ steps.dotenv.outputs.version }}/bebop-${{ steps.dotenv.outputs.version }}.tgz" --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Stage Website
        run: |
          mkdir -p homepage/repl && cp -a bebop-repl-${{ steps.dotenv.outputs.version }}/. homepage/repl
          sed 's/0.0.0/${{ steps.dotenv.outputs.version }}/' ${{env.TOOLS_ROOT}}/bash/install.sh > homepage/install.sh

      - name: Publish Website
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: homepage
        with:
          args: --delete

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Bebop ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Compiler for Windows x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./win-x64/bebopc.exe.zip
          asset_name: bebopc-windows-x64.zip
          asset_content_type: application/zip

      - name: Upload Compiler for Windows ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./win-arm64/bebopc.exe.zip
          asset_name: bebopc-windows-arm64.zip
          asset_content_type: application/zip

      - name: Upload Compiler for Mac x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./osx-x64/bebopc.zip
          asset_name: bebopc-macos-x64.zip
          asset_content_type: application/zip

      - name: Upload Compiler for Mac x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./osx-arm64/bebopc.zip
          asset_name: bebopc-macos-arm64.zip
          asset_content_type: application/zip

      - name: Upload Compiler for Linux x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-x64/bebopc.zip
          asset_name: bebopc-linux-x64.zip
          asset_content_type: application/zip

      - name: Upload Compiler for Linux ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-arm64/bebopc.zip
          asset_name: bebopc-linux-arm64.zip
          asset_content_type: application/zip
